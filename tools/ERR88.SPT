-IN80
-TITLE ERR86.SPT:  COMPRESS SPITBOL ERROR MESSAGES
-STITLE Initialization
* Copyright (C)  1988-1998  Mark Emmer

* SPITBOL is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 2 of the License, or
* (at your option) any later version.
*
* This program  spitbol is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.

*
*  ERR.SPT
*
*  Find a near optimum compression for a Spitbol error message file.
*
*  SPITBOL -1<input file> -2<output file> ERR86
*
*  Technique:
*	The 159 characters from 1 to 31, and 128 to 255 are used to
*	represent words and phrases from the error file.  The error
*	list is then reduced to two character strings:
*		1. An error message string
*		2. A phrase string
*
*	Within each string, the individual messages or phrases are
*	separated by '\0' characters. The Nth element of either
*	string can be found by scanning and counting '\0's.
*
*	When a character with value 1 to 31, or 128 to 255 is encountered,
*	it should be mapped to an ordinal number in the range [1-159], and
*	the phrase string consulted to obtain the appropriate phrase.
*
*	Naturally (this being SNOBOL4), phrases may recursively contain
*	other code characters.
*
*	The problem reduces to finding the 159 phrases that will
*	provide the greatest compression.  For any phrase P of length S
*	that occurs N times in the source error message file, replacing
*	it with a single character and adding it to the phrase string
*	produces a savings of N*(S-1) - S - 1 characters.
*
*	Each of the N occurrances of P are replaced by a single character,
*	for a savings of N*(S-1) in the error message string.  The phrase
*	string is lengthened by S + 1 characters (1 for the '\0' at the end).
*
*	For a unique phrase (N=1), the savings is -2, that is, there is no
*	savings, but rather a net gain of 2 characters.
*
*	A sneaky pattern is used to generate all single- and multi-word
*	phrases in a particular error message.  Each phrase indexes a table
*	entry that counts the cost savings associated with that phrase.
*
*	All error messages are scanned to build this Savings table, which
*	is then RSORTed to obtain the phrase that if chosen, would produce
*	the greatest savings.  Taking that phrase, all occurrances of it
*	in all error messages are replaced by a single character, and the
*	phrase is added to a phrase array.
*
*	The entire process is repeated again, rather than just taking the
*	next best entry from the table.  This allows new combinations to
*	materialize, as a result of having replaced the phrase with a single
*	character, and also eliminates the problem of now obsolete table
*	entries that partially overlapped the chosen phrase.  The process
*	is repeated for all 159 entries that can be accommodated in the
*	phrase table.
*
*	As each phrase is selected, the phrase array is also scanned
*	to see any substitutions can be made there.
*
*	The program makes considerable use of Gimpel's SEQ function to
*	sequence through various arrays.
*
*	The output is a series of data statements in generic 68000 assembly
*	language.  There are two types of pseudo-ops:
*		1.  byte	to define decimal data bytes
*		2.  ascii	to define an ASCII string
*
*	The program reads from standard input, and writes to standard output.
*
*	Needless to say, it does take some time to grind out the results (22
*	minutes with 68K Spitbol on a Unix PC, 22 hours with SNOBOL4+ on
*	a PC/XT).
*
*	History:
*	  1.00	01/24/87	MBE - Initial version
*	  1.01  01/26/87	MBE - Generate generic M68K pseudo-ops
*	  1.02  08/06/89	MBE - 80386 version
*	  1.03	04/17/90	MBE - Read channel 1, write channel 2
*	  1.04  10/25/90	MBE - 8088 version
*	  1.05  09/13/92	MBE - Test for inconsistent re-use of error
*				      numbers.
*
*	Note: Moving the lower case characters (64-95) from the normal
*	      character set to the special set (thus providing for 191
*	      phrases instead of 159), only saved 40 bytes in the output
*	      file, and was deemed unnecessarily restrictive.
*
*	      Concatenating the error and phrase arrays prior to each call
*	      roduced a less optimal packing, and was discarding
*	      in favor of just using the error array to pick the next
*	      phrase for compression.

* Definitions for Microsoft or Borland 8088 assembler:
*
*  Comma delimited string of decimal bytes:
	byte	= char(9) 'DB' char(9)

*  Delim delimited string of 'normal' ascii characters (32-127)
	delim	= '"'
	ascii	= char(9) 'DB' char(9)

*  Comment lead-in character
*
	comment	= ';'

*  Data and public definitions
*
	group   = 
	data	= 'ERRORS' char(9) 'segment' char(9) "WORD PUBLIC 'DATA'"
	enddata	= 'ERRORS' char(9) 'ends'
	endstmt	= char(9) 'END'
	public	= char(9) 'PUBLIC' char(9)

*  Setup keywords
*
	&anchor	= 0
	&trim	= 1
	&stlimit = -1
	&code = 1
*	&fullscan = 1			;* For SNOBOL4+

*  Define the characters whose codes will be used as special pointers.
*
	&alphabet len(1) len(31) . f1 len(96) len(128) . f2
	specials = f1 f2

*  Functions
*

*  SEQ(S,N)
*
*	Will sequence through a set of statements until failure is detected.
*	The indexing variable is given by the name N. From Gimpel, "Algorithms
*	in SNOBOL4."
*
	define('seq(arg_s,arg_name)')		:(seq_end)

*  Entry point:  Initialize indexing variable.  Then convert arg_s to code.
*
seq	$arg_name  =  0
	arg_s  =  code(arg_s  ' :s(seq_1)f(seq_2)')
+						:f(error)

*  Increment indexing variable by 1 and spring off to compiled code.
*  Return will be to seq_1 or seq_2.
*
seq_1	$arg_name  =  $arg_name + 1		:<arg_s>

*  Control flows to seq_2 if a fail was detected.  If first time through
*  fail;  otherwise succeed.
*
seq_2	eq($arg_name,1)				:s(freturn)f(return)
seq_end


*  ASC(C)
*
*	Return the integer code for an ascii character C.
*
	define('asc(c)')			:(asc_end)
asc	&alphabet break(c) @asc			:(return)
asc_end


*  SPREAD(N)
*
*	Given N in the range [1-159], spread it out over the ranges [1-31]
*	and [128-255].
*
	define('spread(spread)')		:(spread_end)
spread	spread = ge(spread,32) spread + 96	:(return)
spread_end


*  SHRINK(N)
*
*	Given N in the ranges [1-31] and [128-255], shrink it back to the
*	range [1-159].
*
	define('shrink(shrink)')		:(shrink_end)
shrink	shrink = ge(shrink,128) shrink - 96	:(return)
shrink_end


*  BEST(ERR,N)
*
*	Select the best phrase from the error message array -- that is,
*	the phrase that will provide the greatest savings if replaced
*	by a one character code.
*
*	Technique:  Build a table of the savings associated with all
*	possible phrases in the ERR array, sort it, and select the best.
*	Then make all possible replacements, using integer N for the code.
*
	define('best(err,n)t,j')		:(best_end)

*  Entry:  Define a fresh table to hold all the generated phrases.
*
best	t = table(1001)
	terminal = n

*  Generate phrases for all error messages, then sort and select best.
*
	seq(" generate(err[j],t)", .j)
	t = rsort(t,2)				:f(freturn)

*  Abort the caller's sequencing if there is not a net savings possible
*  any more.
*
	gt(t[1,2],0)				:f(freturn)
	best = t[1,1]

*  Now replace the selected phrase in all error and phrase strings.
*
	seq(" repl(.err[j],best,n)", .j)
	seq(" repl(.phrase[j],best,n)", .j)	:(return)
best_end


*  GENERATE(S,T)
*
*	Generate all phrases from a string S, and add their potential
*	savings to table T.  The first occurence of a phrase produces
*	a savings of -2 (net loss).  Subsequent occurences provide an
*	incremental savings of size(phrase) -1.
*
*	The one phrase we do NOT generate from S is the entire
*	string S itself, since moving it to the phrase table is
*	meaningless.  (Assuming unique input strings.)
*
*	This relies upon FAIL pattern to generate all the permutations.
*	Put a trace on variable W to watch the results.
*
	define('generate(s,t)w')
	gen_pat = fence ("" | (breakx(' ' specials) len(1)))
+	   ((breakx(' ' specials) len(1)) | (len(1) rem)) $ w
+		*differ(s,w)
+		   *?(t[w] = (ident(t[w]) -2, t[w] + size(w) - 1)) fail
+							:(generate_end)
generate
	s ? gen_pat					:(return)
generate_end


*  REPL(X,I,S,N)
*
*	Replace string S in $X with CHAR(N).
*	This must be isolated into a function to prevent SEQ from
*	terminating early when a pattern match fails.
*
	define('repl(x,s,n)')				:(repl_end)
repl	$x ? s = char(n)				:f(return)s(repl)
repl_end


*  PUTOUT(S,I)
*
*	Output string S as a series of ascii and byte data statements.
*	I is the index of the string being compressed.
*
	define('putout(s,i)c,n,w')

*  Pattern to break S into normal and special characters.
*
	put_pat = (break(specials) | (len(1) rem)) . w
+			(span(specials) | "") . n
	put_one = len(1) . c				:(putout_end)

*  Entry.  Put out comment line to show what string is being compressed.
putout	output =
	output = comment lpad(i,5) '  "' expand(s) '"'

*  Main loop.  Get segments of normal and special characters.  Each segment
*    (or both) may be null.
*
put1	s ? put_pat =

*  Put out the normal characters, if any.
*
	output = differ(w) ascii delim w delim
	outsize = outsize + size(w)

*  If s is exhausted, append '\0' to special characters, then
*  put it out as a series of byte data statements.
*
	n = ident(s) n char(0)
	outsize = outsize + size(n)

put2	n ? put_one =				:f(put3)
	output = byte asc(c)			:(put2)

put3	differ(s)				:s(put1)f(return)
putout_end


*  EXPAND(S)
*
*	Recursively expand a string with compressed phrases.
*
	define('expand(s)f,c')
	ex_pat = (break(specials) . f len(1) . c) |
+		 ((len(1) rem) . f "" . c)	:(expand_end)

expand	s ? ex_pat =				:f(return)
	expand = ident(c) expand f		:s(return)
	expand = expand f expand(phrase[shrink(asc(c))])
+						:(expand)
expand_end


*  READERR(ERR)
*
*	Read in the error message file, building array of messages.
*	Return maximum error number as function value.
*
	define('readerr(a)s,n,msg')
	rde_done = fence notany('0123456789')
	rde_pat = fence len(3) . n len(1) rem . msg :(readerr_end)

readerr	s = input				:f(return)
	s ? rde_done				:s(return)
	s ? rde_pat				:f(rderr1)
        (differ(a[n]) differ(a[n],msg))		:s(rderr2)
	a[n] = msg
	readerr = gt(n,readerr) n
	insize = insize + 1 + size(msg)		:(readerr)

rderr1	terminal = "Bad input line: " s		:(freturn)
rderr2	terminal = "Inconsistent re-use of message number " n
	terminal = "First use: " a[n]
	terminal = "   Re-use: " msg		:(freturn)
readerr_end


***************************************************************************
*
*	MAIN PROGRAM
*
*  Open channel 1 on command line for input, channel 2 for output
	input(.input,1)
	output(.output,2)

*  Arrays to hold error messages and phrases
*
	input(.input,1)
	output(.output,2)

	in	= array(400)
	phrase	= array(159)

*  Prepare statistics
*
	insize	= 0
	outsize	= 0

*  Read input file, create Err array of exact size to just hold error messages.
*
	err = array(readerr(in))			:f(end)

*  Copy In array to Err array, then discard In array.
*
	seq(" err[i] = in[i]", .i)
	in =

*  Build phrase array
*
	seq(" phrase[i] = best(err, spread(i))", .i)


*  Putout title and header information
*
	output = comment ' COMPRESSED SPITBOL ERROR MESSAGES ' DATE()
	output = comment
	output = group
	output = data
	output =

*  Putout label and compressed error message table
*
	output = public '_errors'
	output = "_errors" byte '0'

	seq(" putout(err[i],i)", .i)

*  Putout label and phrase table
*
	output =
	output = public '_phrases'
	output = "_phrases" byte '0'
	seq(" putout(phrase[i],spread(i))", .i)

*  Finish up the output file
*
	output =
	output = enddata
	output = endstmt

*  Print statistics
*
	terminal = "Input message length = " insize
	terminal = "Output string size = " outsize
	terminal = "Savings = " insize - outsize

*  Clear error indicator for successful return
*
	&code = 0

end
