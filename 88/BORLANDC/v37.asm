	TITLE	SPITBOL TRANSLATOR V37
	NAME	V37
; MINIMAL/8088 Translator V1.11 03/18/00 17:51:18 for TURBOC32
; File TURBOC32.HDR
;
; For 16-bit 8088 SPITBOL, with 32-bit integer accumulator.
;
	page		80,132
	include		systype.ah
	include		rules.asi

	Header@

	Code_Seg@
	extrn		LDR_:far
	extrn		STR_:far
	extrn		ADR_:far
	extrn		SBR_:far
	extrn		MLR_:far
	extrn		DVR_:far
	extrn		NGR_:far
	extrn		SQR_:far

	extrn		OVR_:far
	extrn		MLI_:far
	extrn		DVI_:far
	extrn		RMI_:far
	extrn		CVD_:far
	extrn		CVM_:far
	extrn		RTI_:far
	extrn		ITR_:far
	extrn		ATN_:far
	extrn		CHP_:far
	extrn		COS_:far
	extrn		ETX_:far
	extrn		LNF_:far
	extrn		SIN_:far
	extrn		TAN_:far
	extrn		CPR_:far
	JUMPS
	Code_EndS@

	MinCode_Seg@
	include		hdrcode.inc
	MinCode_EndS@
	SUBTTL	S P I T B O L -- COPYRIGHT NOTICE
	SUBTTL	S P I T B O L -- NOTES TO IMPLEMENTORS
	SUBTTL	S P I T B O L - REVISION HISTORY
	SUBTTL	MINIMAL -- MACHINE INDEPENDENT MACRO ASSEMBLY LANG.
	SUBTTL	S P I T B O L  -- BASIC INFORMATION
	SUBTTL	S P I T B O L -- PROCEDURES SECTION
	Code_Seg@
	PUBLIC	SEC01
SEC01	LABEL	NEAR
	EXTRN	SYSAX:FAR
	EXTRN	SYSBS:FAR
	EXTRN	SYSBX:FAR
	EXTRN	SYSCR:FAR
	EXTRN	SYSDC:FAR
	EXTRN	SYSDM:FAR
	EXTRN	SYSDT:FAR
	EXTRN	SYSEA:FAR
	EXTRN	SYSEF:FAR
	EXTRN	SYSEJ:FAR
	EXTRN	SYSEM:FAR
	EXTRN	SYSEN:FAR
	EXTRN	SYSEP:FAR
	EXTRN	SYSEX:FAR
	EXTRN	SYSFC:FAR
	EXTRN	SYSGC:FAR
	EXTRN	SYSHS:FAR
	EXTRN	SYSID:FAR
	EXTRN	SYSIF:FAR
	EXTRN	SYSIL:FAR
	EXTRN	SYSIN:FAR
	EXTRN	SYSIO:FAR
	EXTRN	SYSLD:FAR
	EXTRN	SYSMM:FAR
	EXTRN	SYSMX:FAR
	EXTRN	SYSOU:FAR
	EXTRN	SYSPI:FAR
	EXTRN	SYSPL:FAR
	EXTRN	SYSPP:FAR
	EXTRN	SYSPR:FAR
	EXTRN	SYSRD:FAR
	EXTRN	SYSRI:FAR
	EXTRN	SYSRW:FAR
	EXTRN	SYSST:FAR
	EXTRN	SYSTM:FAR
	EXTRN	SYSTT:FAR
	EXTRN	SYSUL:FAR
	EXTRN	SYSXI:FAR
	SUBTTL	S P I T B O L -- DEFINITIONS AND DATA STRUCTURES
	Code_EndS@
	MinData_Seg@
	PUBLIC	SEC02
SEC02	LABEL	WORD
CFP_A	EQU	256
CFP_B	EQU	2
CFP_C	EQU	2
CFP_F	EQU	4
CFP_I	EQU	2
CFP_M	EQU	32767
CFP_N	EQU	16
CFP_R	EQU	4
CFP_S	EQU	9
CFP_X	EQU	3
NSTMX	EQU	10
MXDGS	EQU	CFP_S+CFP_X
NSTMR	EQU	MXDGS+5
CFP_U	EQU	128
E_SRS	EQU	200
E_STS	EQU	256
E_CBS	EQU	500
E_HNB	EQU	127
E_HNW	EQU	6
E_FSP	EQU	15
CH_LA	EQU	65
CH_LB	EQU	66
CH_LC	EQU	67
CH_LD	EQU	68
CH_LE	EQU	69
CH_LF	EQU	70
CH_LG	EQU	71
CH_LH	EQU	72
CH_LI	EQU	73
CH_LJ	EQU	74
CH_LK	EQU	75
CH_LL	EQU	76
CH_LM	EQU	77
CH_LN	EQU	78
CH_LO	EQU	79
CH_LP	EQU	80
CH_LQ	EQU	81
CH_LR	EQU	82
CH_LS	EQU	83
CH_LT	EQU	84
CH_LU	EQU	85
CH_LV	EQU	86
CH_LW	EQU	87
CH_LX	EQU	88
CH_LY	EQU	89
CH_L_	EQU	90
CH_D0	EQU	48
CH_D1	EQU	49
CH_D2	EQU	50
CH_D3	EQU	51
CH_D4	EQU	52
CH_D5	EQU	53
CH_D6	EQU	54
CH_D7	EQU	55
CH_D8	EQU	56
CH_D9	EQU	57
CH_AM	EQU	38
CH_AS	EQU	42
CH_AT	EQU	64
CH_BB	EQU	60
CH_BL	EQU	32
CH_BR	EQU	124
CH_CL	EQU	58
CH_CM	EQU	44
CH_DL	EQU	36
CH_DT	EQU	46
CH_DQ	EQU	34
CH_EQ	EQU	61
CH_EX	EQU	33
CH_MN	EQU	45
CH_NM	EQU	35
CH_NT	EQU	126
CH_PC	EQU	37
CH_PL	EQU	43
CH_PP	EQU	40
CH_RB	EQU	62
CH_RP	EQU	41
CH_QU	EQU	63
CH_SL	EQU	47
CH_SM	EQU	59
CH_SQ	EQU	39
CH_UN	EQU	95
CH_OB	EQU	91
CH_CB	EQU	93
CH_HT	EQU	9
CH_EY	EQU	94
CH__A	EQU	97
CH__B	EQU	98
CH__C	EQU	99
CH__D	EQU	100
CH__E	EQU	101
CH__F	EQU	102
CH__G	EQU	103
CH__H	EQU	104
CH__I	EQU	105
CH__J	EQU	106
CH__K	EQU	107
CH__L	EQU	108
CH__M	EQU	109
CH__N	EQU	110
CH__O	EQU	111
CH__P	EQU	112
CH__Q	EQU	113
CH__R	EQU	114
CH__S	EQU	115
CH__T	EQU	116
CH__U	EQU	117
CH__V	EQU	118
CH__W	EQU	119
CH__X	EQU	120
CH__Y	EQU	121
CH___	EQU	122
IODEL	EQU	32
OFFS1	EQU	1
OFFS2	EQU	2
OFFS3	EQU	3
BL_AR	EQU	0
BL_CD	EQU	BL_AR+1
BL_EX	EQU	BL_CD+1
BL_IC	EQU	BL_EX+1
BL_NM	EQU	BL_IC+1
BL_P0	EQU	BL_NM+1
BL_P1	EQU	BL_P0+1
BL_P2	EQU	BL_P1+1
BL_RC	EQU	BL_P2+1
BL_SC	EQU	BL_RC+1
BL_SE	EQU	BL_SC+1
BL_TB	EQU	BL_SE+1
BL_VC	EQU	BL_TB+1
BL_XN	EQU	BL_VC+1
BL_XR	EQU	BL_XN+1
BL_BC	EQU	BL_XR+1
BL_PD	EQU	BL_BC+1
BL__D	EQU	BL_PD+1
BL_TR	EQU	BL_PD+1
BL_BF	EQU	BL_TR+1
BL_CC	EQU	BL_BF+1
BL_CM	EQU	BL_CC+1
BL_CT	EQU	BL_CM+1
BL_DF	EQU	BL_CT+1
BL_EF	EQU	BL_DF+1
BL_EV	EQU	BL_EF+1
BL_FF	EQU	BL_EV+1
BL_KV	EQU	BL_FF+1
BL_PF	EQU	BL_KV+1
BL_TE	EQU	BL_PF+1
BL__I	EQU	0
BL__T	EQU	BL_TR+1
BL___	EQU	BL_TE+1
FCODE	EQU	0
FARGS	EQU	1
IDVAL	EQU	1
ARTYP	EQU	0
ARLEN	EQU	IDVAL+1
AROFS	EQU	ARLEN+1
ARNDM	EQU	AROFS+1
ARLBD	EQU	ARNDM+1
ARDIM	EQU	ARLBD+CFP_I
ARLB2	EQU	ARDIM+CFP_I
ARDM2	EQU	ARLB2+CFP_I
ARPRO	EQU	ARDIM+CFP_I
ARVLS	EQU	ARPRO+1
ARPR2	EQU	ARDM2+CFP_I
ARVL2	EQU	ARPR2+1
ARSI_	EQU	ARLBD
ARDMS	EQU	ARLB2-ARLBD
CCTYP	EQU	0
CCLEN	EQU	CCTYP+1
CCSLN	EQU	CCLEN+1
CCUSE	EQU	CCSLN+1
CCCOD	EQU	CCUSE+1
CDJMP	EQU	0
CDSTM	EQU	CDJMP+1
CDSLN	EQU	CDSTM+1
CDLEN	EQU	CDSLN+1
CDFAL	EQU	CDLEN+1
CDCOD	EQU	CDFAL+1
CDSI_	EQU	CDCOD
CMIDN	EQU	0
CMLEN	EQU	CMIDN+1
CMTYP	EQU	CMLEN+1
CMOPN	EQU	CMTYP+1
CMVLS	EQU	CMOPN+1
CMROP	EQU	CMVLS
CMLOP	EQU	CMVLS+1
CMSI_	EQU	CMVLS
CMUS_	EQU	CMSI_+1
CMBS_	EQU	CMSI_+2
CMAR1	EQU	CMVLS+1
C_ARR	EQU	0
C_FNC	EQU	C_ARR+1
C_DEF	EQU	C_FNC+1
C_IND	EQU	C_DEF+1
C_KEY	EQU	C_IND+1
C_UBO	EQU	C_KEY+1
C_UUO	EQU	C_UBO+1
C_UO_	EQU	C_UUO+1
C__NM	EQU	C_UUO+1
C_BVL	EQU	C_UUO+1
C_UVL	EQU	C_BVL+1
C_ALT	EQU	C_UVL+1
C_CNC	EQU	C_ALT+1
C_CNP	EQU	C_CNC+1
C_UNM	EQU	C_CNP+1
C_BVN	EQU	C_UNM+1
C_ASS	EQU	C_BVN+1
C_INT	EQU	C_ASS+1
C_NEG	EQU	C_INT+1
C_SEL	EQU	C_NEG+1
C_PMT	EQU	C_SEL+1
C_PR_	EQU	C_BVN
C__NV	EQU	C_PMT+1
CTTYP	EQU	0
CTCHS	EQU	CTTYP+1
CTSI_	EQU	CTCHS+CFP_A
DFLEN	EQU	FARGS+1
DFPDL	EQU	DFLEN+1
DFNAM	EQU	DFPDL+1
DFFLD	EQU	DFNAM+1
DFFLB	EQU	DFFLD-1
DFSI_	EQU	DFFLD
DVOPN	EQU	0
DVTYP	EQU	DVOPN+1
DVLPR	EQU	DVTYP+1
DVRPR	EQU	DVLPR+1
DVUS_	EQU	DVLPR+1
DVBS_	EQU	DVRPR+1
DVUBS	EQU	DVUS_+DVBS_
RRASS	EQU	10
LLASS	EQU	00
RRPMT	EQU	20
LLPMT	EQU	30
RRAMP	EQU	40
LLAMP	EQU	50
RRALT	EQU	70
LLALT	EQU	60
RRCNC	EQU	90
LLCNC	EQU	80
RRATS	EQU	110
LLATS	EQU	100
RRPLM	EQU	120
LLPLM	EQU	130
RRNUM	EQU	140
LLNUM	EQU	150
RRDVD	EQU	160
LLDVD	EQU	170
RRMLT	EQU	180
LLMLT	EQU	190
RRPCT	EQU	200
LLPCT	EQU	210
RREXP	EQU	230
LLEXP	EQU	220
RRDLD	EQU	240
LLDLD	EQU	250
RRNOT	EQU	270
LLNOT	EQU	260
LLUNO	EQU	999
EFLEN	EQU	FARGS+1
EFUSE	EQU	EFLEN+1
EFCOD	EQU	EFUSE+1
EFVAR	EQU	EFCOD+1
EFRSL	EQU	EFVAR+1
EFTAR	EQU	EFRSL+1
EFSI_	EQU	EFTAR
EVTYP	EQU	0
EVEXP	EQU	EVTYP+1
EVVAR	EQU	EVEXP+1
EVSI_	EQU	EVVAR+1
EXTYP	EQU	0
EXSTM	EQU	CDSTM
EXSLN	EQU	EXSTM+1
EXLEN	EQU	EXSLN+1
EXFLC	EQU	EXLEN+1
EXCOD	EQU	EXFLC+1
EXSI_	EQU	EXCOD
FFDFP	EQU	FARGS+1
FFNXT	EQU	FFDFP+1
FFOFS	EQU	FFNXT+1
FFSI_	EQU	FFOFS+1
ICGET	EQU	0
ICVAL	EQU	ICGET+1
ICSI_	EQU	ICVAL+CFP_I
KVTYP	EQU	0
KVVAR	EQU	KVTYP+1
KVNUM	EQU	KVVAR+1
KVSI_	EQU	KVNUM+1
NMTYP	EQU	0
NMBAS	EQU	NMTYP+1
NMOFS	EQU	NMBAS+1
NMSI_	EQU	NMOFS+1
PCODE	EQU	0
PTHEN	EQU	PCODE+1
PASI_	EQU	PTHEN+1
PARM1	EQU	PTHEN+1
PBSI_	EQU	PARM1+1
PARM2	EQU	PARM1+1
PCSI_	EQU	PARM2+1
PDTYP	EQU	0
PDDFP	EQU	IDVAL+1
PDFLD	EQU	PDDFP+1
PDFOF	EQU	DFFLD-PDFLD
PDSI_	EQU	PDFLD
PDDFS	EQU	DFSI_-PDSI_
PFLEN	EQU	FARGS+1
PFVBL	EQU	PFLEN+1
PFNLO	EQU	PFVBL+1
PFCOD	EQU	PFNLO+1
PFCTR	EQU	PFCOD+1
PFRTR	EQU	PFCTR+1
PFARG	EQU	PFRTR+1
PFAGB	EQU	PFARG-1
PFSI_	EQU	PFARG
RCGET	EQU	0
RCVAL	EQU	RCGET+1
RCSI_	EQU	RCVAL+CFP_R
SCGET	EQU	0
SCLEN	EQU	SCGET+1
SCHAR	EQU	SCLEN+1
SCSI_	EQU	SCHAR
SETYP	EQU	0
SEVAR	EQU	SETYP+1
SESI_	EQU	SEVAR+1
SVBIT	EQU	0
SVLEN	EQU	1
SVCHS	EQU	2
SVSI_	EQU	2
SVPRE	EQU	1
SVFFC	EQU	SVPRE+SVPRE
SVCKW	EQU	SVFFC+SVFFC
SVPRD	EQU	SVCKW+SVCKW
SVNBT	EQU	4
SVKNM	EQU	SVPRD+SVPRD
SVFNC	EQU	SVKNM+SVKNM
SVNAR	EQU	SVFNC+SVFNC
SVLBL	EQU	SVNAR+SVNAR
SVVAL	EQU	SVLBL+SVLBL
SVFNF	EQU	SVFNC+SVNAR
SVFNN	EQU	SVFNF+SVFFC
SVFNP	EQU	SVFNN+SVPRE
SVFPR	EQU	SVFNN+SVPRD
SVFNK	EQU	SVFNN+SVKNM
SVKWV	EQU	SVKNM+SVVAL
SVKWC	EQU	SVCKW+SVKNM
SVKVC	EQU	SVKWV+SVCKW
SVKVL	EQU	SVKVC+SVLBL
SVFPK	EQU	SVFNP+SVKVC
K_ABE	EQU	0
K_ANC	EQU	K_ABE+CFP_B
K_CAS	EQU	K_ANC+CFP_B
K_COD	EQU	K_CAS+CFP_B
K_COM	EQU	K_COD+CFP_B
K_DMP	EQU	K_COM+CFP_B
K_ERL	EQU	K_DMP+CFP_B
K_ERT	EQU	K_ERL+CFP_B
K_FTR	EQU	K_ERT+CFP_B
K_FLS	EQU	K_FTR+CFP_B
K_INP	EQU	K_FLS+CFP_B
K_MXL	EQU	K_INP+CFP_B
K_OUP	EQU	K_MXL+CFP_B
K_PFL	EQU	K_OUP+CFP_B
K_TRA	EQU	K_PFL+CFP_B
K_TRM	EQU	K_TRA+CFP_B
K_FNC	EQU	K_TRM+CFP_B
K_LST	EQU	K_FNC+CFP_B
K_LLN	EQU	K_LST+CFP_B
K_LIN	EQU	K_LLN+CFP_B
K_STN	EQU	K_LIN+CFP_B
K_ABO	EQU	K_STN+CFP_B
K_ARB	EQU	K_ABO+PASI_
K_BAL	EQU	K_ARB+PASI_
K_FAL	EQU	K_BAL+PASI_
K_FEN	EQU	K_FAL+PASI_
K_REM	EQU	K_FEN+PASI_
K_SUC	EQU	K_REM+PASI_
K_ALP	EQU	K_SUC+1
K_RTN	EQU	K_ALP+1
K_STC	EQU	K_RTN+1
K_ETX	EQU	K_STC+1
K_FIL	EQU	K_ETX+1
K_LFL	EQU	K_FIL+1
K_STL	EQU	K_LFL+1
K_LCS	EQU	K_STL+1
K_UCS	EQU	K_LCS+1
K__AL	EQU	K_ALP-K_ALP
K__RT	EQU	K_RTN-K_ALP
K__SC	EQU	K_STC-K_ALP
K__ET	EQU	K_ETX-K_ALP
K__FL	EQU	K_FIL-K_ALP
K__LF	EQU	K_LFL-K_ALP
K__SL	EQU	K_STL-K_ALP
K__LC	EQU	K_LCS-K_ALP
K__UC	EQU	K_UCS-K_ALP
K__N_	EQU	K__UC+1
K_P__	EQU	K_FNC
K_V__	EQU	K_ABO
K_S__	EQU	K_ALP
TBTYP	EQU	0
TBLEN	EQU	OFFS2
TBINV	EQU	OFFS3
TBBUK	EQU	TBINV+1
TBSI_	EQU	TBBUK
TBNBK	EQU	11
TETYP	EQU	0
TESUB	EQU	TETYP+1
TEVAL	EQU	TESUB+1
TENXT	EQU	TEVAL+1
TESI_	EQU	TENXT+1
TRIDN	EQU	0
TRTYP	EQU	TRIDN+1
TRVAL	EQU	TRTYP+1
TRNXT	EQU	TRVAL
TRLBL	EQU	TRVAL
TRKVR	EQU	TRVAL
TRTAG	EQU	TRVAL+1
TRTER	EQU	TRTAG
TRTRF	EQU	TRTAG
TRFNC	EQU	TRTAG+1
TRFPT	EQU	TRFNC
TRSI_	EQU	TRFNC+1
TRTIN	EQU	0
TRTAC	EQU	TRTIN+1
TRTVL	EQU	TRTAC+1
TRTOU	EQU	TRTVL+1
TRTFC	EQU	TRTOU+1
VCTYP	EQU	0
VCLEN	EQU	OFFS2
VCVLS	EQU	OFFS3
VCSI_	EQU	VCVLS
VCVLB	EQU	VCVLS-1
VCTBD	EQU	TBSI_-VCSI_
VRGET	EQU	0
VRSTO	EQU	VRGET+1
VRVAL	EQU	VRSTO+1
VRVLO	EQU	VRVAL-VRSTO
VRTRA	EQU	VRVAL+1
VRLBL	EQU	VRTRA+1
VRLBO	EQU	VRLBL-VRTRA
VRFNC	EQU	VRLBL+1
VRNXT	EQU	VRFNC+1
VRLEN	EQU	VRNXT+1
VRCHS	EQU	VRLEN+1
VRSVP	EQU	VRLEN+1
VRSI_	EQU	VRCHS+1
VRSOF	EQU	VRLEN-SCLEN
VRSVO	EQU	VRSVP-VRSOF
XNTYP	EQU	0
XNLEN	EQU	XNTYP+1
XNDTA	EQU	XNLEN+1
XNSI_	EQU	XNDTA
XRTYP	EQU	0
XRLEN	EQU	XRTYP+1
XRPTR	EQU	XRLEN+1
XRSI_	EQU	XRPTR
CNVST	EQU	8
CNVRT	EQU	CNVST+1
CNVBT	EQU	CNVRT
CNVTT	EQU	CNVBT+1
INILN	EQU	1024
INILS	EQU	1024
IONMB	EQU	2
IONMO	EQU	4
MNLEN	EQU	1024
MXERN	EQU	329
NUM01	EQU	1
NUM02	EQU	2
NUM03	EQU	3
NUM04	EQU	4
NUM05	EQU	5
NUM06	EQU	6
NUM07	EQU	7
NUM08	EQU	8
NUM09	EQU	9
NUM10	EQU	10
NM320	EQU	320
NM321	EQU	321
NINI8	EQU	998
NINI9	EQU	999
THSND	EQU	1000
OPBUN	EQU	5
OPUUN	EQU	6
PRSNF	EQU	13
PRTMF	EQU	21
RILEN	EQU	1024
STGIC	EQU	0
STGXC	EQU	STGIC+1
STGEV	EQU	STGXC+1
STGXT	EQU	STGEV+1
STGCE	EQU	STGXT+1
STGXE	EQU	STGCE+1
STGND	EQU	STGCE-STGIC
STGEE	EQU	STGXE+1
STGNO	EQU	STGEE+1
STNPD	EQU	5
T_UOP	EQU	0
T_LPR	EQU	T_UOP+3
T_LBR	EQU	T_LPR+3
T_CMA	EQU	T_LBR+3
T_FNC	EQU	T_CMA+3
T_VAR	EQU	T_FNC+3
T_CON	EQU	T_VAR+3
T_BOP	EQU	T_CON+3
T_RPR	EQU	T_BOP+3
T_RBR	EQU	T_RPR+3
T_COL	EQU	T_RBR+3
T_SMC	EQU	T_COL+3
T_FGO	EQU	T_SMC+1
T_SGO	EQU	T_FGO+1
T_UOK	EQU	T_FNC
T_UO0	EQU	T_UOP+0
T_UO1	EQU	T_UOP+1
T_UO2	EQU	T_UOP+2
T_LP0	EQU	T_LPR+0
T_LP1	EQU	T_LPR+1
T_LP2	EQU	T_LPR+2
T_LB0	EQU	T_LBR+0
T_LB1	EQU	T_LBR+1
T_LB2	EQU	T_LBR+2
T_CM0	EQU	T_CMA+0
T_CM1	EQU	T_CMA+1
T_CM2	EQU	T_CMA+2
T_FN0	EQU	T_FNC+0
T_FN1	EQU	T_FNC+1
T_FN2	EQU	T_FNC+2
T_VA0	EQU	T_VAR+0
T_VA1	EQU	T_VAR+1
T_VA2	EQU	T_VAR+2
T_CO0	EQU	T_CON+0
T_CO1	EQU	T_CON+1
T_CO2	EQU	T_CON+2
T_BO0	EQU	T_BOP+0
T_BO1	EQU	T_BOP+1
T_BO2	EQU	T_BOP+2
T_RP0	EQU	T_RPR+0
T_RP1	EQU	T_RPR+1
T_RP2	EQU	T_RPR+2
T_RB0	EQU	T_RBR+0
T_RB1	EQU	T_RBR+1
T_RB2	EQU	T_RBR+2
T_CL0	EQU	T_COL+0
T_CL1	EQU	T_COL+1
T_CL2	EQU	T_COL+2
T_SM0	EQU	T_SMC+0
T_SM1	EQU	T_SMC+1
T_SM2	EQU	T_SMC+2
T_NES	EQU	T_SM2+1
CC_CA	EQU	0
CC_DO	EQU	CC_CA+1
CC_CO	EQU	CC_DO+1
CC_DU	EQU	CC_CO+1
CC_CP	EQU	CC_DU+1
CC_EJ	EQU	CC_CP+1
CC_ER	EQU	CC_EJ+1
CC_EX	EQU	CC_ER+1
CC_FA	EQU	CC_EX+1
CC_IN	EQU	CC_FA+1
CC_LN	EQU	CC_IN+1
CC_LI	EQU	CC_LN+1
CC_NR	EQU	CC_LI+1
CC_NX	EQU	CC_NR+1
CC_NF	EQU	CC_NX+1
CC_NL	EQU	CC_NF+1
CC_NO	EQU	CC_NL+1
CC_NP	EQU	CC_NO+1
CC_OP	EQU	CC_NP+1
CC_PR	EQU	CC_OP+1
CC_SI	EQU	CC_PR+1
CC_SP	EQU	CC_SI+1
CC_ST	EQU	CC_SP+1
CC_TI	EQU	CC_ST+1
CC_TR	EQU	CC_TI+1
CC_NC	EQU	CC_TR+1
CCNOC	EQU	4
CCOFS	EQU	7
CCINM	EQU	9
CMSTM	EQU	0
CMSGO	EQU	CMSTM+1
CMFGO	EQU	CMSGO+1
CMCGO	EQU	CMFGO+1
CMPCD	EQU	CMCGO+1
CMFFP	EQU	CMPCD+1
CMFFC	EQU	CMFFP+1
CMSOP	EQU	CMFFC+1
CMSOC	EQU	CMSOP+1
CMLBL	EQU	CMSOC+1
CMTRA	EQU	CMLBL+1
CMNEN	EQU	CMTRA+1
PFPD1	EQU	8
PFPD2	EQU	20
PFPD3	EQU	32
PF_I2	EQU	CFP_I+CFP_I
	SUBTTL	S P I T B O L -- CONSTANT SECTION
	MinData_EndS@
	MinData_Seg@
	PUBLIC	SEC03
SEC03	LABEL	WORD
C_AAA	DW	0
ALFSP	DW	E_FSP
BITS0	DW	0
BITS1	DW	1
BITS2	DW	2
BITS3	DW	4
BITS4	DW	8
BITS5	DW	16
BITS6	DW	32
BITS7	DW	64
BITS8	DW	128
BITS9	DW	256
BIT10	DW	512
BIT11	DW	1024
BIT12	DW	2048
BITSM	DW	CFP_M
BTFNC	DW	SVFNC
BTKNM	DW	SVKNM
BTLBL	DW	SVLBL
BTFFC	DW	SVFFC
BTCKW	DW	SVCKW
BTKWV	DW	SVKWV
BTPRD	DW	SVPRD
BTPRE	DW	SVPRE
BTVAL	DW	SVVAL
CCNMS	LABEL	WORD
	DB	'CASE'
	DB	'DOUB'
	DB	'COMP'
	DB	'DUMP'
	DB	'COPY'
	DB	'EJEC'
	DB	'ERRO'
	DB	'EXEC'
	DB	'FAIL'
	DB	'INCL'
	DB	'LINE'
	DB	'LIST'
	DB	'NOER'
	DB	'NOEX'
	DB	'NOFA'
	DB	'NOLI'
	DB	'NOOP'
	DB	'NOPR'
	DB	'OPTI'
	DB	'PRIN'
	DB	'SING'
	DB	'SPAC'
	DB	'STIT'
	DB	'TITL'
	DB	'TRAC'
DMHDK	DW	B_SCL
	DW	22
	DB	'Dump of Keyword Values'
DMHDV	DW	B_SCL
	DW	25
	DB	'Dump of Natural Variables',0
ENCM1	DW	B_SCL
	DW	19
	DB	'Memory used (words)',0
ENCM2	DW	B_SCL
	DW	19
	DB	'Memory left (words)',0
ENCM3	DW	B_SCL
	DW	11
	DB	'Comp errors',0
ENCM4	DW	B_SCL
	DW	20
	DB	'Comp time (millisec)'
ENCM5	DW	B_SCL
	DW	20
	DB	'Execution suppressed'
ENDAB	DW	B_SCL
	DW	12
	DB	'Abnormal End'
ENDMO	DW	B_SCL
ENDML	DW	15
	DB	'Memory Overflow',0
ENDMS	DW	B_SCL
	DW	10
	DB	'Normal end'
ENDSO	DW	B_SCL
	DW	36
	DB	'Stack overflow in garbage collection'
ENDTU	DW	B_SCL
	DW	15
	DB	'Error - Time Up',0
ERMMS	DW	B_SCL
	DW	5
	DB	'Error',0
ERMNS	DW	B_SCL
	DW	4
	DB	' -- '
LSTMS	DW	B_SCL
	DW	5
	DB	'Page ',0
HEADR	DW	B_SCL
	DW	25
	DB	'Macro SPITBOL Version 3.7',0
HEADV	DW	B_SCL
	DW	3
	DB	'3.7',0
INT_R	DW	B_ICL
INTV0	DD	+0
INTON	DW	B_ICL
INTV1	DD	+1
INTTW	DW	B_ICL
INTV2	DD	+2
INTVT	DD	+10
INTVH	DD	+100
INTTH	DD	+1000
INTAB	DW	INT_R
	DW	INTON
	DW	INTTW
NDABB	DW	P_ABB
NDABD	DW	P_ABD
NDARC	DW	P_ARC
NDEXB	DW	P_EXB
NDFNB	DW	P_FNB
NDFND	DW	P_FND
NDEXC	DW	P_EXC
NDIMB	DW	P_IMB
NDIMD	DW	P_IMD
NDNTH	DW	P_NTH
NDPAB	DW	P_PAB
NDPAD	DW	P_PAD
NDUNA	DW	P_UNA
NDABO	DW	P_ABO
	DW	NDNTH
NDARB	DW	P_ARB
	DW	NDNTH
NDBAL	DW	P_BAL
	DW	NDNTH
NDFAL	DW	P_FAL
	DW	NDNTH
NDFEN	DW	P_FEN
	DW	NDNTH
NDREM	DW	P_REM
	DW	NDNTH
NDSUC	DW	P_SUC
	DW	NDNTH
NULLS	DW	B_SCL
	DW	0
NULLW	LABEL	WORD
	DB	'          '
LCASE	DW	B_SCL
	DW	26
	DB	'abcdefghijklmnopqrstuvwxyz'
UCASE	DW	B_SCL
	DW	26
	DB	'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
OPDVC	DW	O_CNC
	DW	C_CNC
	DW	LLCNC
	DW	RRCNC
OPDVP	DW	O_CNC
	DW	C_CNP
	DW	LLCNC
	DW	RRCNC
OPDVS	DW	O_ASS
	DW	C_ASS
	DW	LLASS
	DW	RRASS
	DW	6
	DW	C_UUO
	DW	LLUNO
	DW	O_PMV
	DW	C_PMT
	DW	LLPMT
	DW	RRPMT
	DW	O_INT
	DW	C_UVL
	DW	LLUNO
	DW	1
	DW	C_UBO
	DW	LLAMP
	DW	RRAMP
	DW	O_KWV
	DW	C_KEY
	DW	LLUNO
	DW	O_ALT
	DW	C_ALT
	DW	LLALT
	DW	RRALT
	DW	5
	DW	C_UUO
	DW	LLUNO
	DW	0
	DW	C_UBO
	DW	LLATS
	DW	RRATS
	DW	O_CAS
	DW	C_UNM
	DW	LLUNO
	DW	2
	DW	C_UBO
	DW	LLNUM
	DW	RRNUM
	DW	7
	DW	C_UUO
	DW	LLUNO
	DW	O_DVD
	DW	C_BVL
	DW	LLDVD
	DW	RRDVD
	DW	9
	DW	C_UUO
	DW	LLUNO
	DW	O_MLT
	DW	C_BVL
	DW	LLMLT
	DW	RRMLT
	DW	0
	DW	C_DEF
	DW	LLUNO
	DW	3
	DW	C_UBO
	DW	LLPCT
	DW	RRPCT
	DW	8
	DW	C_UUO
	DW	LLUNO
	DW	O_EXP
	DW	C_BVL
	DW	LLEXP
	DW	RREXP
	DW	10
	DW	C_UUO
	DW	LLUNO
	DW	O_IMA
	DW	C_BVN
	DW	LLDLD
	DW	RRDLD
	DW	O_INV
	DW	C_IND
	DW	LLUNO
	DW	4
	DW	C_UBO
	DW	LLNOT
	DW	RRNOT
	DW	0
	DW	C_NEG
	DW	LLUNO
	DW	O_SUB
	DW	C_BVL
	DW	LLPLM
	DW	RRPLM
	DW	O_COM
	DW	C_UVL
	DW	LLUNO
	DW	O_ADD
	DW	C_BVL
	DW	LLPLM
	DW	RRPLM
	DW	O_AFF
	DW	C_UVL
	DW	LLUNO
	DW	O_PAS
	DW	C_BVN
	DW	LLDLD
	DW	RRDLD
	DW	O_NAM
	DW	C_UNM
	DW	LLUNO
OPDVD	DW	O_GOD
	DW	C_UVL
	DW	LLUNO
OPDVN	DW	O_GOC
	DW	C_UNM
	DW	LLUNO
OAMN_	DW	O_AMN
OAMV_	DW	O_AMV
OAON_	DW	O_AON
OAOV_	DW	O_AOV
OCER_	DW	O_CER
OFEX_	DW	O_FEX
OFIF_	DW	O_FIF
OFNC_	DW	O_FNC
OFNE_	DW	O_FNE
OFNS_	DW	O_FNS
OGOF_	DW	O_GOF
OINN_	DW	O_INN
OKWN_	DW	O_KWN
OLEX_	DW	O_LEX
OLPT_	DW	O_LPT
OLVN_	DW	O_LVN
ONTA_	DW	O_NTA
ONTB_	DW	O_NTB
ONTC_	DW	O_NTC
OPMN_	DW	O_PMN
OPMS_	DW	O_PMS
OPOP_	DW	O_POP
ORNM_	DW	O_RNM
ORPL_	DW	O_RPL
ORVL_	DW	O_RVL
OSLA_	DW	O_SLA
OSLB_	DW	O_SLB
OSLC_	DW	O_SLC
OSLD_	DW	O_SLD
OSTP_	DW	O_STP
OUNF_	DW	O_UNF
OPSNB	DW	CH_AT
	DW	CH_AM
	DW	CH_NM
	DW	CH_PC
	DW	CH_NT
OPNSU	DW	CH_BR
	DW	CH_EQ
	DW	CH_NM
	DW	CH_PC
	DW	CH_SL
	DW	CH_EX
PFI2A	DW	PF_I2
PFMS1	DW	B_SCL
	DW	15
	DB	'Program Profile',0
PFMS2	DW	B_SCL
	DW	42
	DB	'STMT    Number Of     -- Execution Time --'
PFMS3	DW	B_SCL
	DW	47
	DB	'Number  Executions  Total(MSec) per Excn(MCSec)',0
REAV0	DQ	0.0
REAV1	DQ	1.0
REAVT	DQ	1.0E+1
	DQ	1.0E+2
	DQ	1.0E+3
	DQ	1.0E+4
	DQ	1.0E+5
	DQ	1.0E+6
	DQ	1.0E+7
	DQ	1.0E+8
	DQ	1.0E+9
REATT	DQ	1.0E+10
SCARR	DW	B_SCL
	DW	5
	DB	'ARRAY',0
SCCOD	DW	B_SCL
	DW	4
	DB	'CODE'
SCEXP	DW	B_SCL
	DW	10
	DB	'EXPRESSION'
SCEXT	DW	B_SCL
	DW	8
	DB	'EXTERNAL'
SCINT	DW	B_SCL
	DW	7
	DB	'INTEGER',0
SCNAM	DW	B_SCL
	DW	4
	DB	'NAME'
SCNUM	DW	B_SCL
	DW	7
	DB	'NUMERIC',0
SCPAT	DW	B_SCL
	DW	7
	DB	'PATTERN',0
SCREA	DW	B_SCL
	DW	4
	DB	'REAL'
SCSTR	DW	B_SCL
	DW	6
	DB	'STRING'
SCTAB	DW	B_SCL
	DW	5
	DB	'TABLE',0
SCFIL	DW	B_SCL
	DW	4
	DB	'FILE'
SCFRT	DW	B_SCL
	DW	7
	DB	'FRETURN',0
SCNRT	DW	B_SCL
	DW	7
	DB	'NRETURN',0
SCRTN	DW	B_SCL
	DW	6
	DB	'RETURN'
SCNMT	DW	SCARR
	DW	SCCOD
	DW	SCEXP
	DW	SCINT
	DW	SCNAM
	DW	SCPAT
	DW	SCPAT
	DW	SCPAT
	DW	SCREA
	DW	SCSTR
	DW	SCEXP
	DW	SCTAB
	DW	SCARR
	DW	SCEXT
	DW	SCEXT
	DW	NULLS
SCRE0	DW	B_SCL
	DW	2
	DB	'0.'
STLIM	DD	+2147483647
STNDF	DW	O_FUN
	DW	0
STNDL	DW	L_UND
STNDO	DW	O_OUN
	DW	0
STNVR	DW	B_VRL
	DW	B_VRS
	DW	NULLS
	DW	B_VRG
	DW	STNDL
	DW	STNDF
	DW	0
STPM1	DW	B_SCL
	DW	12
	DB	'In statement'
STPM2	DW	B_SCL
	DW	14
	DB	'Stmts executed'
STPM3	DW	B_SCL
	DW	19
	DB	'Run time (millisec)',0
STPM4	DW	B_SCL
	DW	12
	DB	'MCSec / Stmt'
STPM5	DW	B_SCL
	DW	13
	DB	'Regenerations',0
STPM6	DW	B_SCL
	DW	7
	DB	'In line',0
STPM7	DW	B_SCL
	DW	7
	DB	'In file',0
STRTU	LABEL	WORD
	DB	'TU'
SVCTB	DW	SCSTR
	DW	SCINT
	DW	SCNAM
	DW	SCPAT
	DW	SCARR
	DW	SCTAB
	DW	SCEXP
	DW	SCCOD
	DW	SCNUM
	DW	SCREA
	DW	0
TMASB	DW	B_SCL
	DW	13
	DB	'************ ',0
TMBEB	DW	B_SCL
	DW	3
	DB	' = ',0
TRBEV	DW	B_TRT
TRBKV	DW	B_TRT
TRXDR	DW	O_TXR
TRXDC	DW	TRXDR
V_EQF	DW	SVFPR
	DW	2
	DB	'EQ'
	DW	S_EQF
	DW	2
V_GEF	DW	SVFPR
	DW	2
	DB	'GE'
	DW	S_GEF
	DW	2
V_GTF	DW	SVFPR
	DW	2
	DB	'GT'
	DW	S_GTF
	DW	2
V_LEF	DW	SVFPR
	DW	2
	DB	'LE'
	DW	S_LEF
	DW	2
V_LNF	DW	SVFNP
	DW	2
	DB	'LN'
	DW	S_LNF
	DW	1
V_LTF	DW	SVFPR
	DW	2
	DB	'LT'
	DW	S_LTF
	DW	2
V_NEF	DW	SVFPR
	DW	2
	DB	'NE'
	DW	S_NEF
	DW	2
V_ANY	DW	SVFNP
	DW	3
	DB	'ANY',0
	DW	S_ANY
	DW	1
V_ARB	DW	SVKVC
	DW	3
	DB	'ARB',0
	DW	K_ARB
	DW	NDARB
V_ARG	DW	SVFNN
	DW	3
	DB	'ARG',0
	DW	S_ARG
	DW	2
V_BAL	DW	SVKVC
	DW	3
	DB	'BAL',0
	DW	K_BAL
	DW	NDBAL
V_COS	DW	SVFNP
	DW	3
	DB	'COS',0
	DW	S_COS
	DW	1
V_END	DW	SVLBL
	DW	3
	DB	'END',0
	DW	L_END
V_EXP	DW	SVFNP
	DW	3
	DB	'EXP',0
	DW	S_EXP
	DW	1
V_LEN	DW	SVFNP
	DW	3
	DB	'LEN',0
	DW	S_LEN
	DW	1
V_LEQ	DW	SVFPR
	DW	3
	DB	'LEQ',0
	DW	S_LEQ
	DW	2
V_LGE	DW	SVFPR
	DW	3
	DB	'LGE',0
	DW	S_LGE
	DW	2
V_LGT	DW	SVFPR
	DW	3
	DB	'LGT',0
	DW	S_LGT
	DW	2
V_LLE	DW	SVFPR
	DW	3
	DB	'LLE',0
	DW	S_LLE
	DW	2
V_LLT	DW	SVFPR
	DW	3
	DB	'LLT',0
	DW	S_LLT
	DW	2
V_LNE	DW	SVFPR
	DW	3
	DB	'LNE',0
	DW	S_LNE
	DW	2
V_POS	DW	SVFNP
	DW	3
	DB	'POS',0
	DW	S_POS
	DW	1
V_REM	DW	SVKVC
	DW	3
	DB	'REM',0
	DW	K_REM
	DW	NDREM
V_SET	DW	SVFNN
	DW	3
	DB	'SET',0
	DW	S_SET
	DW	3
V_SIN	DW	SVFNP
	DW	3
	DB	'SIN',0
	DW	S_SIN
	DW	1
V_TAB	DW	SVFNP
	DW	3
	DB	'TAB',0
	DW	S_TAB
	DW	1
V_TAN	DW	SVFNP
	DW	3
	DB	'TAN',0
	DW	S_TAN
	DW	1
V_ATN	DW	SVFNP
	DW	4
	DB	'ATAN'
	DW	S_ATN
	DW	1
V_CAS	DW	SVKNM
	DW	4
	DB	'CASE'
	DW	K_CAS
V_CHR	DW	SVFNP
	DW	4
	DB	'CHAR'
	DW	S_CHR
	DW	1
V_CHP	DW	SVFNP
	DW	4
	DB	'CHOP'
	DW	S_CHP
	DW	1
V_COD	DW	SVFNK
	DW	4
	DB	'CODE'
	DW	K_COD
	DW	S_COD
	DW	1
V_COP	DW	SVFNN
	DW	4
	DB	'COPY'
	DW	S_COP
	DW	1
V_DAT	DW	SVFNN
	DW	4
	DB	'DATA'
	DW	S_DAT
	DW	1
V_DTE	DW	SVFNN
	DW	4
	DB	'DATE'
	DW	S_DTE
	DW	1
V_DMP	DW	SVFNK
	DW	4
	DB	'DUMP'
	DW	K_DMP
	DW	S_DMP
	DW	1
V_DUP	DW	SVFNN
	DW	4
	DB	'DUPL'
	DW	S_DUP
	DW	2
V_EVL	DW	SVFNN
	DW	4
	DB	'EVAL'
	DW	S_EVL
	DW	1
V_EXT	DW	SVFNN
	DW	4
	DB	'EXIT'
	DW	S_EXT
	DW	2
V_FAL	DW	SVKVC
	DW	4
	DB	'FAIL'
	DW	K_FAL
	DW	NDFAL
V_FIL	DW	SVKNM
	DW	4
	DB	'FILE'
	DW	K_FIL
V_HST	DW	SVFNN
	DW	4
	DB	'HOST'
	DW	S_HST
	DW	5
V_ITM	DW	SVFNF
	DW	4
	DB	'ITEM'
	DW	S_ITM
	DW	999
V_LIN	DW	SVKNM
	DW	4
	DB	'LINE'
	DW	K_LIN
V_LOD	DW	SVFNN
	DW	4
	DB	'LOAD'
	DW	S_LOD
	DW	2
V_LPD	DW	SVFNP
	DW	4
	DB	'LPAD'
	DW	S_LPD
	DW	3
V_RPD	DW	SVFNP
	DW	4
	DB	'RPAD'
	DW	S_RPD
	DW	3
V_RPS	DW	SVFNP
	DW	4
	DB	'RPOS'
	DW	S_RPS
	DW	1
V_RTB	DW	SVFNP
	DW	4
	DB	'RTAB'
	DW	S_RTB
	DW	1
V_SI_	DW	SVFNP
	DW	4
	DB	'SIZE'
	DW	S_SI_
	DW	1
V_SRT	DW	SVFNN
	DW	4
	DB	'SORT'
	DW	S_SRT
	DW	2
V_SPN	DW	SVFNP
	DW	4
	DB	'SPAN'
	DW	S_SPN
	DW	1
V_SQR	DW	SVFNP
	DW	4
	DB	'SQRT'
	DW	S_SQR
	DW	1
V_STN	DW	SVKNM
	DW	4
	DB	'STNO'
	DW	K_STN
V_TIM	DW	SVFNN
	DW	4
	DB	'TIME'
	DW	S_TIM
	DW	0
V_TRM	DW	SVFNK
	DW	4
	DB	'TRIM'
	DW	K_TRM
	DW	S_TRM
	DW	1
V_ABE	DW	SVKNM
	DW	5
	DB	'ABEND',0
	DW	K_ABE
V_ABO	DW	SVKVL
	DW	5
	DB	'ABORT',0
	DW	K_ABO
	DW	L_ABO
	DW	NDABO
V_APP	DW	SVFNF
	DW	5
	DB	'APPLY',0
	DW	S_APP
	DW	999
V_ABN	DW	SVFNP
	DW	5
	DB	'ARBNO',0
	DW	S_ABN
	DW	1
V_ARR	DW	SVFNN
	DW	5
	DB	'ARRAY',0
	DW	S_ARR
	DW	2
V_BRK	DW	SVFNP
	DW	5
	DB	'BREAK',0
	DW	S_BRK
	DW	1
V_CLR	DW	SVFNN
	DW	5
	DB	'CLEAR',0
	DW	S_CLR
	DW	1
V_EJC	DW	SVFNN
	DW	5
	DB	'EJECT',0
	DW	S_EJC
	DW	1
V_FEN	DW	SVFPK
	DW	5
	DB	'FENCE',0
	DW	K_FEN
	DW	S_FNC
	DW	1
	DW	NDFEN
V_FLD	DW	SVFNN
	DW	5
	DB	'FIELD',0
	DW	S_FLD
	DW	2
V_IDN	DW	SVFPR
	DW	5
	DB	'IDENT',0
	DW	S_IDN
	DW	2
V_INP	DW	SVFNK
	DW	5
	DB	'INPUT',0
	DW	K_INP
	DW	S_INP
	DW	3
V_LCS	DW	SVKWC
	DW	5
	DB	'LCASE',0
	DW	K_LCS
V_LOC	DW	SVFNN
	DW	5
	DB	'LOCAL',0
	DW	S_LOC
	DW	2
V_OPS	DW	SVFNN
	DW	5
	DB	'OPSYN',0
	DW	S_OPS
	DW	3
V_RMD	DW	SVFNP
	DW	5
	DB	'REMDR',0
	DW	S_RMD
	DW	2
V_RSR	DW	SVFNN
	DW	5
	DB	'RSORT',0
	DW	S_RSR
	DW	2
V_TBL	DW	SVFNN
	DW	5
	DB	'TABLE',0
	DW	S_TBL
	DW	3
V_TRA	DW	SVFNK
	DW	5
	DB	'TRACE',0
	DW	K_TRA
	DW	S_TRA
	DW	4
V_UCS	DW	SVKWC
	DW	5
	DB	'UCASE',0
	DW	K_UCS
V_ANC	DW	SVKNM
	DW	6
	DB	'ANCHOR'
	DW	K_ANC
V_BKX	DW	SVFNP
	DW	6
	DB	'BREAKX'
	DW	S_BKX
	DW	1
V_DEF	DW	SVFNN
	DW	6
	DB	'DEFINE'
	DW	S_DEF
	DW	2
V_DET	DW	SVFNN
	DW	6
	DB	'DETACH'
	DW	S_DET
	DW	1
V_DIF	DW	SVFPR
	DW	6
	DB	'DIFFER'
	DW	S_DIF
	DW	2
V_FTR	DW	SVKNM
	DW	6
	DB	'FTRACE'
	DW	K_FTR
V_LST	DW	SVKNM
	DW	6
	DB	'LASTNO'
	DW	K_LST
V_NAY	DW	SVFNP
	DW	6
	DB	'NOTANY'
	DW	S_NAY
	DW	1
V_OUP	DW	SVFNK
	DW	6
	DB	'OUTPUT'
	DW	K_OUP
	DW	S_OUP
	DW	3
V_RET	DW	SVLBL
	DW	6
	DB	'RETURN'
	DW	L_RTN
V_REW	DW	SVFNN
	DW	6
	DB	'REWIND'
	DW	S_REW
	DW	1
V_STT	DW	SVFNN
	DW	6
	DB	'STOPTR'
	DW	S_STT
	DW	2
V_SUB	DW	SVFNN
	DW	6
	DB	'SUBSTR'
	DW	S_SUB
	DW	3
V_UNL	DW	SVFNN
	DW	6
	DB	'UNLOAD'
	DW	S_UNL
	DW	1
V_COL	DW	SVFNN
	DW	7
	DB	'COLLECT',0
	DW	S_COL
	DW	1
V_COM	DW	SVKNM
	DW	7
	DB	'COMPARE',0
	DW	K_COM
V_CNV	DW	SVFNN
	DW	7
	DB	'CONVERT',0
	DW	S_CNV
	DW	2
V_ENF	DW	SVFNN
	DW	7
	DB	'ENDFILE',0
	DW	S_ENF
	DW	1
V_ETX	DW	SVKNM
	DW	7
	DB	'ERRTEXT',0
	DW	K_ETX
V_ERT	DW	SVKNM
	DW	7
	DB	'ERRTYPE',0
	DW	K_ERT
V_FRT	DW	SVLBL
	DW	7
	DB	'FRETURN',0
	DW	L_FRT
V_INT	DW	SVFPR
	DW	7
	DB	'INTEGER',0
	DW	S_INT
	DW	1
V_NRT	DW	SVLBL
	DW	7
	DB	'NRETURN',0
	DW	L_NRT
V_PFL	DW	SVKNM
	DW	7
	DB	'PROFILE',0
	DW	K_PFL
V_RPL	DW	SVFNP
	DW	7
	DB	'REPLACE',0
	DW	S_RPL
	DW	3
V_RVS	DW	SVFNP
	DW	7
	DB	'REVERSE',0
	DW	S_RVS
	DW	1
V_RTN	DW	SVKNM
	DW	7
	DB	'RTNTYPE',0
	DW	K_RTN
V_STX	DW	SVFNN
	DW	7
	DB	'SETEXIT',0
	DW	S_STX
	DW	1
V_STC	DW	SVKNM
	DW	7
	DB	'STCOUNT',0
	DW	K_STC
V_STL	DW	SVKNM
	DW	7
	DB	'STLIMIT',0
	DW	K_STL
V_SUC	DW	SVKVC
	DW	7
	DB	'SUCCEED',0
	DW	K_SUC
	DW	NDSUC
V_ALP	DW	SVKWC
	DW	8
	DB	'ALPHABET'
	DW	K_ALP
V_CNT	DW	SVLBL
	DW	8
	DB	'CONTINUE'
	DW	L_CNT
V_DTP	DW	SVFNP
	DW	8
	DB	'DATATYPE'
	DW	S_DTP
	DW	1
V_ERL	DW	SVKNM
	DW	8
	DB	'ERRLIMIT'
	DW	K_ERL
V_FNC	DW	SVKNM
	DW	8
	DB	'FNCLEVEL'
	DW	K_FNC
V_FLS	DW	SVKNM
	DW	8
	DB	'FULLSCAN'
	DW	K_FLS
V_LFL	DW	SVKNM
	DW	8
	DB	'LASTFILE'
	DW	K_LFL
V_LLN	DW	SVKNM
	DW	8
	DB	'LASTLINE'
	DW	K_LLN
V_MXL	DW	SVKNM
	DW	8
	DB	'MAXLNGTH'
	DW	K_MXL
V_TER	DW	0
	DW	8
	DB	'TERMINAL'
	DW	0
V_BSP	DW	SVFNN
	DW	9
	DB	'BACKSPACE',0
	DW	S_BSP
	DW	1
V_PRO	DW	SVFNN
	DW	9
	DB	'PROTOTYPE',0
	DW	S_PRO
	DW	1
V_SCN	DW	SVLBL
	DW	9
	DB	'SCONTINUE',0
	DW	L_SCN
	DW	0
	DW	10
VDMKW	DW	V_ANC
	DW	V_CAS
	DW	V_COD
	DW	1
	DW	V_DMP
	DW	V_ERL
	DW	V_ETX
	DW	V_ERT
	DW	V_FIL
	DW	V_FNC
	DW	V_FTR
	DW	V_FLS
	DW	V_INP
	DW	V_LFL
	DW	V_LLN
	DW	V_LST
	DW	V_LIN
	DW	V_MXL
	DW	V_OUP
	DW	V_PFL
	DW	V_RTN
	DW	V_STC
	DW	V_STL
	DW	V_STN
	DW	V_TRA
	DW	V_TRM
	DW	0
VSRCH	DW	0
	DW	V_EQF
	DW	V_EQF
	DW	V_ANY
	DW	V_ATN
	DW	V_ABE
	DW	V_ANC
	DW	V_COL
	DW	V_ALP
	DW	V_BSP
C_YYY	DW	0
	SUBTTL	S P I T B O L -- WORKING STORAGE SECTION
	MinData_EndS@
	MinData_Seg@
	PUBLIC	SEC04
SEC04	LABEL	WORD
CMLAB	DW	B_SCL
	DW	2
	DB	'  '
W_AAA	DW	0
ACTRM	DW	0
ALDYN	DW	0
ALLIA	DD	+0
ALLSV	DW	0
ALSTA	DW	0
ARCDM	DW	0
ARNEL	DD	+0
ARPTR	DW	0
ARSVL	DD	+0
ARFSI	DD	+0
ARFXS	DW	0
BEFOF	DW	0
BPFPF	DW	0
BPFSV	DW	0
BPFXT	DW	0
CLSVI	DD	+0
CNSCC	DW	0
CNSWC	DW	0
CNR_T	DW	0
CNVTP	DW	0
DATDV	DW	0
DATXS	DW	0
DEFLB	DW	0
DEFNA	DW	0
DEFVR	DW	0
DEFXS	DW	0
DMARG	DW	0
DMPSA	DW	0
DMPSB	DW	0
DMPSV	DW	0
DMVCH	DW	0
DMPCH	DW	0
DMPKB	DW	0
DMPKT	DW	0
DMPKN	DW	0
DTCNB	DW	0
DTCNM	DW	0
DUPSI	DD	+0
ENFCH	DW	0
ERTWA	DW	0
ERTWB	DW	0
EVLIN	DW	0
EVLIS	DW	0
EVLIV	DW	0
EVLIO	DW	0
EVLIF	DW	0
EXPSV	DW	0
GBCFL	DW	0
GBCLM	DW	0
GBCNM	DW	0
GBCNS	DW	0
GBSVA	DW	0
GBSVB	DW	0
GBSVC	DW	0
GNVHE	DW	0
GNVNW	DW	0
GNVSA	DW	0
GNVSB	DW	0
GNVSP	DW	0
GNVST	DW	0
GTAWA	DW	0
GTINA	DW	0
GTINB	DW	0
GTNNF	DW	0
GTNSI	DD	+0
GTNDF	DW	0
GTNES	DW	0
GTNEX	DD	+0
GTNSC	DW	0
GTNSR	DQ	0.0
GTNRD	DW	0
GTPSB	DW	0
GTSSF	DW	0
GTSVC	DW	0
GTSVB	DW	0
GTVRC	DW	0
IOPTT	DW	0
LODFN	DW	0
LODNA	DW	0
PFSVW	DW	0
PRNSI	DD	+0
PRSNA	DW	0
PRSVA	DW	0
PRSVB	DW	0
PRSVC	DW	0
PRTSA	DW	0
PRTSB	DW	0
PRVSI	DW	0
PSAVE	DW	0
PSAVC	DW	0
RTNBP	DW	0
RTNFV	DW	0
RTNSV	DW	0
SBSSV	DW	0
SCNSA	DW	0
SCNSB	DW	0
SCNSC	DW	0
SCNOF	DW	0
SRTDF	DW	0
SRTFD	DW	0
SRTFF	DW	0
SRTFO	DW	0
SRTNR	DW	0
SRTOF	DW	0
SRTRT	DW	0
SRTS1	DW	0
SRTS2	DW	0
SRTSC	DW	0
SRTSF	DW	0
SRTSN	DW	0
SRTSO	DW	0
SRTSR	DW	0
SRTST	DW	0
SRTWC	DW	0
STPSI	DD	+0
STPTI	DD	+0
TFNSI	DD	+0
XSCRT	DW	0
XSCWB	DW	0
G_AAA	DW	0
ALFSF	DD	+0
CMERC	DW	0
CMPLN	DW	0
CMPXS	DW	0
CMPSN	DW	1
CNSIL	DW	0
CNIND	DW	0
CNSPT	DW	0
CNTTL	DW	0
CPSTS	DW	0
CSWDB	DW	0
CSWER	DW	0
CSWEX	DW	0
CSWFL	DW	1
CSWIN	DW	INILN
CSWLS	DW	1
CSWNO	DW	0
CSWPR	DW	0
CTMSK	DW	0
CURID	DW	0
CWCOF	DW	0
ERICH	DW	0
ERLST	DW	0
ERRFT	DW	0
ERRSP	DW	0
EXSTS	DW	0
FLPRT	DW	0
FLPTR	DW	0
GBCNT	DW	0
GTCEF	DW	0
GTSWK	DW	0
HEADP	DW	0
HSHNB	DD	+0
INITR	DW	0
KVABE	DW	0
KVANC	DW	0
KVCAS	DW	0
KVCOD	DW	0
KVCOM	DW	0
KVDMP	DW	0
KVERL	DW	0
KVERT	DW	0
KVFTR	DW	0
KVFLS	DW	1
KVINP	DW	1
KVMXL	DW	5000
KVOUP	DW	1
KVPFL	DW	0
KVTRA	DW	0
KVTRM	DW	0
KVFNC	DW	0
KVLST	DW	0
KVLLN	DW	0
KVLIN	DW	0
KVSTN	DW	0
KVALP	DW	0
KVRTN	DW	NULLS
KVSTL	DD	+2147483647
KVSTC	DD	+2147483647
LSTID	DW	0
LSTLC	DW	0
LSTNP	DW	0
LSTPF	DW	1
LSTPG	DW	0
LSTPO	DW	0
LSTSN	DW	0
MXLEN	DW	0
NOXEQ	DW	0
PFDMP	DW	0
PFFNC	DW	0
PFSTM	DD	+0
PFETM	DD	+0
PFNTE	DW	0
PFSTE	DD	+0
PMDFL	DW	0
PMHBS	DW	0
PMSSL	DW	0
POLCS	DW	1
POLCT	DW	1
PRICH	DW	0
PRSTD	DW	0
PRSTO	DW	0
PRBUF	DW	0
PRECL	DW	0
PRLEN	DW	0
PRLNW	DW	0
PROFS	DW	0
PRTEF	DW	0
RDCLN	DW	0
RDNLN	DW	0
RSMEM	DW	0
STMCS	DW	1
STMCT	DW	1
A_AAA	DW	0
CMPSS	DW	0
DNAMB	DW	0
DNAMP	DW	0
DNAME	DW	0
HSHTB	DW	0
HSHTE	DW	0
INISS	DW	0
PFTBL	DW	0
PRNMV	DW	0
STATB	DW	0
STATE	DW	0
STXVR	DW	NULLS
R_AAA	DW	0
R_ARF	DW	0
R_CCB	DW	0
R_CIM	DW	0
R_CMP	DW	0
R_CNI	DW	0
R_CNT	DW	0
R_COD	DW	0
R_CTP	DW	0
R_CTS	DW	0
R_ERT	DW	0
R_ETX	DW	NULLS
R_EXS	DW	0
R_FCB	DW	0
R_FNC	DW	0
R_GTC	DW	0
R_ICI	DW	0
R_IFA	DW	0
R_IFL	DW	0
R_IFN	DW	0
R_INC	DW	0
R_IO1	DW	0
R_IO2	DW	0
R_IOF	DW	0
R_ION	DW	0
R_IOP	DW	0
R_IOT	DW	0
R_PMS	DW	0
R_RA2	DW	0
R_RA3	DW	0
R_RPT	DW	0
R_SCP	DW	0
R_SFC	DW	NULLS
R_SFN	DW	0
R_SXL	DW	0
R_SXR	DW	0
R_STC	DW	0
R_STL	DW	0
R_SXC	DW	0
R_TTL	DW	NULLS
R_XSC	DW	0
R_UBA	DW	STNDO
R_UBM	DW	STNDO
R_UBN	DW	STNDO
R_UBP	DW	STNDO
R_UBT	DW	STNDO
R_UUB	DW	STNDO
R_UUE	DW	STNDO
R_UUN	DW	STNDO
R_UUP	DW	STNDO
R_UUS	DW	STNDO
R_UUX	DW	STNDO
R_YYY	DW	0
SCNBL	DW	0
SCNCC	DW	0
SCNGO	DW	0
SCNIL	DW	0
SCNPT	DW	0
SCNRS	DW	0
SCNSE	DW	0
SCNTP	DW	0
STAGE	DW	0
STBAS	DW	0
STXOC	DW	0
STXOF	DW	0
TIMSX	DD	+0
TIMUP	DW	0
XSOFS	DW	0
W_YYY	DW	0
	SUBTTL	S P I T B O L -- MINIMAL CODE
	PUBLIC	REG_CP
REG_CP	DW	?
	PUBLIC	LOWSPMIN
LOWSPMIN	DW	?
PRC_	DW	19 DUP(0)
	EXTRN	REG_IA:DWORD
	PUBLIC	END_MIN_DATA
END_MIN_DATA	LABEL	BYTE
	MinData_EndS@
MINCODE	SEGMENT	WORD PUBLIC 'CODE'
	ASSUME	CS:MINCODE,DS:MINDATA
	PUBLIC	SEC05
SEC05	LABEL	NEAR
	EVEN
	NOP
	DW	BL__I
S_AAA:
	SUBTTL	S P I T B O L -- INITIALIZATION
START:
	PUBLIC	START
	MOV	SP,CX
	EVEN
	CALL	SYSTM
	MOV	WORD PTR TIMSX+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR TIMSX,AX
	MOV	STATB,DI
	MOV	RSMEM,2*E_SRS
	MOV	STBAS,SP
	MOV	DX,WORD PTR INTVH+2
	MOV	AX,WORD PTR INTVH
	MOV	WORD PTR REG_IA,AX
	MOV	BP,OFFSET MINDATA:ALFSP
	CALL	DVI_
	MOV	WORD PTR ALFSF+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR ALFSF,AX
	XOR	DX,DX
	EVEN
	CALL	PRPAR
	SUB	SI,2*E_SRS
	MOV	CX,PRLEN
	ADD	CX,CFP_A
	ADD	CX,NSTMX
	ADD	CX,1+2*8
	AND	CX,-2
	MOV	DI,STATB
	ADD	DI,CX
	ADD	DI,2*E_HNB
	ADD	DI,2*E_STS
	EVEN
	CALL	SYSMX
	MOV	KVMXL,CX
	MOV	MXLEN,CX
	CMP	DI,CX
	JA	SHORT INI06	; (Jump shortened)
	ADD	CX,1+2*1
	AND	CX,-2
	MOV	DI,CX
INI06:	MOV	DNAMB,DI
	MOV	DNAMP,DI
	OR	CX,CX
	JNZ	SHORT INI07	; (Jump shortened)
	DEC	DI
	DEC	DI
	MOV	KVMXL,DI
	MOV	MXLEN,DI
INI07:	MOV	DNAME,SI
	CMP	DNAMB,SI
	JB	SHORT INI09	; (Jump shortened)
	EVEN
	CALL	SYSMM
	SAL	DI,1
	ADD	SI,DI
	OR	DI,DI
	JNZ	INI07
	MOV	CX,MXERN
	XOR	BX,BX
	XOR	DX,DX
	MOV	DI,STGIC
	MOV	SI,OFFSET MINDATA:NULLS
	EVEN
	CALL	SYSEA
	DW	INI08
	JMP	SHORT INI08	; (Jump shortened)
	CALL	ERR_1
	DB	73
INI08:	MOV	DI,OFFSET MINDATA:ENDMO
	MOV	CX,ENDML
	EVEN
	CALL	SYSPR
	DW	ERR_-299
	XOR	SI,SI
	MOV	BX,NUM10
	EVEN
	CALL	SYSEJ
INI09:	MOV	DI,STATB
	EVEN
	CALL	INSTA
	MOV	CX,E_HNB
	MOV	WORD PTR REG_IA,CX
	XOR	DX,DX
	MOV	WORD PTR HSHNB+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR HSHNB,AX
	MOV	HSHTB,DI
INI11:	XOR	AX,AX
	STOSW
	LOOP	INI11
	MOV	HSHTE,DI
	MOV	STATE,DI
	MOV	DX,NUM01
	MOV	SI,OFFSET MINDATA:NULLS
	MOV	R_SFC,SI
	EVEN
	CALL	TMAKE
	MOV	R_SFN,DI
	MOV	DX,NUM01
	MOV	SI,OFFSET MINDATA:NULLS
	EVEN
	CALL	TMAKE
	MOV	R_INC,DI
	MOV	CX,CCINM
	MOV	SI,OFFSET MINDATA:NULLS
	EVEN
	CALL	VMAKE
	DW	ERR_-299
	MOV	R_IFA,DI
	MOV	CX,CCINM
	MOV	SI,OFFSET MINDATA:INTON
	EVEN
	CALL	VMAKE
	DW	ERR_-299
	MOV	R_IFL,DI
	MOV	SI,OFFSET MINDATA:V_INP
	MOV	BX,TRTIN
	EVEN
	CALL	INOUT
	MOV	SI,OFFSET MINDATA:V_OUP
	MOV	BX,TRTOU
	EVEN
	CALL	INOUT
	MOV	DX,INITR
	OR	DX,DX
	JZ	SHORT INI13	; (Jump shortened)
	EVEN
	CALL	PRPAR
INI13:
	EVEN
	CALL	SYSDC
	MOV	FLPTR,SP
	EVEN
	CALL	CMPIL
	MOV	R_COD,DI
	MOV	R_TTL,OFFSET MINDATA:NULLS
	MOV	R_STL,OFFSET MINDATA:NULLS
	XOR	AX,AX
	MOV	R_CIM,AX
	XOR	AX,AX
	MOV	R_CCB,AX
	XOR	AX,AX
	MOV	CNIND,AX
	XOR	AX,AX
	MOV	LSTID,AX
	XOR	SI,SI
	XOR	BX,BX
	EVEN
	CALL	GBCOL
	CMP	CPSTS,0
	JNZ	SHORT INIX0	; (Jump shortened)
	EVEN
	CALL	PRTPG
	EVEN
	CALL	PRTMM
	MOV	AX,CMERC
	MOV	WORD PTR REG_IA,AX
	XOR	DX,DX
	MOV	DI,OFFSET MINDATA:ENCM3
	EVEN
	CALL	PRTMI
	MOV	AX,GBCNT
	MOV	WORD PTR REG_IA,AX
	XOR	DX,DX
	MOV	AX,WORD PTR INTV1
	SUB	WORD PTR REG_IA,AX
	SBB	DX,WORD PTR INTV1+2
	MOV	DI,OFFSET MINDATA:STPM5
	EVEN
	CALL	PRTMI
	EVEN
	CALL	SYSTM
	MOV	AX,WORD PTR TIMSX
	SUB	WORD PTR REG_IA,AX
	SBB	DX,WORD PTR TIMSX+2
	MOV	DI,OFFSET MINDATA:ENCM4
	EVEN
	CALL	PRTMI
	ADD	LSTLC,NUM05
	CMP	HEADP,0
	JZ	SHORT INIX0	; (Jump shortened)
	EVEN
	CALL	PRTPG
INIX0:	CMP	CSWIN,INILN
	JA	SHORT INIX1	; (Jump shortened)
	MOV	CSWIN,INILS
INIX1:
	EVEN
	CALL	SYSTM
	MOV	WORD PTR TIMSX+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR TIMSX,AX
	XOR	AX,AX
	MOV	GBCNT,AX
	EVEN
	CALL	SYSBX
	MOV	AX,CSWEX
	ADD	NOXEQ,AX
;	CMP	NOXEQ,0	(Optimized)
	JNZ	SHORT INIX2	; (Jump shortened)
INIY0:	MOV	HEADP,SP
	XOR	AX,AX
	PUSH	AX
	MOV	FLPTR,SP
	MOV	DI,R_COD
	MOV	STAGE,STGXT
	MOV	POLCS,NUM01
	MOV	POLCT,NUM01
	MOV	AX,CMPSN
	MOV	PFNTE,AX
	MOV	AX,KVPFL
	MOV	PFDMP,AX
	EVEN
	CALL	SYSTM
	MOV	WORD PTR PFSTM+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR PFSTM,AX
	EVEN
	CALL	STGCC
	JMP	WORD PTR [DI]
INIX2:	XOR	CX,CX
	MOV	BX,NINI9
	XOR	SI,SI
	EVEN
	CALL	SYSEJ
RSTRT:
	PUBLIC	RSTRT
	MOV	SP,STBAS
	XOR	SI,SI
	JMP	INIY0
	SUBTTL	S P I T B O L -- SNOBOL4 OPERATOR ROUTINES
	EVEN
	NOP
O_ADD:
	CALL	ARITH
	DW	ERR_-001
	DW	ERR_-002
	DW	OADD1
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+SI]
	ADD	WORD PTR REG_IA,AX
	ADC	DX,WORD PTR WORD PTR [2*ICVAL+SI]+2
	JNO	EXINT
	CALL	ERR_0
	DB	003
OADD1:	LEA	BP,WORD PTR [2*RCVAL+SI]
	CALL	ADR_
	CALL	OVR_
	JZ	EXREA
	CALL	ERR_1
	DB	5
	EVEN
	NOP
O_AFF:
	POP	DI
	EVEN
	CALL	GTNUM
	DW	ERR_-004
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
O_ALT:
	POP	DI
	EVEN
	CALL	GTPAT
	DW	ERR_-005
OALT1:	MOV	BX,OFFSET MINCODE:P_ALT
	EVEN
	CALL	PBILD
	MOV	SI,DI
	POP	DI
	EVEN
	CALL	GTPAT
	DW	ERR_-006
	CMP	DI,OFFSET MINCODE:P_ALT
	JE	SHORT OALT2	; (Jump shortened)
	MOV	WORD PTR [2*PTHEN+SI],DI
	PUSH	SI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
OALT2:	MOV	AX,WORD PTR [2*PARM1+DI]
	MOV	WORD PTR [2*PTHEN+SI],AX
	PUSH	WORD PTR [2*PTHEN+DI]
	MOV	DI,SI
	JMP	OALT1
	EVEN
	NOP
O_AMN:
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	MOV	BX,DI
	JMP	ARREF
	EVEN
	NOP
O_AMV:
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	XOR	BX,BX
	JMP	ARREF
	EVEN
	NOP
O_AON:
	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
;	 MOV  BP,SP	; (Redundant)
	MOV	SI,WORD PTR [2*1+BP]
	MOV	CX,WORD PTR [SI]
	CMP	CX,OFFSET MINCODE:B_VCT
	JE	SHORT OAON2	; (Jump shortened)
	CMP	CX,OFFSET MINCODE:B_TBT
	JE	SHORT OAON3	; (Jump shortened)
OAON1:	MOV	DI,NUM01
	MOV	BX,DI
	JMP	ARREF
OAON2:	CMP	WORD PTR [DI],OFFSET MINCODE:B_ICL
	JNE	OAON1
	MOV	DX,WORD PTR WORD PTR [2*ICVAL+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+DI]
	MOV	WORD PTR REG_IA,AX
	OR	DX,DX
	JNE	EXFAL
	MOV	CX,WORD PTR REG_IA
	OR	CX,CX
	JL	EXFAL
	OR	CX,CX
	JZ	EXFAL
	ADD	CX,VCVLB
	SAL	CX,1
	MOV	BP,SP
	MOV	WORD PTR [BP],CX
	CMP	CX,WORD PTR [2*VCLEN+SI]
	JB	SHORT OAON4	; (Jump shortened)
	JMP	EXFAL
OAON3:	MOV	BX,SP
	EVEN
	CALL	TFIND
	DW	EXFAL
	MOV	BP,SP
	MOV	WORD PTR [2*1+BP],SI
;	 MOV  BP,SP	; (Redundant)
	MOV	WORD PTR [BP],CX
OAON4:	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
O_AOV:
	POP	DI
	POP	SI
	MOV	CX,WORD PTR [SI]
	CMP	CX,OFFSET MINCODE:B_VCT
	JE	SHORT OAOV2	; (Jump shortened)
	CMP	CX,OFFSET MINCODE:B_TBT
	JE	SHORT OAOV3	; (Jump shortened)
OAOV1:	PUSH	SI
	PUSH	DI
	MOV	DI,NUM01
	XOR	BX,BX
	JMP	ARREF
OAOV2:	CMP	WORD PTR [DI],OFFSET MINCODE:B_ICL
	JNE	OAOV1
	MOV	DX,WORD PTR WORD PTR [2*ICVAL+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+DI]
	MOV	WORD PTR REG_IA,AX
	OR	DX,DX
	JNE	EXFAL
	MOV	CX,WORD PTR REG_IA
	OR	CX,CX
	JL	EXFAL
	OR	CX,CX
	JZ	EXFAL
	ADD	CX,VCVLB
	SAL	CX,1
	CMP	CX,WORD PTR [2*VCLEN+SI]
	JAE	EXFAL
	EVEN
	CALL	ACESS
	DW	EXFAL
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
OAOV3:	XOR	BX,BX
	EVEN
	CALL	TFIND
	DW	EXFAL
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
O_ASS:
OASS0:	POP	BX
	POP	CX
	MOV	BP,SP
	MOV	SI,WORD PTR [BP]
;	 MOV  BP,SP	; (Redundant)
	MOV	WORD PTR [BP],BX
	EVEN
	CALL	ASIGN
	DW	EXFAL
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
O_CER:
	CALL	ERR_0
	DB	007
	EVEN
	NOP
O_CAS:
	POP	DX
	POP	DI
	MOV	BX,OFFSET MINCODE:P_CAS
	EVEN
	CALL	PBILD
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
O_CNC:
	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
	CMP	DI,OFFSET MINDATA:NULLS
	JE	SHORT OCNC3	; (Jump shortened)
;	 MOV  BP,SP	; (Redundant)
	MOV	SI,WORD PTR [2*1+BP]
	CMP	SI,OFFSET MINDATA:NULLS
	JE	SHORT OCNC4	; (Jump shortened)
	MOV	CX,OFFSET MINCODE:B_SCL
	CMP	CX,WORD PTR [SI]
	JNE	SHORT OCNC2	; (Jump shortened)
	CMP	CX,WORD PTR [DI]
	JNE	SHORT OCNC2	; (Jump shortened)
OCNC1:	MOV	CX,WORD PTR [2*SCLEN+SI]
	ADD	CX,WORD PTR [2*SCLEN+DI]
	EVEN
	CALL	ALOCS
	MOV	BP,SP
	MOV	WORD PTR [2*1+BP],DI
	ADD	DI,CFP_F
	MOV	CX,WORD PTR [2*SCLEN+SI]
	ADD	SI,CFP_F
	SHR	CX,1
	REP	MOVSW
	ADC	CX,CX
	REP	MOVSB
	POP	SI
	MOV	CX,WORD PTR [2*SCLEN+SI]
	ADD	SI,CFP_F
	SHR	CX,1
	REP	MOVSW
	ADC	CX,CX
	REP	MOVSB
	XOR	SI,SI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
OCNC2:	CALL	GTSTG
	DW	OCNC5
	MOV	SI,DI
	CALL	GTSTG
	DW	OCNC6
	PUSH	DI
	PUSH	SI
	MOV	SI,DI
	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
	JMP	OCNC1
OCNC3:	POP	AX
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
OCNC4:	POP	AX
	MOV	BP,SP
	MOV	WORD PTR [BP],DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
OCNC5:	MOV	SI,DI
	POP	DI
OCNC6:
	EVEN
	CALL	GTPAT
	DW	ERR_-008
	PUSH	DI
	MOV	DI,SI
	EVEN
	CALL	GTPAT
	DW	ERR_-009
	MOV	SI,DI
	POP	DI
	EVEN
	CALL	PCONC
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
O_COM:
	POP	DI
	MOV	CX,WORD PTR [DI]
OCOM1:	CMP	CX,OFFSET MINCODE:B_ICL
	JE	SHORT OCOM2	; (Jump shortened)
	CMP	CX,OFFSET MINCODE:B_RCL
	JE	SHORT OCOM3	; (Jump shortened)
	EVEN
	CALL	GTNUM
	DW	ERR_-010
	JMP	OCOM1
OCOM2:	MOV	DX,WORD PTR WORD PTR [2*ICVAL+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+DI]
	MOV	WORD PTR REG_IA,AX
	NOT	DX
	NEG	WORD PTR REG_IA
	SBB	DX,-1
	JNO	EXINT
	CALL	ERR_0
	DB	011
OCOM3:	LEA	BP,WORD PTR [2*RCVAL+DI]
	CALL	LDR_
	CALL	NGR_
	JMP	EXREA
	EVEN
	NOP
O_DVD:
	CALL	ARITH
	DW	ERR_-012
	DW	ERR_-013
	DW	ODVD2
	LEA	BP,WORD PTR [2*ICVAL+SI]
	CALL	DVI_
	JNO	EXINT
	CALL	ERR_0
	DB	014
ODVD2:	LEA	BP,WORD PTR [2*RCVAL+SI]
	CALL	DVR_
	CALL	OVR_
	JZ	EXREA
	CALL	ERR_1
	DB	6
	EVEN
	NOP
O_EXP:
	POP	DI
	EVEN
	CALL	GTNUM
	DW	ERR_-015
	MOV	SI,DI
	POP	DI
	EVEN
	CALL	GTNUM
	DW	ERR_-016
	CMP	WORD PTR [SI],OFFSET MINCODE:B_RCL
	JE	OEXP7
	MOV	DX,WORD PTR WORD PTR [2*ICVAL+SI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+SI]
	MOV	WORD PTR REG_IA,AX
	OR	DX,DX
	JL	OEX12
	CMP	CX,OFFSET MINCODE:B_RCL
	JE	SHORT OEXP3	; (Jump shortened)
	OR	DX,DX
	JNE	SHORT OEXP2	; (Jump shortened)
	MOV	CX,WORD PTR REG_IA
	OR	CX,CX
	JL	SHORT OEXP2	; (Jump shortened)
	MOV	DX,WORD PTR WORD PTR [2*ICVAL+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+DI]
	MOV	WORD PTR REG_IA,AX
	OR	CX,CX
	JNZ	SHORT OEXP1	; (Jump shortened)
	MOV	AX,WORD PTR REG_IA
	OR	AX,DX
	JE	SHORT OEXP4	; (Jump shortened)
	MOV	DX,WORD PTR INTV1+2
	MOV	AX,WORD PTR INTV1
	MOV	WORD PTR REG_IA,AX
	JMP	EXINT
OEX13:	LEA	BP,WORD PTR [2*ICVAL+DI]
	CALL	MLI_
	JO	SHORT OEXP2	; (Jump shortened)
OEXP1:	LOOP	OEX13
	JMP	EXINT
OEXP2:	CALL	ERR_0
	DB	017
OEXP3:	OR	DX,DX
	JNE	SHORT OEXP6	; (Jump shortened)
	MOV	CX,WORD PTR REG_IA
	OR	CX,CX
	JL	SHORT OEXP6	; (Jump shortened)
	LEA	BP,WORD PTR [2*RCVAL+DI]
	CALL	LDR_
	OR	CX,CX
	JNZ	SHORT OEXP5	; (Jump shortened)
	CALL	CPR_
	JE	SHORT OEXP4	; (Jump shortened)
	MOV	BP,OFFSET MINDATA:REAV1
	CALL	LDR_
	JMP	EXREA
OEXP4:	CALL	ERR_0
	DB	018
OEX14:	LEA	BP,WORD PTR [2*RCVAL+DI]
	CALL	MLR_
	CALL	OVR_
	JNZ	SHORT OEXP6	; (Jump shortened)
OEXP5:	LOOP	OEX14
	JMP	EXREA
OEXP6:	CALL	ERR_1
	DB	10
OEXP7:	CMP	WORD PTR [DI],OFFSET MINCODE:B_RCL
	JE	SHORT OEXP8	; (Jump shortened)
	MOV	DX,WORD PTR WORD PTR [2*ICVAL+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+DI]
	MOV	WORD PTR REG_IA,AX
	CALL	ITR_
	EVEN
	CALL	RCBLD
OEXP8:	XOR	BX,BX
	LEA	BP,WORD PTR [2*RCVAL+DI]
	CALL	LDR_
	CALL	CPR_
	JNE	SHORT OEXP9	; (Jump shortened)
	LEA	BP,WORD PTR [2*RCVAL+SI]
	CALL	LDR_
	CALL	CPR_
	JE	OEXP4
	MOV	BP,OFFSET MINDATA:REAV0
	CALL	LDR_
	JMP	EXREA
OEXP9:	CALL	CPR_
	JA	SHORT OEX10	; (Jump shortened)
	CALL	NGR_
	EVEN
	CALL	RCBLD
	LEA	BP,WORD PTR [2*RCVAL+SI]
	CALL	LDR_
	CALL	CHP_
	CALL	RTI_
	JC	OEXP6
	LEA	BP,WORD PTR [2*RCVAL+SI]
	CALL	SBR_
	CALL	CPR_
	JNE	SHORT OEX11	; (Jump shortened)
	MOV	BX,WORD PTR REG_IA
	AND	BX,BITS1
	LEA	BP,WORD PTR [2*RCVAL+DI]
	CALL	LDR_
OEX10:	CALL	LNF_
	CALL	OVR_
	JNZ	OEXP6
	LEA	BP,WORD PTR [2*RCVAL+SI]
	CALL	MLR_
	CALL	OVR_
	JNZ	OEXP6
	CALL	ETX_
	CALL	OVR_
	JNZ	OEXP6
	OR	BX,BX
	JZ	EXREA
	CALL	NGR_
	JMP	EXREA
OEX11:	CALL	ERR_1
	DB	55
OEX12:	PUSH	DI
	CALL	ITR_
	EVEN
	CALL	RCBLD
	MOV	SI,DI
	POP	DI
	JMP	OEXP7
	EVEN
	NOP
O_FEX:
	JMP	EVLX6
	EVEN
	NOP
O_FIF:
	CALL	ERR_0
	DB	020
	EVEN
	NOP
O_FNC:
	MOV	BP,REG_CP
	MOV	CX,[BP]
	ADD	REG_CP,2
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	MOV	SI,WORD PTR [2*VRFNC+DI]
	CMP	CX,WORD PTR [2*FARGS+SI]
	JNE	CFUNC
	JMP	WORD PTR [SI]
	EVEN
	NOP
O_FNE:
	MOV	BP,REG_CP
	MOV	CX,[BP]
	ADD	REG_CP,2
	CMP	CX,OFFSET MINDATA:ORNM_
	JNE	SHORT OFNE1	; (Jump shortened)
	MOV	BP,SP
	CMP	WORD PTR [2*2+BP],0
	JZ	EVLX3
OFNE1:	CALL	ERR_0
	DB	021
	EVEN
	NOP
O_FNS:
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	MOV	CX,NUM01
	MOV	SI,WORD PTR [2*VRFNC+DI]
	CMP	CX,WORD PTR [2*FARGS+SI]
	JNE	CFUNC
	JMP	WORD PTR [SI]
	EVEN
	NOP
O_FUN:
	CALL	ERR_0
	DB	022
	EVEN
	NOP
O_GOC:
	MOV	BP,SP
	MOV	DI,WORD PTR [2*1+BP]
	CMP	DI,STATE
	JA	SHORT OGOC1	; (Jump shortened)
	ADD	DI,2*VRTRA
	JMP	WORD PTR [DI]
OGOC1:	CALL	ERR_0
	DB	023
	EVEN
	NOP
O_GOD:
	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
	MOV	CX,WORD PTR [DI]
	CMP	CX,OFFSET MINCODE:B_CDS
	JE	BCDS0
	CMP	CX,OFFSET MINCODE:B_CDC
	JE	BCDC0
	CALL	ERR_0
	DB	024
	EVEN
	NOP
O_GOF:
	MOV	DI,FLPTR
	ADD	WORD PTR [DI],2
	ADD	REG_CP,2
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
O_IMA:
	MOV	BX,OFFSET MINCODE:P_IMC
	POP	DX
	POP	DI
	EVEN
	CALL	PBILD
	MOV	SI,DI
	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
	EVEN
	CALL	GTPAT
	DW	ERR_-025
	MOV	BP,SP
	MOV	WORD PTR [BP],DI
	MOV	BX,OFFSET MINCODE:P_IMA
	EVEN
	CALL	PBILD
	POP	WORD PTR [2*PTHEN+DI]
	EVEN
	CALL	PCONC
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
O_INN:
	MOV	BX,SP
	JMP	INDIR
	EVEN
	NOP
O_INT:
	MOV	BP,SP
	MOV	WORD PTR [BP],OFFSET MINDATA:NULLS
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
O_INV:
	XOR	BX,BX
	JMP	INDIR
	EVEN
	NOP
O_KWN:
	CALL	KWNAM
	JMP	EXNAM
	EVEN
	NOP
O_KWV:
	CALL	KWNAM
	MOV	DNAMP,DI
	EVEN
	CALL	ACESS
	DW	EXNUL
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
O_LEX:
	MOV	CX,2*EVSI_
	EVEN
	CALL	ALLOC
	MOV	WORD PTR [DI],OFFSET MINCODE:B_EVT
	MOV	WORD PTR [2*EVVAR+DI],OFFSET MINDATA:TRBEV
	MOV	BP,REG_CP
	MOV	CX,[BP]
	ADD	REG_CP,2
	MOV	WORD PTR [2*EVEXP+DI],CX
	MOV	SI,DI
	MOV	CX,2*EVVAR
	JMP	EXNAM
	EVEN
	NOP
O_LPT:
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
O_LVN:
	MOV	BP,REG_CP
	MOV	CX,[BP]
	ADD	REG_CP,2
	PUSH	CX
	MOV	AX,2*VRVAL
	PUSH	AX
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
O_MLT:
	CALL	ARITH
	DW	ERR_-026
	DW	ERR_-027
	DW	OMLT1
	LEA	BP,WORD PTR [2*ICVAL+SI]
	CALL	MLI_
	JNO	EXINT
	CALL	ERR_0
	DB	028
OMLT1:	LEA	BP,WORD PTR [2*RCVAL+SI]
	CALL	MLR_
	CALL	OVR_
	JZ	EXREA
	CALL	ERR_1
	DB	7
	EVEN
	NOP
O_NAM:
	MOV	CX,2*NMSI_
	EVEN
	CALL	ALLOC
	MOV	WORD PTR [DI],OFFSET MINCODE:B_NML
	POP	WORD PTR [2*NMOFS+DI]
	POP	WORD PTR [2*NMBAS+DI]
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
O_NTA:
	MOV	BP,REG_CP
	MOV	CX,[BP]
	ADD	REG_CP,2
	PUSH	FLPTR
	PUSH	CX
	MOV	FLPTR,SP
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
O_NTB:
	MOV	BP,SP
	MOV	AX,WORD PTR [2*2+BP]
	MOV	FLPTR,AX
	JMP	EXFAL
	EVEN
	NOP
O_NTC:
	POP	AX
	POP	FLPTR
	JMP	EXNUL
	EVEN
	NOP
O_OUN:
	CALL	ERR_0
	DB	029
	EVEN
	NOP
O_PAS:
	MOV	BX,OFFSET MINCODE:P_PAC
	POP	DX
	POP	DI
	EVEN
	CALL	PBILD
	MOV	SI,DI
	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
	EVEN
	CALL	GTPAT
	DW	ERR_-030
	MOV	BP,SP
	MOV	WORD PTR [BP],DI
	MOV	BX,OFFSET MINCODE:P_PAA
	EVEN
	CALL	PBILD
	POP	WORD PTR [2*PTHEN+DI]
	EVEN
	CALL	PCONC
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
O_PMN:
	XOR	BX,BX
	JMP	MATCH
	EVEN
	NOP
O_PMS:
	MOV	BX,NUM02
	JMP	MATCH
	EVEN
	NOP
O_PMV:
	MOV	BX,NUM01
	JMP	MATCH
	EVEN
	NOP
O_POP:
	POP	AX
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
O_STP:
	JMP	LEND0
	EVEN
	NOP
O_RNM:
	JMP	EVLX4
	EVEN
	NOP
O_RPL:
	CALL	GTSTG
	DW	ERR_-031
	MOV	BP,SP
	MOV	SI,WORD PTR [BP]
	ADD	CX,WORD PTR [2*SCLEN+SI]
;	 MOV  BP,SP	; (Redundant)
	ADD	CX,WORD PTR [2*2+BP]
;	 MOV  BP,SP	; (Redundant)
	SUB	CX,WORD PTR [2*1+BP]
;	OR	CX,CX	(Optimized)
	JZ	SHORT ORPL3	; (Jump shortened)
	PUSH	DI
	EVEN
	CALL	ALOCS
	MOV	BP,SP
	MOV	CX,WORD PTR [2*3+BP]
;	 MOV  BP,SP	; (Redundant)
	MOV	WORD PTR [2*3+BP],DI
	ADD	DI,CFP_F
	OR	CX,CX
	JZ	SHORT ORPL1	; (Jump shortened)
;	 MOV  BP,SP	; (Redundant)
	MOV	SI,WORD PTR [2*1+BP]
	ADD	SI,CFP_F
	SHR	CX,1
	REP	MOVSW
	ADC	CX,CX
	REP	MOVSB
ORPL1:	POP	SI
	MOV	CX,WORD PTR [2*SCLEN+SI]
	OR	CX,CX
	JZ	SHORT ORPL2	; (Jump shortened)
	ADD	SI,CFP_F
	SHR	CX,1
	REP	MOVSW
	ADC	CX,CX
	REP	MOVSB
ORPL2:	POP	SI
	POP	DX
	MOV	CX,WORD PTR [2*SCLEN+SI]
	SUB	CX,DX
;	OR	CX,CX	(Optimized)
	JZ	OASS0
	ADD	SI,CFP_F
	ADD	SI,DX
	SHR	CX,1
	REP	MOVSW
	ADC	CX,CX
	REP	MOVSB
	JMP	OASS0
ORPL3:	ADD	SP,2*NUM02
	MOV	BP,SP
	MOV	WORD PTR [BP],OFFSET MINDATA:NULLS
	JMP	OASS0
	EVEN
	NOP
O_RVL:
	JMP	EVLX3
	EVEN
	NOP
O_SLA:
	MOV	BP,REG_CP
	MOV	CX,[BP]
	ADD	REG_CP,2
	PUSH	FLPTR
	PUSH	CX
	MOV	FLPTR,SP
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
O_SLB:
	POP	DI
	POP	AX
	MOV	BP,SP
	MOV	AX,WORD PTR [BP]
	MOV	FLPTR,AX
;	 MOV  BP,SP	; (Redundant)
	MOV	WORD PTR [BP],DI
	MOV	BP,REG_CP
	MOV	CX,[BP]
	ADD	REG_CP,2
	ADD	CX,R_COD
	MOV	REG_CP,CX
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
O_SLC:
	MOV	BP,REG_CP
	MOV	CX,[BP]
	ADD	REG_CP,2
	MOV	BP,SP
	MOV	WORD PTR [BP],CX
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
O_SLD:
	POP	AX
	POP	FLPTR
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
O_SUB:
	CALL	ARITH
	DW	ERR_-032
	DW	ERR_-033
	DW	OSUB1
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+SI]
	SUB	WORD PTR REG_IA,AX
	SBB	DX,WORD PTR WORD PTR [2*ICVAL+SI]+2
	JNO	EXINT
	CALL	ERR_0
	DB	034
OSUB1:	LEA	BP,WORD PTR [2*RCVAL+SI]
	CALL	SBR_
	CALL	OVR_
	JZ	EXREA
	CALL	ERR_1
	DB	8
	EVEN
	NOP
O_TXR:
	JMP	TRXQ1
	EVEN
	NOP
O_UNF:
	CALL	ERR_0
	DB	035
	SUBTTL	S P I T B O L -- BLOCK ACTION ROUTINES
	EVEN
	NOP
	DW	BL__I
B_AAA:
	EVEN
	NOP
	DW	BL_EX
B_EXL:
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
	DW	BL_SE
B_SEL:
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
	DW	BL__I
B_E__:
	EVEN
	NOP
	DW	BL_TR
B_TRT:
	EVEN
	NOP
	DW	BL__I
B_T__:
	EVEN
	NOP
	DW	BL_AR
B_ART:
	EVEN
	NOP
	DW	BL_BC
B_BCT:
	EVEN
	NOP
	DW	BL_BF
B_BFT:
	EVEN
	NOP
	DW	BL_CC
B_CCT:
	EVEN
	NOP
	DW	BL_CD
B_CDC:
BCDC0:	MOV	SP,FLPTR
	MOV	BP,SP
	MOV	AX,WORD PTR [2*CDFAL+DI]
	MOV	WORD PTR [BP],AX
	JMP	STMGO
	EVEN
	NOP
	DW	BL_CD
B_CDS:
BCDS0:	MOV	SP,FLPTR
	MOV	BP,SP
	MOV	WORD PTR [BP],2*CDFAL
	JMP	STMGO
	EVEN
	NOP
	DW	BL_CM
B_CMT:
	EVEN
	NOP
	DW	BL_CT
B_CTT:
	EVEN
	NOP
	DW	BL_DF
B_DFC:
	MOV	CX,WORD PTR [2*DFPDL+SI]
	EVEN
	CALL	ALLOC
	MOV	WORD PTR [DI],OFFSET MINCODE:B_PDT
	MOV	WORD PTR [2*PDDFP+DI],SI
	MOV	DX,DI
	ADD	DI,CX
	MOV	CX,WORD PTR [2*FARGS+SI]
BDFC1:	DEC	DI
	DEC	DI
	POP	WORD PTR [DI]
	LOOP	BDFC1
	MOV	DI,DX
	JMP	EXSID
	EVEN
	NOP
	DW	BL_EF
B_EFC:
	MOV	DX,WORD PTR [2*FARGS+SI]
	SAL	DX,1
	PUSH	SI
	MOV	SI,SP
BEFC1:	INC	SI
	INC	SI
	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
	DEC	DX
	DEC	DX
	ADD	DI,DX
	MOV	DI,WORD PTR [2*EFTAR+DI]
	SHL	DI,1
	JMP	CS:WORD PTR L0001[DI]
L0001	LABEL	WORD
	DW	OFFSET MINCODE:BEFC7
	DW	OFFSET MINCODE:BEFC2
	DW	OFFSET MINCODE:BEFC3
	DW	OFFSET MINCODE:BEFC4
	DW	OFFSET MINCODE:BEFF1
BEFF1:	PUSH	SI
	MOV	BEFOF,DX
	PUSH	WORD PTR [SI]
	CALL	IOFCB
	DW	ERR_-298
	DW	ERR_-298
	DW	ERR_-298
	MOV	DI,CX
	POP	SI
	JMP	SHORT BEFC5	; (Jump shortened)
BEFC2:	PUSH	WORD PTR [SI]
	CALL	GTSTG
	DW	ERR_-039
	JMP	SHORT BEFC6	; (Jump shortened)
BEFC3:	MOV	DI,WORD PTR [SI]
	MOV	BEFOF,DX
	EVEN
	CALL	GTINT
	DW	ERR_-040
	JMP	SHORT BEFC5	; (Jump shortened)
BEFC4:	MOV	DI,WORD PTR [SI]
	MOV	BEFOF,DX
	EVEN
	CALL	GTREA
	DW	ERR_-265
BEFC5:	MOV	DX,BEFOF
BEFC6:	MOV	WORD PTR [SI],DI
BEFC7:	OR	DX,DX
	JNZ	BEFC1
	POP	SI
	MOV	CX,WORD PTR [2*FARGS+SI]
	EVEN
	CALL	SYSEX
	DW	EXFAL
	DW	ERR_-327
	DW	ERR_-326
	SAL	CX,1
	ADD	SP,CX
	MOV	BX,WORD PTR [2*EFRSL+SI]
	OR	BX,BX
	JNZ	SHORT BEFA8	; (Jump shortened)
	CMP	WORD PTR [DI],OFFSET MINCODE:B_SCL
	JNE	SHORT BEFC8	; (Jump shortened)
	CMP	WORD PTR [2*SCLEN+DI],0
	JZ	EXNUL
BEFA8:	CMP	BX,NUM01
	JNE	SHORT BEFC8	; (Jump shortened)
	CMP	WORD PTR [2*SCLEN+DI],0
	JZ	EXNUL
BEFC8:	CMP	DI,DNAMB
	JB	SHORT BEFC9	; (Jump shortened)
	CMP	DI,DNAMP
	JBE	EXIXR
BEFC9:	MOV	CX,WORD PTR [DI]
	OR	BX,BX
	JZ	SHORT BEF11	; (Jump shortened)
	MOV	CX,OFFSET MINCODE:B_SCL
	CMP	BX,NUM01
	JE	SHORT BEF10	; (Jump shortened)
	MOV	CX,OFFSET MINCODE:B_ICL
	CMP	BX,NUM02
	JE	SHORT BEF10	; (Jump shortened)
	MOV	CX,OFFSET MINCODE:B_RCL
BEF10:	MOV	WORD PTR [DI],CX
BEF11:	CMP	WORD PTR [DI],OFFSET MINCODE:B_SCL
	JE	SHORT BEF12	; (Jump shortened)
	EVEN
	CALL	BLKLN
	MOV	SI,DI
	EVEN
	CALL	ALLOC
	PUSH	DI
	SHR	CX,1
	REP	MOVSW
	XOR	SI,SI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
BEF12:	MOV	SI,DI
	MOV	CX,WORD PTR [2*SCLEN+DI]
	OR	CX,CX
	JZ	EXNUL
	EVEN
	CALL	ALOCS
	PUSH	DI
	ADD	DI,CFP_F
	ADD	SI,CFP_F
	MOV	CX,DX
	SHR	CX,1
	REP	MOVSW
	ADC	CX,CX
	REP	MOVSB
	XOR	SI,SI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
	DW	BL_EV
B_EVT:
	EVEN
	NOP
	DW	BL_FF
B_FFC:
	MOV	DI,SI
	MOV	BP,REG_CP
	MOV	DX,[BP]
	ADD	REG_CP,2
	MOV	BP,SP
	MOV	SI,WORD PTR [BP]
	CMP	WORD PTR [SI],OFFSET MINCODE:B_PDT
	JNE	SHORT BFFC2	; (Jump shortened)
	MOV	CX,WORD PTR [2*PDDFP+SI]
BFFC1:	CMP	CX,WORD PTR [2*FFDFP+DI]
	JE	SHORT BFFC3	; (Jump shortened)
	MOV	DI,WORD PTR [2*FFNXT+DI]
	OR	DI,DI
	JNZ	BFFC1
BFFC2:	CALL	ERR_0
	DB	041
BFFC3:	MOV	CX,WORD PTR [2*FFOFS+DI]
	CMP	DX,OFFSET MINDATA:OFNE_
	JE	SHORT BFFC5	; (Jump shortened)
	ADD	SI,CX
	MOV	DI,WORD PTR [SI]
	CMP	WORD PTR [DI],OFFSET MINCODE:B_TRT
	JNE	SHORT BFFC4	; (Jump shortened)
	SUB	SI,CX
	MOV	BP,SP
	MOV	WORD PTR [BP],DX
	EVEN
	CALL	ACESS
	DW	EXFAL
	MOV	BP,SP
	MOV	DX,WORD PTR [BP]
BFFC4:	MOV	BP,SP
	MOV	WORD PTR [BP],DI
	MOV	DI,DX
	MOV	SI,WORD PTR [DI]
	JMP	SI
BFFC5:	PUSH	CX
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
	DW	BL_IC
B_ICL:
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
	DW	BL_KV
B_KVT:
	EVEN
	NOP
	DW	BL_NM
B_NML:
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
	DW	BL_PD
B_PDT:
	EVEN
	NOP
	DW	BL_PF
B_PFC:
	MOV	BPFPF,SI
	MOV	DI,SI
	MOV	SI,WORD PTR [2*PFVBL+DI]
BPF01:	MOV	BX,SI
	MOV	SI,WORD PTR [2*VRVAL+SI]
	CMP	WORD PTR [SI],OFFSET MINCODE:B_TRT
	JE	BPF01
	MOV	BPFSV,SI
	MOV	SI,BX
	MOV	WORD PTR [2*VRVAL+SI],OFFSET MINDATA:NULLS
	MOV	CX,WORD PTR [2*FARGS+DI]
	ADD	DI,2*PFARG
	OR	CX,CX
	JZ	SHORT BPF04	; (Jump shortened)
	MOV	SI,SP
	SAL	CX,1
	ADD	SI,CX
	MOV	BPFXT,SI
BPF02:	MOV	SI,WORD PTR [DI]
	INC	DI
	INC	DI
BPF03:	MOV	DX,SI
	MOV	SI,WORD PTR [2*VRVAL+SI]
	CMP	WORD PTR [SI],OFFSET MINCODE:B_TRT
	JE	BPF03
	MOV	CX,SI
	MOV	SI,BPFXT
	DEC	SI
	DEC	SI
	MOV	BX,WORD PTR [SI]
	MOV	WORD PTR [SI],CX
	MOV	BPFXT,SI
	MOV	SI,DX
	MOV	WORD PTR [2*VRVAL+SI],BX
	CMP	SP,BPFXT
	JNE	BPF02
BPF04:	MOV	SI,BPFPF
	MOV	CX,WORD PTR [2*PFNLO+SI]
	OR	CX,CX
	JZ	SHORT BPF07	; (Jump shortened)
	MOV	BX,OFFSET MINDATA:NULLS
BPF05:	MOV	SI,WORD PTR [DI]
	INC	DI
	INC	DI
BPF06:	MOV	DX,SI
	MOV	SI,WORD PTR [2*VRVAL+SI]
	CMP	WORD PTR [SI],OFFSET MINCODE:B_TRT
	JE	BPF06
	PUSH	SI
	MOV	SI,DX
	MOV	WORD PTR [2*VRVAL+SI],BX
	LOOP	BPF05
BPF07:	XOR	DI,DI
	CMP	KVPFL,0
	JZ	SHORT BPF7C	; (Jump shortened)
	CMP	KVPFL,NUM02
	JE	SHORT BPF7A	; (Jump shortened)
	EVEN
	CALL	SYSTM
	MOV	WORD PTR PFETM+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR PFETM,AX
	MOV	AX,WORD PTR PFSTM
	SUB	WORD PTR REG_IA,AX
	SBB	DX,WORD PTR PFSTM+2
	EVEN
	CALL	ICBLD
	MOV	DX,WORD PTR PFETM+2
	MOV	AX,WORD PTR PFETM
	MOV	WORD PTR REG_IA,AX
	JMP	SHORT BPF7B	; (Jump shortened)
BPF7A:	MOV	DX,WORD PTR PFSTM+2
	MOV	AX,WORD PTR PFSTM
	MOV	WORD PTR REG_IA,AX
	EVEN
	CALL	ICBLD
	EVEN
	CALL	SYSTM
BPF7B:	MOV	WORD PTR PFSTM+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR PFSTM,AX
	MOV	PFFNC,SP
BPF7C:	PUSH	DI
	MOV	CX,R_COD
	MOV	BX,REG_CP
	SUB	BX,CX
	MOV	SI,BPFPF
	PUSH	BPFSV
	PUSH	CX
	PUSH	BX
	PUSH	FLPRT
	PUSH	FLPTR
	PUSH	SI
	XOR	AX,AX
	PUSH	AX
	CMP	SP,LOWSPMIN
	JB	SEC06
	MOV	FLPTR,SP
	MOV	FLPRT,SP
	MOV	CX,KVTRA
	ADD	CX,KVFTR
;	OR	CX,CX	(Optimized)
	JNZ	SHORT BPF09	; (Jump shortened)
	INC	KVFNC
BPF08:	MOV	DI,WORD PTR [2*PFCOD+SI]
	MOV	DI,WORD PTR [2*VRLBL+DI]
	CMP	DI,OFFSET MINDATA:STNDL
	JE	BPF17
	CMP	WORD PTR [DI],OFFSET MINCODE:B_TRT
	JNE	SHORT BPF8A	; (Jump shortened)
	MOV	DI,WORD PTR [2*TRLBL+DI]
BPF8A:	JMP	WORD PTR [DI]
BPF09:	MOV	DI,WORD PTR [2*PFCTR+SI]
	MOV	SI,WORD PTR [2*PFVBL+SI]
	MOV	CX,2*VRVAL
	CMP	KVTRA,0
	JZ	SHORT BPF10	; (Jump shortened)
	OR	DI,DI
	JZ	SHORT BPF10	; (Jump shortened)
	DEC	KVTRA
	CMP	WORD PTR [2*TRFNC+DI],0
	JZ	SHORT BPF11	; (Jump shortened)
	EVEN
	CALL	TRXEQ
BPF10:	CMP	KVFTR,0
	JZ	SHORT BPF16	; (Jump shortened)
	DEC	KVFTR
BPF11:
	EVEN
	CALL	PRTSN
	EVEN
	CALL	PRTNM
	MOV	CX,CH_PP
	EVEN
	CALL	PRTCH
	MOV	BP,SP
	MOV	SI,WORD PTR [2*1+BP]
	CMP	WORD PTR [2*FARGS+SI],0
	JZ	SHORT BPF15	; (Jump shortened)
	XOR	BX,BX
	JMP	SHORT BPF13	; (Jump shortened)
BPF12:	MOV	CX,CH_CM
	EVEN
	CALL	PRTCH
BPF13:	MOV	BP,SP
	MOV	WORD PTR [BP],BX
	SAL	BX,1
	ADD	SI,BX
	MOV	DI,WORD PTR [2*PFARG+SI]
	SUB	SI,BX
	MOV	DI,WORD PTR [2*VRVAL+DI]
	EVEN
	CALL	PRTVL
	MOV	BP,SP
	MOV	BX,WORD PTR [BP]
	INC	BX
	CMP	BX,WORD PTR [2*FARGS+SI]
	JB	BPF12
BPF15:	MOV	CX,CH_RP
	EVEN
	CALL	PRTCH
	EVEN
	CALL	PRTNL
BPF16:	INC	KVFNC
	MOV	SI,R_FNC
	EVEN
	CALL	KTREX
	MOV	BP,SP
	MOV	SI,WORD PTR [2*1+BP]
	JMP	BPF08
BPF17:	MOV	BP,SP
	MOV	AX,WORD PTR [2*2+BP]
	MOV	FLPTR,AX
	CALL	ERR_1
	DB	30
	EVEN
	NOP
	DW	BL_RC
B_RCL:
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
	DW	BL_SC
B_SCL:
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
	DW	BL_TB
B_TBT:
	EVEN
	NOP
	DW	BL_TE
B_TET:
	EVEN
	NOP
	DW	BL_VC
B_VCT:
	EVEN
	NOP
	DW	BL__I
B_VR_:
	EVEN
	NOP
	DW	BL__I
B_VRA:
	MOV	SI,DI
	MOV	CX,2*VRVAL
	EVEN
	CALL	ACESS
	DW	EXFAL
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
B_VRE:
	CALL	ERR_0
	DB	042
	EVEN
	NOP
B_VRG:
	MOV	DI,WORD PTR [2*VRLBO+DI]
	MOV	SI,WORD PTR [DI]
	JMP	SI
	EVEN
	NOP
B_VRL:
	PUSH	WORD PTR [2*VRVAL+DI]
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
B_VRS:
	MOV	BP,SP
	MOV	AX,WORD PTR [BP]
	MOV	WORD PTR [2*VRVLO+DI],AX
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
B_VRT:
	SUB	DI,2*VRTRA
	MOV	SI,DI
	MOV	CX,2*VRVAL
	MOV	DI,WORD PTR [2*VRLBL+SI]
	CMP	KVTRA,0
	JZ	SHORT BVRT2	; (Jump shortened)
	DEC	KVTRA
	CMP	WORD PTR [2*TRFNC+DI],0
	JZ	SHORT BVRT1	; (Jump shortened)
	EVEN
	CALL	TRXEQ
	JMP	SHORT BVRT2	; (Jump shortened)
BVRT1:
	EVEN
	CALL	PRTSN
	MOV	DI,SI
	MOV	CX,CH_CL
	EVEN
	CALL	PRTCH
	MOV	CX,CH_PP
	EVEN
	CALL	PRTCH
	EVEN
	CALL	PRTVN
	MOV	CX,CH_RP
	EVEN
	CALL	PRTCH
	EVEN
	CALL	PRTNL
	MOV	DI,WORD PTR [2*VRLBL+SI]
BVRT2:	MOV	DI,WORD PTR [2*TRLBL+DI]
	JMP	WORD PTR [DI]
	EVEN
	NOP
B_VRV:
	MOV	BP,SP
	MOV	BX,WORD PTR [BP]
	SUB	DI,2*VRSTO
	MOV	SI,DI
	MOV	CX,2*VRVAL
	EVEN
	CALL	ASIGN
	DW	EXFAL
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
	DW	BL_XN
B_XNT:
	EVEN
	NOP
	DW	BL_XR
B_XRT:
	EVEN
	NOP
	DW	BL__I
B_YYY:
	SUBTTL	S P I T B O L -- PATTERN MATCHING ROUTINES
	EVEN
	NOP
	DW	BL__I
P_AAA:
	EVEN
	NOP
	DW	BL_P0
P_ABA:
	PUSH	BX
	PUSH	DI
	PUSH	PMHBS
	MOV	AX,OFFSET MINDATA:NDABB
	PUSH	AX
	MOV	PMHBS,SP
	JMP	SUCCP
	EVEN
	NOP
P_ABB:
	MOV	PMHBS,BX
	JMP	FLPOP
	EVEN
	NOP
	DW	BL_P0
P_ABC:
	MOV	SI,PMHBS
	MOV	CX,WORD PTR [2*3+SI]
	MOV	AX,WORD PTR [2*1+SI]
	MOV	PMHBS,AX
	CMP	SI,SP
	JE	SHORT PABC1	; (Jump shortened)
	PUSH	SI
	MOV	AX,OFFSET MINDATA:NDABD
	PUSH	AX
	JMP	SHORT PABC2	; (Jump shortened)
PABC1:	ADD	SP,2*NUM04
PABC2:	CMP	CX,BX
	JNE	SUCCP
	MOV	DI,WORD PTR [2*PTHEN+DI]
	JMP	SUCCP
	EVEN
	NOP
P_ABD:
	MOV	PMHBS,BX
	JMP	FAILP
	EVEN
	NOP
	DW	BL_P0
P_ABO:
	JMP	EXFAL
	EVEN
	NOP
	DW	BL_P1
P_ALT:
	PUSH	BX
	PUSH	WORD PTR [2*PARM1+DI]
	CMP	SP,LOWSPMIN
	JB	SEC06
	JMP	SUCCP
	EVEN
	NOP
	DW	BL_P1
P_ANS:
	CMP	BX,PMSSL
	JE	FAILP
	MOV	SI,R_PMS
	LEA	SI,[CFP_F+SI+BX]
	MOV	CL,[SI]
	XOR	CH,CH
	CMP	CX,WORD PTR [2*PARM1+DI]
	JNE	FAILP
	INC	BX
	JMP	SUCCP
	EVEN
	NOP
	DW	BL_P2
P_ANY:
PANY1:	CMP	BX,PMSSL
	JE	FAILP
	MOV	SI,R_PMS
	LEA	SI,[CFP_F+SI+BX]
	MOV	CL,[SI]
	XOR	CH,CH
	MOV	SI,WORD PTR [2*PARM1+DI]
	SAL	CX,1
	ADD	SI,CX
	MOV	CX,WORD PTR [2*CTCHS+SI]
	AND	CX,WORD PTR [2*PARM2+DI]
;	OR	CX,CX	(Optimized)
	JZ	FAILP
	INC	BX
	JMP	SUCCP
	EVEN
	NOP
	DW	BL_P1
P_AYD:
	EVEN
	CALL	EVALS
	DW	ERR_-043
	DW	FAILP
	DW	PANY1
	EVEN
	NOP
	DW	BL_P0
P_ARB:
	MOV	DI,WORD PTR [2*PTHEN+DI]
	PUSH	BX
	PUSH	DI
	PUSH	BX
	MOV	AX,OFFSET MINDATA:NDARC
	PUSH	AX
	JMP	WORD PTR [DI]
	EVEN
	NOP
P_ARC:
	CMP	BX,PMSSL
	JE	FLPOP
	INC	BX
	PUSH	BX
	PUSH	DI
	MOV	BP,SP
	MOV	DI,WORD PTR [2*2+BP]
	JMP	WORD PTR [DI]
	EVEN
	NOP
	DW	BL_P0
P_BAL:
	XOR	DX,DX
	MOV	SI,R_PMS
	LEA	SI,[CFP_F+SI+BX]
	JMP	SHORT PBAL2	; (Jump shortened)
PBAL1:	LODSB
	XOR	AH,AH
	XCHG	AX,CX
	INC	BX
	CMP	CX,CH_PP
	JE	SHORT PBAL3	; (Jump shortened)
	CMP	CX,CH_RP
	JE	SHORT PBAL4	; (Jump shortened)
	OR	DX,DX
	JZ	SHORT PBAL5	; (Jump shortened)
PBAL2:	CMP	BX,PMSSL
	JNE	PBAL1
	JMP	FAILP
PBAL3:	INC	DX
	JMP	PBAL2
PBAL4:	OR	DX,DX
	JZ	FAILP
	DEC	DX
;	OR	DX,DX	(Optimized)
	JNZ	PBAL2
PBAL5:	PUSH	BX
	PUSH	DI
	JMP	SUCCP
	EVEN
	NOP
	DW	BL_P1
P_BKD:
	EVEN
	CALL	EVALS
	DW	ERR_-044
	DW	FAILP
	DW	PBRK1
	EVEN
	NOP
	DW	BL_P1
P_BKS:
	MOV	DX,PMSSL
	SUB	DX,BX
;	OR	DX,DX	(Optimized)
	JZ	FAILP
	MOV	SI,R_PMS
	LEA	SI,[CFP_F+SI+BX]
PBKS1:	LODSB
	XOR	AH,AH
	XCHG	AX,CX
	CMP	CX,WORD PTR [2*PARM1+DI]
	JE	SUCCP
	INC	BX
	DEC	DX
	JNZ	PBKS1
	JMP	FAILP
	EVEN
	NOP
	DW	BL_P2
P_BRK:
PBRK1:	MOV	DX,PMSSL
	SUB	DX,BX
;	OR	DX,DX	(Optimized)
	JZ	FAILP
	MOV	SI,R_PMS
	LEA	SI,[CFP_F+SI+BX]
	MOV	PSAVE,DI
PBRK2:	LODSB
	XOR	AH,AH
	XCHG	AX,CX
	MOV	DI,WORD PTR [2*PARM1+DI]
	SAL	CX,1
	ADD	DI,CX
	MOV	CX,WORD PTR [2*CTCHS+DI]
	MOV	DI,PSAVE
	AND	CX,WORD PTR [2*PARM2+DI]
;	OR	CX,CX	(Optimized)
	JNZ	SUCCP
	INC	BX
	DEC	DX
	JNZ	PBRK2
	JMP	FAILP
	EVEN
	NOP
	DW	BL_P0
P_BKX:
	INC	BX
	JMP	SUCCP
	EVEN
	NOP
	DW	BL_P1
P_BXD:
	EVEN
	CALL	EVALS
	DW	ERR_-045
	DW	FAILP
	DW	PBRK1
	EVEN
	NOP
	DW	BL_P2
P_CAS:
	PUSH	DI
	PUSH	BX
	MOV	SI,WORD PTR [2*PARM1+DI]
	MOV	WORD PTR REG_IA,BX
	XOR	DX,DX
	MOV	BX,WORD PTR [2*PARM2+DI]
	EVEN
	CALL	ICBLD
	MOV	CX,BX
	MOV	BX,DI
	EVEN
	CALL	ASINP
	DW	FLPOP
	POP	BX
	POP	DI
	JMP	SUCCP
	EVEN
	NOP
	DW	BL_P1
P_EXA:
	EVEN
	CALL	EVALP
	DW	FAILP
	CMP	CX,OFFSET MINCODE:P_AAA
	JB	SHORT PEXA1	; (Jump shortened)
	PUSH	BX
	PUSH	DI
	PUSH	PMHBS
	MOV	AX,OFFSET MINDATA:NDEXB
	PUSH	AX
	MOV	PMHBS,SP
	MOV	DI,SI
	JMP	WORD PTR [DI]
PEXA1:	CMP	CX,OFFSET MINCODE:B_SCL
	JE	SHORT PEXA2	; (Jump shortened)
	PUSH	SI
	MOV	SI,DI
	CALL	GTSTG
	DW	ERR_-046
	MOV	DX,DI
	MOV	DI,SI
	MOV	SI,DX
PEXA2:	CMP	WORD PTR [2*SCLEN+SI],0
	JZ	SUCCP
	JMP	PSTR1
	EVEN
	NOP
P_EXB:
	MOV	PMHBS,BX
	JMP	FLPOP
	EVEN
	NOP
P_EXC:
	MOV	PMHBS,BX
	JMP	FAILP
	EVEN
	NOP
	DW	BL_P0
P_FAL:
	JMP	FAILP
	EVEN
	NOP
	DW	BL_P0
P_FEN:
	PUSH	BX
	MOV	AX,OFFSET MINDATA:NDABO
	PUSH	AX
	JMP	SUCCP
	EVEN
	NOP
	DW	BL_P0
P_FNA:
	PUSH	PMHBS
	MOV	AX,OFFSET MINDATA:NDFNB
	PUSH	AX
	MOV	PMHBS,SP
	JMP	SUCCP
	EVEN
	NOP
	DW	BL_P0
P_FNB:
	MOV	PMHBS,BX
	JMP	FAILP
	EVEN
	NOP
	DW	BL_P0
P_FNC:
	MOV	SI,PMHBS
	MOV	AX,WORD PTR [2*NUM01+SI]
	MOV	PMHBS,AX
	CMP	SI,SP
	JE	SHORT PFNC1	; (Jump shortened)
	PUSH	SI
	MOV	AX,OFFSET MINDATA:NDFND
	PUSH	AX
	JMP	SUCCP
PFNC1:	ADD	SP,2*NUM02
	JMP	SUCCP
	EVEN
	NOP
	DW	BL_P0
P_FND:
	MOV	SP,BX
	JMP	FLPOP
	EVEN
	NOP
	DW	BL_P0
P_IMA:
	PUSH	BX
	PUSH	DI
	PUSH	PMHBS
	MOV	AX,OFFSET MINDATA:NDIMB
	PUSH	AX
	MOV	PMHBS,SP
	JMP	SUCCP
	EVEN
	NOP
P_IMB:
	MOV	PMHBS,BX
	JMP	FLPOP
	EVEN
	NOP
	DW	BL_P2
P_IMC:
	MOV	SI,PMHBS
	MOV	CX,BX
	MOV	BX,WORD PTR [2*3+SI]
	MOV	AX,WORD PTR [2*1+SI]
	MOV	PMHBS,AX
	CMP	SI,SP
	JE	SHORT PIMC1	; (Jump shortened)
	PUSH	SI
	MOV	AX,OFFSET MINDATA:NDIMD
	PUSH	AX
	JMP	SHORT PIMC2	; (Jump shortened)
PIMC1:	ADD	SP,2*NUM04
PIMC2:	PUSH	CX
	PUSH	DI
	MOV	SI,R_PMS
	SUB	CX,BX
	EVEN
	CALL	SBSTR
	MOV	BX,DI
	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
	MOV	SI,WORD PTR [2*PARM1+DI]
	MOV	CX,WORD PTR [2*PARM2+DI]
	EVEN
	CALL	ASINP
	DW	FLPOP
	POP	DI
	POP	BX
	JMP	SUCCP
	EVEN
	NOP
P_IMD:
	MOV	PMHBS,BX
	JMP	FAILP
	EVEN
	NOP
	DW	BL_P1
P_LEN:
PLEN1:	ADD	BX,WORD PTR [2*PARM1+DI]
	CMP	BX,PMSSL
	JBE	SUCCP
	JMP	FAILP
	EVEN
	NOP
	DW	BL_P1
P_LND:
	EVEN
	CALL	EVALI
	DW	ERR_-047
	DW	ERR_-048
	DW	FAILP
	DW	PLEN1
	EVEN
	NOP
	DW	BL_P1
P_NAD:
	EVEN
	CALL	EVALS
	DW	ERR_-049
	DW	FAILP
	DW	PNAY1
	EVEN
	NOP
	DW	BL_P1
P_NAS:
	CMP	BX,PMSSL
	JE	FAILP
	MOV	SI,R_PMS
	LEA	SI,[CFP_F+SI+BX]
	MOV	CL,[SI]
	XOR	CH,CH
	CMP	CX,WORD PTR [2*PARM1+DI]
	JE	FAILP
	INC	BX
	JMP	SUCCP
	EVEN
	NOP
	DW	BL_P2
P_NAY:
PNAY1:	CMP	BX,PMSSL
	JE	FAILP
	MOV	SI,R_PMS
	LEA	SI,[CFP_F+SI+BX]
	MOV	CL,[SI]
	XOR	CH,CH
	SAL	CX,1
	MOV	SI,WORD PTR [2*PARM1+DI]
	ADD	SI,CX
	MOV	CX,WORD PTR [2*CTCHS+SI]
	AND	CX,WORD PTR [2*PARM2+DI]
;	OR	CX,CX	(Optimized)
	JNZ	FAILP
	INC	BX
	JMP	SUCCP
	EVEN
	NOP
	DW	BL_P0
P_NTH:
	MOV	SI,PMHBS
	MOV	CX,WORD PTR [2*1+SI]
	CMP	CX,NUM02
	JBE	SHORT PNTH2	; (Jump shortened)
	MOV	PMHBS,CX
	MOV	DI,WORD PTR [2*2+SI]
	CMP	SI,SP
	JE	SHORT PNTH1	; (Jump shortened)
	PUSH	SI
	MOV	AX,OFFSET MINDATA:NDEXC
	PUSH	AX
	JMP	SUCCP
PNTH1:	ADD	SP,2*NUM04
	JMP	SUCCP
PNTH2:	MOV	PMSSL,BX
	CMP	PMDFL,0
	JZ	SHORT PNTH6	; (Jump shortened)
PNTH3:	DEC	SI
	DEC	SI
	DEC	SI
	DEC	SI
	MOV	CX,WORD PTR [SI]
	CMP	CX,OFFSET MINDATA:NDPAD
	JE	SHORT PNTH4	; (Jump shortened)
	CMP	CX,OFFSET MINDATA:NDPAB
	JNE	SHORT PNTH5	; (Jump shortened)
	PUSH	WORD PTR [2*1+SI]
	CMP	SP,LOWSPMIN
	JB	SEC06
	JMP	PNTH3
PNTH4:	MOV	CX,WORD PTR [2*1+SI]
	MOV	BP,SP
	MOV	BX,WORD PTR [BP]
;	 MOV  BP,SP	; (Redundant)
	MOV	WORD PTR [BP],SI
	SUB	CX,BX
	MOV	SI,R_PMS
	EVEN
	CALL	SBSTR
	MOV	BX,DI
	MOV	BP,SP
	MOV	SI,WORD PTR [BP]
	MOV	SI,WORD PTR [2*2+SI]
	MOV	CX,WORD PTR [2*PARM2+SI]
	MOV	SI,WORD PTR [2*PARM1+SI]
	EVEN
	CALL	ASINP
	DW	EXFAL
	POP	SI
PNTH5:	CMP	SI,SP
	JNE	PNTH3
PNTH6:	MOV	SP,PMHBS
	POP	BX
	POP	DX
	MOV	CX,PMSSL
	MOV	SI,R_PMS
	XOR	AX,AX
	MOV	R_PMS,AX
	OR	DX,DX
	JZ	SHORT PNTH7	; (Jump shortened)
	CMP	DX,NUM02
	JE	SHORT PNTH9	; (Jump shortened)
	SUB	CX,BX
	EVEN
	CALL	SBSTR
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
PNTH7:	PUSH	BX
	PUSH	CX
PNTH8:	PUSH	SI
PNTH9:	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
	DW	BL_P1
P_POS:
	CMP	BX,WORD PTR [2*PARM1+DI]
	JE	SUCCP
	OR	BX,BX
	JNZ	FAILP
	MOV	SI,PMHBS
	DEC	SI
	DEC	SI
	CMP	DI,WORD PTR [SI]
	JNE	FAILP
PPOS2:	DEC	SI
	DEC	SI
	CMP	WORD PTR [SI],OFFSET MINDATA:NDUNA
	JNE	FAILP
	MOV	BX,WORD PTR [2*PARM1+DI]
	CMP	BX,PMSSL
	JA	EXFAL
	MOV	WORD PTR [2*2+SI],BX
	JMP	SUCCP
	EVEN
	NOP
	DW	BL_P1
P_PSD:
	EVEN
	CALL	EVALI
	DW	ERR_-050
	DW	ERR_-051
	DW	FAILP
	DW	PPOS1
PPOS1:	CMP	BX,WORD PTR [2*PARM1+DI]
	JE	SUCCP
	OR	BX,BX
	JNZ	FAILP
	CMP	EVLIF,0
	JNZ	FAILP
	MOV	SI,PMHBS
	MOV	CX,EVLIO
	DEC	SI
	DEC	SI
	CMP	CX,WORD PTR [SI]
	JNE	FAILP
	JMP	PPOS2
	EVEN
	NOP
	DW	BL_P0
P_PAA:
	PUSH	BX
	MOV	AX,OFFSET MINDATA:NDPAB
	PUSH	AX
	JMP	SUCCP
	EVEN
	NOP
P_PAB:
	JMP	FAILP
	EVEN
	NOP
	DW	BL_P2
P_PAC:
	PUSH	BX
	PUSH	DI
	PUSH	BX
	MOV	AX,OFFSET MINDATA:NDPAD
	PUSH	AX
	MOV	PMDFL,SP
	JMP	SUCCP
	EVEN
	NOP
P_PAD:
	JMP	FLPOP
	EVEN
	NOP
	DW	BL_P0
P_REM:
	MOV	BX,PMSSL
	JMP	SUCCP
	EVEN
	NOP
	DW	BL_P1
P_RPD:
	EVEN
	CALL	EVALI
	DW	ERR_-052
	DW	ERR_-053
	DW	FAILP
	DW	PRPS1
PRPS1:	MOV	DX,PMSSL
	SUB	DX,BX
	CMP	DX,WORD PTR [2*PARM1+DI]
	JE	SUCCP
	OR	BX,BX
	JNZ	FAILP
	CMP	EVLIF,0
	JNZ	FAILP
	MOV	SI,PMHBS
	MOV	CX,EVLIO
	DEC	SI
	DEC	SI
	CMP	CX,WORD PTR [SI]
	JNE	FAILP
	JMP	SHORT PRPS2	; (Jump shortened)
	EVEN
	NOP
	DW	BL_P1
P_RPS:
	MOV	DX,PMSSL
	SUB	DX,BX
	CMP	DX,WORD PTR [2*PARM1+DI]
	JE	SUCCP
	OR	BX,BX
	JNZ	FAILP
	MOV	SI,PMHBS
	DEC	SI
	DEC	SI
	CMP	DI,WORD PTR [SI]
	JNE	FAILP
PRPS2:	DEC	SI
	DEC	SI
	CMP	WORD PTR [SI],OFFSET MINDATA:NDUNA
	JNE	FAILP
	MOV	BX,PMSSL
	CMP	BX,WORD PTR [2*PARM1+DI]
	JB	FAILP
	SUB	BX,WORD PTR [2*PARM1+DI]
	MOV	WORD PTR [2*2+SI],BX
	JMP	SUCCP
	EVEN
	NOP
	DW	BL_P1
P_RTB:
PRTB1:	MOV	DX,BX
	MOV	BX,PMSSL
	CMP	BX,WORD PTR [2*PARM1+DI]
	JB	FAILP
	SUB	BX,WORD PTR [2*PARM1+DI]
	CMP	BX,DX
	JAE	SUCCP
	JMP	FAILP
	EVEN
	NOP
	DW	BL_P1
P_RTD:
	EVEN
	CALL	EVALI
	DW	ERR_-054
	DW	ERR_-055
	DW	FAILP
	DW	PRTB1
	EVEN
	NOP
	DW	BL_P1
P_SPD:
	EVEN
	CALL	EVALS
	DW	ERR_-056
	DW	FAILP
	DW	PSPN1
	EVEN
	NOP
	DW	BL_P2
P_SPN:
PSPN1:	MOV	DX,PMSSL
	SUB	DX,BX
;	OR	DX,DX	(Optimized)
	JZ	FAILP
	MOV	SI,R_PMS
	LEA	SI,[CFP_F+SI+BX]
	MOV	PSAVC,BX
	MOV	PSAVE,DI
PSPN2:	LODSB
	XOR	AH,AH
	XCHG	AX,CX
	SAL	CX,1
	MOV	DI,WORD PTR [2*PARM1+DI]
	ADD	DI,CX
	MOV	CX,WORD PTR [2*CTCHS+DI]
	MOV	DI,PSAVE
	AND	CX,WORD PTR [2*PARM2+DI]
;	OR	CX,CX	(Optimized)
	JZ	SHORT PSPN3	; (Jump shortened)
	INC	BX
	DEC	DX
	JNZ	PSPN2
PSPN3:	CMP	BX,PSAVC
	JNE	SUCCP
	JMP	FAILP
	EVEN
	NOP
	DW	BL_P1
P_SPS:
	MOV	DX,PMSSL
	SUB	DX,BX
;	OR	DX,DX	(Optimized)
	JZ	FAILP
	MOV	SI,R_PMS
	LEA	SI,[CFP_F+SI+BX]
	MOV	PSAVC,BX
PSPS1:	LODSB
	XOR	AH,AH
	XCHG	AX,CX
	CMP	CX,WORD PTR [2*PARM1+DI]
	JNE	SHORT PSPS2	; (Jump shortened)
	INC	BX
	DEC	DX
	JNZ	PSPS1
PSPS2:	CMP	BX,PSAVC
	JNE	SUCCP
	JMP	FAILP
	EVEN
	NOP
	DW	BL_P1
P_STR:
	MOV	SI,WORD PTR [2*PARM1+DI]
PSTR1:	MOV	PSAVE,DI
	MOV	DI,R_PMS
	LEA	DI,[CFP_F+DI+BX]
	ADD	BX,WORD PTR [2*SCLEN+SI]
	CMP	BX,PMSSL
	JA	FAILP
	MOV	PSAVC,BX
	MOV	CX,WORD PTR [2*SCLEN+SI]
	ADD	SI,CFP_F
	REPE	CMPSB
	MOV	SI,0
	MOV	DI,SI
	JNZ	FAILP
	MOV	DI,PSAVE
	MOV	BX,PSAVC
	JMP	SUCCP
	EVEN
	NOP
	DW	BL_P0
P_SUC:
	PUSH	BX
	PUSH	DI
	JMP	SUCCP
	EVEN
	NOP
	DW	BL_P1
P_TAB:
PTAB1:	CMP	BX,WORD PTR [2*PARM1+DI]
	JA	FAILP
	MOV	BX,WORD PTR [2*PARM1+DI]
	CMP	BX,PMSSL
	JBE	SUCCP
	JMP	FAILP
	EVEN
	NOP
	DW	BL_P1
P_TBD:
	EVEN
	CALL	EVALI
	DW	ERR_-057
	DW	ERR_-058
	DW	FAILP
	DW	PTAB1
	EVEN
	NOP
P_UNA:
	MOV	DI,BX
	MOV	BP,SP
	MOV	BX,WORD PTR [BP]
	CMP	BX,PMSSL
	JE	EXFAL
	INC	BX
;	 MOV  BP,SP	; (Redundant)
	MOV	WORD PTR [BP],BX
	PUSH	DI
	MOV	AX,OFFSET MINDATA:NDUNA
	PUSH	AX
	JMP	WORD PTR [DI]
	EVEN
	NOP
	DW	BL__I
P_YYY:
	SUBTTL	S P I T B O L -- SNOBOL4 BUILT-IN LABEL ROUTINES
	EVEN
	NOP
L_ABO:
LABO1:	MOV	CX,KVERT
	OR	CX,CX
	JZ	SHORT LABO3	; (Jump shortened)
	EVEN
	CALL	SYSAX
	MOV	DX,KVSTN
	EVEN
	CALL	FILNM
	MOV	DI,R_COD
	MOV	DX,WORD PTR [2*CDSLN+DI]
	XOR	BX,BX
	MOV	DI,STAGE
	EVEN
	CALL	SYSEA
	DW	STPR4
	EVEN
	CALL	PRTPG
	OR	DI,DI
	JZ	SHORT LABO2	; (Jump shortened)
	EVEN
	CALL	PRTST
LABO2:
	EVEN
	CALL	ERMSG
	XOR	DI,DI
	JMP	STOPR
LABO3:	CALL	ERR_0
	DB	036
	EVEN
	NOP
L_CNT:
LCNT1:	MOV	DI,R_CNT
	OR	DI,DI
	JZ	SHORT LCNT3	; (Jump shortened)
	XOR	AX,AX
	MOV	R_CNT,AX
	MOV	R_COD,DI
	CMP	WORD PTR [DI],OFFSET MINCODE:B_CDC
	JNE	SHORT LCNT2	; (Jump shortened)
	MOV	CX,STXOC
	CMP	CX,STXOF
	JAE	SHORT LCNT4	; (Jump shortened)
LCNT2:	ADD	DI,STXOF
	MOV	REG_CP,DI
	MOV	SP,FLPTR
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
LCNT3:	INC	ERRFT
	CALL	ERR_0
	DB	037
LCNT4:	INC	ERRFT
	CALL	ERR_1
	DB	76
	EVEN
	NOP
L_END:
LEND0:	MOV	DI,OFFSET MINDATA:ENDMS
	JMP	STOPR
	EVEN
	NOP
L_FRT:
	MOV	CX,OFFSET MINDATA:SCFRT
	JMP	RETRN
	EVEN
	NOP
L_NRT:
	MOV	CX,OFFSET MINDATA:SCNRT
	JMP	RETRN
	EVEN
	NOP
L_RTN:
	MOV	CX,OFFSET MINDATA:SCRTN
	JMP	RETRN
	EVEN
	NOP
L_SCN:
	MOV	DI,R_CNT
	OR	DI,DI
	JZ	SHORT LSCN2	; (Jump shortened)
	XOR	AX,AX
	MOV	R_CNT,AX
	CMP	KVERT,NM320
	JNE	SHORT LSCN1	; (Jump shortened)
	CMP	KVERT,NM321
	JE	SHORT LSCN2	; (Jump shortened)
	MOV	R_COD,DI
	ADD	DI,STXOC
	MOV	REG_CP,DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
LSCN1:	INC	ERRFT
	CALL	ERR_1
	DB	75
LSCN2:	INC	ERRFT
	CALL	ERR_1
	DB	65
	EVEN
	NOP
L_UND:
	CALL	ERR_0
	DB	038
	SUBTTL	S P I T B O L -- PREDEFINED SNOBOL4 FUNCTIONS
	EVEN
	NOP
S_ANY:
	MOV	BX,OFFSET MINCODE:P_ANS
	MOV	SI,OFFSET MINCODE:P_ANY
	MOV	DX,OFFSET MINCODE:P_AYD
	CALL	PATST
	DW	ERR_-059
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
S_APP:
	OR	CX,CX
	JZ	SHORT SAPP3	; (Jump shortened)
	DEC	CX
	MOV	BX,CX
	SAL	BX,1
	MOV	SI,SP
	ADD	SI,BX
	MOV	DI,WORD PTR [SI]
	OR	CX,CX
	JZ	SHORT SAPP2	; (Jump shortened)
	MOV	BX,CX
SAPP1:	DEC	SI
	DEC	SI
	MOV	AX,WORD PTR [SI]
	MOV	WORD PTR [2*1+SI],AX
	DEC	BX
	JNZ	SAPP1
SAPP2:	POP	AX
	EVEN
	CALL	GTNVR
	DW	SAPP3
	MOV	SI,WORD PTR [2*VRFNC+DI]
	JMP	CFUNC
SAPP3:	CALL	ERR_0
	DB	060
	EVEN
	NOP
S_ABN:
	XOR	DI,DI
	MOV	BX,OFFSET MINCODE:P_ALT
	EVEN
	CALL	PBILD
	MOV	SI,DI
	MOV	BX,OFFSET MINCODE:P_ABC
	XOR	DI,DI
	EVEN
	CALL	PBILD
	MOV	WORD PTR [2*PTHEN+DI],SI
	MOV	CX,SI
	MOV	SI,DI
	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
;	 MOV  BP,SP	; (Redundant)
	MOV	WORD PTR [BP],CX
	EVEN
	CALL	GTPAT
	DW	ERR_-061
	EVEN
	CALL	PCONC
	MOV	SI,DI
	MOV	BX,OFFSET MINCODE:P_ABA
	XOR	DI,DI
	EVEN
	CALL	PBILD
	MOV	WORD PTR [2*PTHEN+DI],SI
	MOV	BP,SP
	MOV	SI,WORD PTR [BP]
	MOV	WORD PTR [2*PARM1+SI],DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
S_ARG:
	CALL	GTSMI
	DW	ERR_-062
	DW	EXFAL
	MOV	CX,DI
	POP	DI
	EVEN
	CALL	GTNVR
	DW	SARG1
	MOV	DI,WORD PTR [2*VRFNC+DI]
	CMP	WORD PTR [DI],OFFSET MINCODE:B_PFC
	JNE	SHORT SARG1	; (Jump shortened)
	OR	CX,CX
	JZ	EXFAL
	CMP	CX,WORD PTR [2*FARGS+DI]
	JA	EXFAL
	SAL	CX,1
	ADD	DI,CX
	MOV	DI,WORD PTR [2*PFAGB+DI]
	JMP	EXVNM
SARG1:	CALL	ERR_0
	DB	063
	EVEN
	NOP
S_ARR:
	POP	SI
	POP	DI
	EVEN
	CALL	GTINT
	DW	SAR02
	MOV	DX,WORD PTR WORD PTR [2*ICVAL+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+DI]
	MOV	WORD PTR REG_IA,AX
	OR	DX,DX
	JG	SHORT L0002
	JL	SAR10
	CMP	WORD PTR REG_IA,0
	JE	SAR10
L0002	LABEL	NEAR
	OR	DX,DX
	JNE	SAR11
	MOV	CX,WORD PTR REG_IA
	OR	CX,CX
	JL	SAR11
	EVEN
	CALL	VMAKE
	DW	SAR11
	JMP	EXSID
SAR02:	PUSH	DI
	CALL	XSCNI
	DW	ERR_-064
	DW	EXNUL
	PUSH	R_XSC
	PUSH	SI
	XOR	AX,AX
	MOV	ARCDM,AX
	XOR	AX,AX
	MOV	ARPTR,AX
	MOV	DX,WORD PTR INTV1+2
	MOV	AX,WORD PTR INTV1
	MOV	WORD PTR REG_IA,AX
	MOV	WORD PTR ARNEL+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR ARNEL,AX
SAR03:	MOV	DX,WORD PTR INTV1+2
	MOV	AX,WORD PTR INTV1
	MOV	WORD PTR REG_IA,AX
	MOV	WORD PTR ARSVL+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR ARSVL,AX
	MOV	DX,CH_CL
	MOV	SI,CH_CM
	XOR	CX,CX
	EVEN
	CALL	XSCAN
	CMP	CX,NUM01
	JNE	SHORT SAR04	; (Jump shortened)
	EVEN
	CALL	GTINT
	DW	ERR_-065
	MOV	DX,WORD PTR WORD PTR [2*ICVAL+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+DI]
	MOV	WORD PTR REG_IA,AX
	MOV	WORD PTR ARSVL+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR ARSVL,AX
	MOV	DX,CH_CM
	MOV	SI,DX
	XOR	CX,CX
	EVEN
	CALL	XSCAN
SAR04:
	EVEN
	CALL	GTINT
	DW	ERR_-066
	MOV	DX,WORD PTR WORD PTR [2*ICVAL+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+DI]
	MOV	WORD PTR REG_IA,AX
	MOV	AX,WORD PTR ARSVL
	SUB	WORD PTR REG_IA,AX
	SBB	DX,WORD PTR ARSVL+2
	JO	SAR10
	OR	DX,DX
	JL	SAR10
	MOV	AX,WORD PTR INTV1
	ADD	WORD PTR REG_IA,AX
	ADC	DX,WORD PTR INTV1+2
	JO	SAR10
	MOV	SI,ARPTR
	OR	SI,SI
	JZ	SHORT SAR05	; (Jump shortened)
	MOV	BP,SP
	ADD	SI,WORD PTR [BP]
	MOV	WORD PTR WORD PTR [2*CFP_I+SI]+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR WORD PTR [2*CFP_I+SI],AX
	MOV	DX,WORD PTR ARSVL+2
	MOV	AX,WORD PTR ARSVL
	MOV	WORD PTR REG_IA,AX
	MOV	WORD PTR WORD PTR [SI]+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR WORD PTR [SI],AX
	ADD	ARPTR,2*ARDMS
	JMP	SHORT SAR06	; (Jump shortened)
SAR05:	INC	ARCDM
	MOV	BP,OFFSET MINDATA:ARNEL
	CALL	MLI_
	JO	SAR11
	MOV	WORD PTR ARNEL+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR ARNEL,AX
SAR06:	OR	CX,CX
	JNZ	SAR03
	CMP	ARPTR,0
	JNZ	SHORT SAR09	; (Jump shortened)
	MOV	DX,WORD PTR ARNEL+2
	MOV	AX,WORD PTR ARNEL
	MOV	WORD PTR REG_IA,AX
	OR	DX,DX
	JNE	SHORT SAR11	; (Jump shortened)
	MOV	BX,WORD PTR REG_IA
	OR	BX,BX
	JL	SHORT SAR11	; (Jump shortened)
	SAL	BX,1
	MOV	CX,2*ARSI_
	MOV	DX,ARCDM
SAR07:	ADD	CX,2*ARDMS
	DEC	DX
	JNZ	SAR07
	MOV	SI,CX
	ADD	CX,BX
	INC	CX
	INC	CX
	CMP	CX,MXLEN
	JA	SHORT SAR11	; (Jump shortened)
	EVEN
	CALL	ALLOC
	MOV	BP,SP
	MOV	BX,WORD PTR [BP]
;	 MOV  BP,SP	; (Redundant)
	MOV	WORD PTR [BP],DI
	MOV	DX,CX
	SHR	CX,1
SAR08:	MOV	AX,BX
	STOSW
	LOOP	SAR08
	POP	DI
	MOV	BP,SP
	MOV	BX,WORD PTR [BP]
	MOV	WORD PTR [DI],OFFSET MINCODE:B_ART
	MOV	WORD PTR [2*ARLEN+DI],DX
	XOR	AX,AX
	MOV	WORD PTR [2*IDVAL+DI],AX
	MOV	WORD PTR [2*AROFS+DI],SI
	MOV	AX,ARCDM
	MOV	WORD PTR [2*ARNDM+DI],AX
	MOV	DX,DI
	ADD	DI,SI
	MOV	WORD PTR [DI],BX
	MOV	ARPTR,2*ARLBD
	MOV	R_XSC,BX
;	 MOV  BP,SP	; (Redundant)
	MOV	WORD PTR [BP],DX
	XOR	AX,AX
	MOV	XSOFS,AX
	JMP	SAR03
SAR09:	POP	DI
	JMP	EXSID
SAR10:	CALL	ERR_0
	DB	067
SAR11:	CALL	ERR_0
	DB	068
	EVEN
	NOP
S_ATN:
	POP	DI
	EVEN
	CALL	GTREA
	DW	ERR_-301
	LEA	BP,WORD PTR [2*RCVAL+DI]
	CALL	LDR_
	CALL	ATN_
	JMP	EXREA
	EVEN
	NOP
S_BSP:
	CALL	IOFCB
	DW	ERR_-316
	DW	ERR_-316
	DW	ERR_-317
	EVEN
	CALL	SYSBS
	DW	ERR_-317
	DW	ERR_-318
	DW	ERR_-319
	JMP	EXNUL
	EVEN
	NOP
S_BRK:
	MOV	BX,OFFSET MINCODE:P_BKS
	MOV	SI,OFFSET MINCODE:P_BRK
	MOV	DX,OFFSET MINCODE:P_BKD
	CALL	PATST
	DW	ERR_-069
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
S_BKX:
	MOV	BX,OFFSET MINCODE:P_BKS
	MOV	SI,OFFSET MINCODE:P_BRK
	MOV	DX,OFFSET MINCODE:P_BXD
	CALL	PATST
	DW	ERR_-070
	PUSH	DI
	MOV	BX,OFFSET MINCODE:P_BKX
	EVEN
	CALL	PBILD
	MOV	BP,SP
	MOV	AX,WORD PTR [BP]
	MOV	WORD PTR [2*PTHEN+DI],AX
	MOV	BX,OFFSET MINCODE:P_ALT
	EVEN
	CALL	PBILD
	MOV	CX,DI
	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
	MOV	WORD PTR [2*PTHEN+DI],CX
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
S_CHR:
	CALL	GTSMI
	DW	ERR_-281
	DW	SCHR1
	CMP	DX,CFP_A
	JAE	SHORT SCHR1	; (Jump shortened)
	MOV	CX,NUM01
	MOV	BX,DX
	EVEN
	CALL	ALOCS
	MOV	SI,DI
	ADD	SI,CFP_F
	MOV	[SI],BL
	XOR	SI,SI
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
SCHR1:	CALL	ERR_1
	DB	26
	EVEN
	NOP
S_CHP:
	POP	DI
	EVEN
	CALL	GTREA
	DW	ERR_-302
	LEA	BP,WORD PTR [2*RCVAL+DI]
	CALL	LDR_
	CALL	CHP_
	JMP	EXREA
	EVEN
	NOP
S_CLR:
	CALL	XSCNI
	DW	ERR_-071
	DW	SCLR2
SCLR1:	MOV	DX,CH_CM
	MOV	SI,DX
	MOV	CX,SP
	EVEN
	CALL	XSCAN
	EVEN
	CALL	GTNVR
	DW	ERR_-072
	XOR	AX,AX
	MOV	WORD PTR [2*VRGET+DI],AX
	OR	CX,CX
	JNZ	SCLR1
SCLR2:	MOV	BX,HSHTB
SCLR3:	CMP	BX,HSHTE
	JE	EXNUL
	MOV	DI,BX
	INC	BX
	INC	BX
	SUB	DI,2*VRNXT
SCLR4:	MOV	DI,WORD PTR [2*VRNXT+DI]
	OR	DI,DI
	JZ	SCLR3
	CMP	WORD PTR [2*VRGET+DI],0
	JNZ	SHORT SCLR5	; (Jump shortened)
	EVEN
	CALL	SETVR
	JMP	SCLR4
SCLR5:	CMP	WORD PTR [2*VRSTO+DI],OFFSET MINCODE:B_VRE
	JE	SCLR4
	MOV	SI,DI
SCLR6:	MOV	CX,SI
	MOV	SI,WORD PTR [2*VRVAL+SI]
	CMP	WORD PTR [SI],OFFSET MINCODE:B_TRT
	JE	SCLR6
	MOV	SI,CX
	MOV	WORD PTR [2*VRVAL+SI],OFFSET MINDATA:NULLS
	JMP	SCLR4
	EVEN
	NOP
S_COD:
	POP	DI
	EVEN
	CALL	GTCOD
	DW	EXFAL
	PUSH	DI
	XOR	AX,AX
	MOV	R_CCB,AX
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
S_COL:
	POP	DI
	EVEN
	CALL	GTINT
	DW	ERR_-073
	MOV	DX,WORD PTR WORD PTR [2*ICVAL+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+DI]
	MOV	WORD PTR REG_IA,AX
	MOV	WORD PTR CLSVI+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR CLSVI,AX
	XOR	BX,BX
	XOR	AX,AX
	MOV	R_CCB,AX
	EVEN
	CALL	GBCOL
	MOV	CX,DNAME
	SUB	CX,DNAMP
	SHR	CX,1
	MOV	WORD PTR REG_IA,CX
	XOR	DX,DX
	MOV	AX,WORD PTR CLSVI
	SUB	WORD PTR REG_IA,AX
	SBB	DX,WORD PTR CLSVI+2
	JO	EXFAL
	OR	DX,DX
	JL	EXFAL
	MOV	AX,WORD PTR CLSVI
	ADD	WORD PTR REG_IA,AX
	ADC	DX,WORD PTR CLSVI+2
	JMP	EXINT
	EVEN
	NOP
S_CNV:
	CALL	GTSTG
	DW	SCV29
	OR	CX,CX
	JZ	SCV29
	EVEN
	CALL	FLSTG
	MOV	BP,SP
	MOV	SI,WORD PTR [BP]
	CMP	WORD PTR [SI],OFFSET MINCODE:B_PDT
	JNE	SHORT SCV01	; (Jump shortened)
	MOV	SI,WORD PTR [2*PDDFP+SI]
	MOV	SI,WORD PTR [2*DFNAM+SI]
	EVEN
	CALL	IDENT
	DW	EXITS
	JMP	EXFAL
SCV01:	PUSH	DI
	MOV	SI,OFFSET MINDATA:SVCTB
	XOR	BX,BX
	MOV	DX,CX
SCV02:	LODSW
	MOV	DI,AX
	OR	DI,DI
	JZ	EXFAL
	CMP	DX,WORD PTR [2*SCLEN+DI]
	JNE	SHORT SCV05	; (Jump shortened)
	MOV	CNVTP,SI
	ADD	DI,CFP_F
	MOV	BP,SP
	MOV	SI,WORD PTR [BP]
	ADD	SI,CFP_F
	MOV	CX,DX
	REPE	CMPSB
	MOV	SI,0
	MOV	DI,SI
	JNZ	SHORT SCV04	; (Jump shortened)
SCV03:	MOV	SI,BX
	POP	AX
	POP	DI
	SHL	SI,1
	JMP	CS:WORD PTR L0003[SI]
L0003	LABEL	WORD
	DW	OFFSET MINCODE:SCV06
	DW	OFFSET MINCODE:SCV07
	DW	OFFSET MINCODE:SCV09
	DW	OFFSET MINCODE:SCV10
	DW	OFFSET MINCODE:SCV11
	DW	OFFSET MINCODE:SCV19
	DW	OFFSET MINCODE:SCV25
	DW	OFFSET MINCODE:SCV26
	DW	OFFSET MINCODE:SCV27
	DW	OFFSET MINCODE:SCV08
SCV04:	MOV	SI,CNVTP
SCV05:	INC	BX
	JMP	SCV02
SCV06:	PUSH	DI
	CALL	GTSTG
	DW	EXFAL
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
SCV07:
	EVEN
	CALL	GTINT
	DW	EXFAL
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
SCV08:
	EVEN
	CALL	GTREA
	DW	EXFAL
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
SCV09:	CMP	WORD PTR [DI],OFFSET MINCODE:B_NML
	JE	EXIXR
	EVEN
	CALL	GTNVR
	DW	EXFAL
	JMP	EXVNM
SCV10:
	EVEN
	CALL	GTPAT
	DW	EXFAL
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
SCV11:	PUSH	DI
	XOR	CX,CX
	EVEN
	CALL	GTARR
	DW	EXFAL
	DW	EXFAL
	POP	SI
	CMP	WORD PTR [SI],OFFSET MINCODE:B_TBT
	JNE	EXSID
	PUSH	DI
	MOV	AX,OFFSET MINDATA:NULLS
	PUSH	AX
	XOR	CX,CX
	CALL	SORTA
	DW	EXFAL
	MOV	BX,DI
	MOV	DX,WORD PTR WORD PTR [2*ARDIM+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*ARDIM+DI]
	MOV	WORD PTR REG_IA,AX
	MOV	CX,WORD PTR REG_IA
	ADD	DI,2*ARVL2
SCV12:	MOV	SI,WORD PTR [DI]
	MOV	AX,WORD PTR [2*TESUB+SI]
	STOSW
	MOV	AX,WORD PTR [2*TEVAL+SI]
	STOSW
	LOOP	SCV12
	MOV	DI,BX
	JMP	EXSID
SCV19:	MOV	CX,WORD PTR [DI]
	PUSH	DI
	CMP	CX,OFFSET MINCODE:B_TBT
	JE	EXITS
	CMP	CX,OFFSET MINCODE:B_ART
	JNE	EXFAL
	CMP	WORD PTR [2*ARNDM+DI],NUM02
	JNE	EXFAL
	MOV	DX,WORD PTR WORD PTR [2*ARDM2+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*ARDM2+DI]
	MOV	WORD PTR REG_IA,AX
	MOV	AX,WORD PTR INTV2
	SUB	WORD PTR REG_IA,AX
	SBB	DX,WORD PTR INTV2+2
	MOV	AX,WORD PTR REG_IA
	OR	AX,DX
	JNE	EXFAL
	MOV	DX,WORD PTR WORD PTR [2*ARDIM+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*ARDIM+DI]
	MOV	WORD PTR REG_IA,AX
	MOV	CX,WORD PTR REG_IA
	MOV	BX,CX
	ADD	CX,TBSI_
	SAL	CX,1
	EVEN
	CALL	ALLOC
	MOV	DX,DI
	PUSH	DI
	MOV	AX,OFFSET MINCODE:B_TBT
	STOSW
	XOR	AX,AX
	STOSW
	MOV	AX,CX
	STOSW
	MOV	AX,OFFSET MINDATA:NULLS
	STOSW
SCV20:	MOV	AX,DX
	STOSW
	DEC	BX
	JNZ	SCV20
	MOV	BX,2*ARVL2
SCV21:	MOV	BP,SP
	MOV	SI,WORD PTR [2*1+BP]
	CMP	BX,WORD PTR [2*ARLEN+SI]
	JE	SHORT SCV24	; (Jump shortened)
	ADD	SI,BX
	ADD	BX,2*NUM02
	MOV	DI,WORD PTR [SI]
	DEC	SI
	DEC	SI
SCV22:	MOV	SI,WORD PTR [2*TRVAL+SI]
	CMP	WORD PTR [SI],OFFSET MINCODE:B_TRT
	JE	SCV22
SCV23:	PUSH	SI
	MOV	BP,SP
	MOV	SI,WORD PTR [2*1+BP]
	EVEN
	CALL	TFIND
	DW	EXFAL
	POP	WORD PTR [2*TEVAL+SI]
	JMP	SCV21
SCV24:	POP	DI
	POP	AX
	JMP	EXSID
SCV25:	XOR	BX,BX
	EVEN
	CALL	GTEXP
	DW	EXFAL
	XOR	AX,AX
	MOV	R_CCB,AX
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
SCV26:
	EVEN
	CALL	GTCOD
	DW	EXFAL
	XOR	AX,AX
	MOV	R_CCB,AX
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
SCV27:
	EVEN
	CALL	GTNUM
	DW	EXFAL
SCV31:	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
SCV29:	CALL	ERR_0
	DB	074
	EVEN
	NOP
S_COP:
	CALL	COPYB
	DW	EXITS
	JMP	EXSID
	EVEN
	NOP
S_COS:
	POP	DI
	EVEN
	CALL	GTREA
	DW	ERR_-303
	LEA	BP,WORD PTR [2*RCVAL+DI]
	CALL	LDR_
	CALL	COS_
	CALL	OVR_
	JZ	EXREA
	CALL	ERR_1
	DB	66
	EVEN
	NOP
S_DAT:
	CALL	XSCNI
	DW	ERR_-075
	DW	ERR_-076
	MOV	DX,CH_PP
	MOV	SI,DX
	MOV	CX,SP
	EVEN
	CALL	XSCAN
	OR	CX,CX
	JNZ	SHORT SDAT1	; (Jump shortened)
	CALL	ERR_0
	DB	077
SDAT1:	MOV	CX,WORD PTR [2*SCLEN+DI]
	OR	CX,CX
	JZ	SHORT SDT1A	; (Jump shortened)
	EVEN
	CALL	FLSTG
SDT1A:	MOV	SI,DI
	MOV	CX,WORD PTR [2*SCLEN+DI]
	ADD	CX,1+2*SCSI_
	AND	CX,-2
	EVEN
	CALL	ALOST
	PUSH	DI
	SHR	CX,1
	REP	MOVSW
	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
	XOR	SI,SI
	EVEN
	CALL	GTNVR
	DW	ERR_-078
	MOV	DATDV,DI
	MOV	DATXS,SP
	XOR	BX,BX
SDAT2:	MOV	DX,CH_RP
	MOV	SI,CH_CM
	MOV	CX,SP
	EVEN
	CALL	XSCAN
	OR	CX,CX
	JNZ	SHORT SDAT3	; (Jump shortened)
	CALL	ERR_0
	DB	079
SDAT3:
	EVEN
	CALL	GTNVR
	DW	ERR_-080
	PUSH	DI
	INC	BX
	CMP	CX,NUM02
	JE	SDAT2
	MOV	CX,DFSI_
	ADD	CX,BX
	SAL	CX,1
	MOV	DX,BX
	EVEN
	CALL	ALOST
	MOV	BX,DX
	MOV	SI,DATXS
	MOV	DX,WORD PTR [SI]
	MOV	WORD PTR [SI],DI
	MOV	AX,OFFSET MINCODE:B_DFC
	STOSW
	MOV	AX,BX
	STOSW
	MOV	AX,CX
	STOSW
	SUB	CX,2*PDDFS
	MOV	AX,CX
	STOSW
	MOV	AX,DX
	STOSW
	MOV	DX,BX
SDAT4:	DEC	SI
	DEC	SI
	MOV	AX,WORD PTR [SI]
	STOSW
	DEC	DX
	JNZ	SDAT4
	MOV	DX,CX
	MOV	DI,DATDV
	MOV	SI,DATXS
	MOV	SI,WORD PTR [SI]
	EVEN
	CALL	DFFNC
SDAT5:	MOV	CX,2*FFSI_
	EVEN
	CALL	ALLOC
	MOV	WORD PTR [DI],OFFSET MINCODE:B_FFC
	MOV	WORD PTR [2*FARGS+DI],NUM01
	MOV	SI,DATXS
	MOV	AX,WORD PTR [SI]
	MOV	WORD PTR [2*FFDFP+DI],AX
	DEC	DX
	DEC	DX
	MOV	WORD PTR [2*FFOFS+DI],DX
	XOR	AX,AX
	MOV	WORD PTR [2*FFNXT+DI],AX
	MOV	SI,DI
	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
	MOV	DI,WORD PTR [2*VRFNC+DI]
	CMP	WORD PTR [DI],OFFSET MINCODE:B_FFC
	JNE	SHORT SDAT6	; (Jump shortened)
	MOV	WORD PTR [2*FFNXT+SI],DI
SDAT6:	POP	DI
	EVEN
	CALL	DFFNC
	CMP	SP,DATXS
	JNE	SDAT5
	POP	AX
	JMP	EXNUL
	EVEN
	NOP
S_DTP:
	POP	DI
	EVEN
	CALL	DTYPE
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
S_DTE:
	POP	DI
	EVEN
	CALL	GTINT
	DW	ERR_-330
	EVEN
	CALL	SYSDT
	MOV	CX,WORD PTR [2*1+SI]
	OR	CX,CX
	JZ	EXNUL
	XOR	BX,BX
	EVEN
	CALL	SBSTR
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
S_DEF:
	POP	DI
	XOR	AX,AX
	MOV	DEFLB,AX
	CMP	DI,OFFSET MINDATA:NULLS
	JE	SHORT SDF01	; (Jump shortened)
	EVEN
	CALL	GTNVR
	DW	SDF12
	MOV	DEFLB,DI
SDF01:	CALL	XSCNI
	DW	ERR_-081
	DW	ERR_-082
	MOV	DX,CH_PP
	MOV	SI,DX
	MOV	CX,SP
	EVEN
	CALL	XSCAN
	OR	CX,CX
	JNZ	SHORT SDF02	; (Jump shortened)
	CALL	ERR_0
	DB	083
SDF02:
	EVEN
	CALL	GTNVR
	DW	ERR_-084
	MOV	DEFVR,DI
	XOR	BX,BX
	MOV	DEFXS,SP
	CMP	DEFLB,0
	JNZ	SHORT SDF03	; (Jump shortened)
	MOV	DEFLB,DI
SDF03:	MOV	DX,CH_RP
	MOV	SI,CH_CM
	MOV	CX,SP
	EVEN
	CALL	XSCAN
	OR	CX,CX
	JNZ	SHORT SDF04	; (Jump shortened)
	CALL	ERR_0
	DB	085
SDF04:	CMP	DI,OFFSET MINDATA:NULLS
	JNE	SHORT SDF05	; (Jump shortened)
	OR	BX,BX
	JZ	SHORT SDF06	; (Jump shortened)
SDF05:
	EVEN
	CALL	GTNVR
	DW	SDF03
	PUSH	DI
	INC	BX
	CMP	CX,NUM02
	JE	SDF03
SDF06:	MOV	DEFNA,BX
	XOR	BX,BX
SDF07:	MOV	DX,CH_CM
	MOV	SI,DX
	MOV	CX,SP
	EVEN
	CALL	XSCAN
	CMP	DI,OFFSET MINDATA:NULLS
	JNE	SHORT SDF08	; (Jump shortened)
	OR	CX,CX
	JZ	SHORT SDF09	; (Jump shortened)
SDF08:
	EVEN
	CALL	GTNVR
	DW	SDF07
	INC	BX
	PUSH	DI
	OR	CX,CX
	JNZ	SDF07
SDF09:	MOV	CX,BX
	ADD	CX,DEFNA
	MOV	DX,CX
	ADD	CX,PFSI_
	SAL	CX,1
	EVEN
	CALL	ALLOC
	MOV	SI,DI
	MOV	AX,OFFSET MINCODE:B_PFC
	STOSW
	MOV	AX,DEFNA
	STOSW
	MOV	AX,CX
	STOSW
	MOV	AX,DEFVR
	STOSW
	MOV	AX,BX
	STOSW
	XOR	AX,AX
	STOSW
	XOR	AX,AX
	STOSW
	XOR	AX,AX
	STOSW
	OR	DX,DX
	JZ	SHORT SDF11	; (Jump shortened)
	MOV	CX,SI
	MOV	SI,DEFXS
SDF10:	DEC	SI
	DEC	SI
	MOV	AX,WORD PTR [SI]
	STOSW
	DEC	DX
	JNZ	SDF10
	MOV	SI,CX
SDF11:	MOV	SP,DEFXS
	MOV	AX,DEFLB
	MOV	WORD PTR [2*PFCOD+SI],AX
	MOV	DI,DEFVR
	EVEN
	CALL	DFFNC
	JMP	EXNUL
SDF12:	CALL	ERR_0
	DB	086
	EVEN
	NOP
S_DET:
	POP	DI
	EVEN
	CALL	GTVAR
	DW	ERR_-087
	EVEN
	CALL	DTACH
	JMP	EXNUL
	EVEN
	NOP
S_DIF:
	POP	DI
	POP	SI
	EVEN
	CALL	IDENT
	DW	EXFAL
	JMP	EXNUL
	EVEN
	NOP
S_DMP:
	CALL	GTSMI
	DW	ERR_-088
	DW	ERR_-089
	EVEN
	CALL	DUMPR
	JMP	EXNUL
	EVEN
	NOP
S_DUP:
	CALL	GTSMI
	DW	ERR_-090
	DW	SDUP7
	MOV	BX,DI
	CALL	GTSTG
	DW	SDUP4
	MOV	WORD PTR REG_IA,CX
	XOR	DX,DX
	MOV	WORD PTR DUPSI+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR DUPSI,AX
	MOV	WORD PTR REG_IA,BX
	XOR	DX,DX
	MOV	BP,OFFSET MINDATA:DUPSI
	CALL	MLI_
	JO	SHORT SDUP3	; (Jump shortened)
	MOV	AX,WORD PTR REG_IA
	OR	AX,DX
	JE	EXNUL
	OR	DX,DX
	JNE	SHORT SDUP3	; (Jump shortened)
	MOV	CX,WORD PTR REG_IA
	OR	CX,CX
	JL	SHORT SDUP3	; (Jump shortened)
SDUP1:	MOV	SI,DI
	EVEN
	CALL	ALOCS
	PUSH	DI
	MOV	DX,SI
	ADD	DI,CFP_F
SDUP2:	MOV	SI,DX
	MOV	CX,WORD PTR [2*SCLEN+SI]
	ADD	SI,CFP_F
	SHR	CX,1
	REP	MOVSW
	ADC	CX,CX
	REP	MOVSB
	DEC	BX
	JNZ	SDUP2
	XOR	SI,SI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
SDUP3:	MOV	CX,DNAME
	JMP	SDUP1
SDUP4:
	EVEN
	CALL	GTPAT
	DW	ERR_-091
	PUSH	DI
	MOV	DI,OFFSET MINDATA:NDNTH
	OR	BX,BX
	JZ	SHORT SDUP6	; (Jump shortened)
	PUSH	BX
SDUP5:	MOV	SI,DI
	MOV	BP,SP
	MOV	DI,WORD PTR [2*1+BP]
	EVEN
	CALL	PCONC
	MOV	BP,SP
	DEC	WORD PTR [BP]
;	 MOV  BP,SP	; (Redundant)
;	CMP	WORD PTR [BP],0	(Optimized)
	JNZ	SDUP5
	POP	AX
SDUP6:	MOV	BP,SP
	MOV	WORD PTR [BP],DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
SDUP7:	POP	AX
	JMP	EXFAL
	EVEN
	NOP
S_EJC:
	CALL	IOFCB
	DW	ERR_-092
	DW	SEJC1
	DW	ERR_-093
	EVEN
	CALL	SYSEF
	DW	ERR_-093
	DW	ERR_-094
	DW	ERR_-095
	JMP	EXNUL
SEJC1:
	EVEN
	CALL	SYSEP
	JMP	EXNUL
	EVEN
	NOP
S_ENF:
	CALL	IOFCB
	DW	ERR_-096
	DW	ERR_-097
	DW	ERR_-098
	EVEN
	CALL	SYSEN
	DW	ERR_-098
	DW	ERR_-099
	DW	ERR_-100
	MOV	BX,SI
	MOV	DI,SI
SENF1:	MOV	SI,DI
	MOV	DI,WORD PTR [2*TRVAL+DI]
	CMP	WORD PTR [DI],OFFSET MINCODE:B_TRT
	JNE	EXNUL
	CMP	WORD PTR [2*TRTYP+DI],TRTFC
	JNE	SENF1
	MOV	AX,WORD PTR [2*TRVAL+DI]
	MOV	WORD PTR [2*TRVAL+SI],AX
	MOV	AX,WORD PTR [2*TRTRF+DI]
	MOV	ENFCH,AX
	MOV	DX,WORD PTR [2*TRFPT+DI]
	MOV	DI,BX
	EVEN
	CALL	SETVR
	MOV	SI,OFFSET MINDATA:R_FCB
	SUB	SI,2*NUM02
SENF2:	MOV	DI,SI
	MOV	SI,WORD PTR [2*2+SI]
	OR	SI,SI
	JZ	SHORT SENF4	; (Jump shortened)
	CMP	WORD PTR [2*3+SI],DX
	JE	SHORT SENF3	; (Jump shortened)
	JMP	SENF2
SENF3:	MOV	AX,WORD PTR [2*2+SI]
	MOV	WORD PTR [2*2+DI],AX
SENF4:	MOV	SI,ENFCH
	OR	SI,SI
	JZ	EXNUL
	MOV	AX,WORD PTR [2*TRTRF+SI]
	MOV	ENFCH,AX
	MOV	CX,WORD PTR [2*IONMO+SI]
	MOV	SI,WORD PTR [2*IONMB+SI]
	EVEN
	CALL	DTACH
	JMP	SENF4
	EVEN
	NOP
S_EQF:
	CALL	ACOMP
	DW	ERR_-101
	DW	ERR_-102
	DW	EXFAL
	DW	EXNUL
	DW	EXFAL
	EVEN
	NOP
S_EVL:
	POP	DI
	MOV	BP,REG_CP
	MOV	DX,[BP]
	ADD	REG_CP,2
	CMP	DX,OFFSET MINDATA:OFNE_
	JNE	SHORT SEVL1	; (Jump shortened)
	MOV	SI,REG_CP
	MOV	CX,WORD PTR [SI]
	CMP	CX,OFFSET MINDATA:ORNM_
	JNE	SHORT SEVL2	; (Jump shortened)
	MOV	BP,SP
	CMP	WORD PTR [2*1+BP],0
	JNZ	SHORT SEVL2	; (Jump shortened)
SEVL1:	XOR	BX,BX
	PUSH	DX
	EVEN
	CALL	GTEXP
	DW	ERR_-103
	XOR	AX,AX
	MOV	R_CCB,AX
	XOR	BX,BX
	EVEN
	CALL	EVALX
	DW	EXFAL
	MOV	SI,DI
	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
;	 MOV  BP,SP	; (Redundant)
	MOV	WORD PTR [BP],SI
	JMP	WORD PTR [DI]
SEVL2:	MOV	BX,NUM01
	EVEN
	CALL	GTEXP
	DW	ERR_-103
	XOR	AX,AX
	MOV	R_CCB,AX
	MOV	BX,NUM01
	EVEN
	CALL	EVALX
	DW	EXFAL
	JMP	EXNAM
	EVEN
	NOP
S_EXT:
	XOR	BX,BX
	XOR	AX,AX
	MOV	R_CCB,AX
	EVEN
	CALL	GBCOL
	CALL	GTSTG
	DW	ERR_-288
	MOV	SI,DI
	CALL	GTSTG
	DW	ERR_-104
	PUSH	SI
	MOV	SI,DI
	EVEN
	CALL	GTINT
	DW	SEXT1
	XOR	SI,SI
	MOV	DX,WORD PTR WORD PTR [2*ICVAL+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+DI]
	MOV	WORD PTR REG_IA,AX
SEXT1:	MOV	BX,R_FCB
	MOV	DI,OFFSET MINDATA:HEADV
	POP	CX
	EVEN
	CALL	SYSXI
	DW	ERR_-105
	DW	ERR_-106
	MOV	AX,WORD PTR REG_IA
	OR	AX,DX
	JE	EXNUL
	OR	DX,DX
	JL	SHORT L0004
	JG	SHORT SEXT2	; (Jump shortened)
	CMP	WORD PTR REG_IA,0
	JNE	SHORT SEXT2	; (Jump shortened)
L0004	LABEL	NEAR
	NOT	DX
	NEG	WORD PTR REG_IA
	SBB	DX,-1
SEXT2:	MOV	DX,WORD PTR REG_IA
	ADD	CX,DX
	CMP	CX,NUM05
	JE	SHORT SEXT5	; (Jump shortened)
	XOR	AX,AX
	MOV	GBCNT,AX
	CMP	DX,NUM03
	JAE	SHORT SEXT3	; (Jump shortened)
	PUSH	DX
	XOR	DX,DX
	EVEN
	CALL	PRPAR
	POP	DX
SEXT3:	MOV	HEADP,SP
	CMP	DX,NUM01
	JNE	SHORT SEXT4	; (Jump shortened)
	XOR	AX,AX
	MOV	HEADP,AX
SEXT4:
	EVEN
	CALL	SYSTM
	MOV	WORD PTR TIMSX+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR TIMSX,AX
	MOV	DX,WORD PTR KVSTC+2
	MOV	AX,WORD PTR KVSTC
	MOV	WORD PTR REG_IA,AX
	MOV	WORD PTR KVSTL+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR KVSTL,AX
	EVEN
	CALL	STGCC
	JMP	EXNUL
SEXT5:	MOV	DI,OFFSET MINDATA:INTON
	JMP	EXIXR
	EVEN
	NOP
S_EXP:
	POP	DI
	EVEN
	CALL	GTREA
	DW	ERR_-304
	LEA	BP,WORD PTR [2*RCVAL+DI]
	CALL	LDR_
	CALL	ETX_
	CALL	OVR_
	JZ	EXREA
	CALL	ERR_1
	DB	49
	EVEN
	NOP
S_FLD:
	CALL	GTSMI
	DW	ERR_-107
	DW	EXFAL
	MOV	BX,DI
	POP	DI
	EVEN
	CALL	GTNVR
	DW	SFLD1
	MOV	DI,WORD PTR [2*VRFNC+DI]
	CMP	WORD PTR [DI],OFFSET MINCODE:B_DFC
	JNE	SHORT SFLD1	; (Jump shortened)
	OR	BX,BX
	JZ	EXFAL
	CMP	BX,WORD PTR [2*FARGS+DI]
	JA	EXFAL
	SAL	BX,1
	ADD	DI,BX
	MOV	DI,WORD PTR [2*DFFLB+DI]
	JMP	EXVNM
SFLD1:	CALL	ERR_0
	DB	108
	EVEN
	NOP
S_FNC:
	MOV	BX,OFFSET MINCODE:P_FNC
	XOR	DI,DI
	EVEN
	CALL	PBILD
	MOV	SI,DI
	POP	DI
	EVEN
	CALL	GTPAT
	DW	ERR_-259
	EVEN
	CALL	PCONC
	MOV	SI,DI
	MOV	BX,OFFSET MINCODE:P_FNA
	XOR	DI,DI
	EVEN
	CALL	PBILD
	MOV	WORD PTR [2*PTHEN+DI],SI
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
S_GEF:
	CALL	ACOMP
	DW	ERR_-109
	DW	ERR_-110
	DW	EXFAL
	DW	EXNUL
	DW	EXNUL
	EVEN
	NOP
S_GTF:
	CALL	ACOMP
	DW	ERR_-111
	DW	ERR_-112
	DW	EXFAL
	DW	EXFAL
	DW	EXNUL
	EVEN
	NOP
S_HST:
	POP	DX
	POP	BX
	POP	DI
	POP	SI
	POP	CX
	EVEN
	CALL	SYSHS
	DW	ERR_-254
	DW	ERR_-255
	DW	SHST1
	DW	EXNUL
	DW	EXIXR
	DW	EXFAL
	DW	SHST3
	DW	SHST4
SHST1:	OR	SI,SI
	JZ	EXNUL
	MOV	CX,WORD PTR [2*SCLEN+SI]
	XOR	BX,BX
SHST2:
	EVEN
	CALL	SBSTR
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
SHST3:	XOR	BX,BX
	SUB	BX,CFP_F
	JMP	SHST2
SHST4:	PUSH	DI
	CALL	COPYB
	DW	EXITS
	JMP	EXSID
	EVEN
	NOP
S_IDN:
	POP	DI
	POP	SI
	EVEN
	CALL	IDENT
	DW	EXNUL
	JMP	EXFAL
	EVEN
	NOP
S_INP:
	XOR	BX,BX
	CALL	IOPUT
	DW	ERR_-113
	DW	ERR_-114
	DW	ERR_-115
	DW	ERR_-116
	DW	EXFAL
	DW	ERR_-117
	DW	ERR_-289
	JMP	EXNUL
	EVEN
	NOP
S_INT:
	POP	DI
	EVEN
	CALL	GTNUM
	DW	EXFAL
	CMP	CX,OFFSET MINCODE:B_ICL
	JE	EXNUL
	JMP	EXFAL
	EVEN
	NOP
S_ITM:
	OR	CX,CX
	JNZ	SHORT SITM1	; (Jump shortened)
	MOV	AX,OFFSET MINDATA:NULLS
	PUSH	AX
	MOV	CX,NUM01
SITM1:	MOV	DI,REG_CP
	MOV	SI,WORD PTR [DI]
	DEC	CX
	MOV	DI,CX
	CMP	SI,OFFSET MINDATA:OFNE_
	JE	SHORT SITM2	; (Jump shortened)
	XOR	BX,BX
	JMP	ARREF
SITM2:	MOV	BX,SP
	MOV	BP,REG_CP
	MOV	CX,[BP]
	ADD	REG_CP,2
	JMP	ARREF
	EVEN
	NOP
S_LEF:
	CALL	ACOMP
	DW	ERR_-118
	DW	ERR_-119
	DW	EXNUL
	DW	EXNUL
	DW	EXFAL
	EVEN
	NOP
S_LEN:
	MOV	BX,OFFSET MINCODE:P_LEN
	MOV	CX,OFFSET MINCODE:P_LND
	CALL	PATIN
	DW	ERR_-120
	DW	ERR_-121
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
S_LEQ:
	CALL	LCOMP
	DW	ERR_-122
	DW	ERR_-123
	DW	EXFAL
	DW	EXNUL
	DW	EXFAL
	EVEN
	NOP
S_LGE:
	CALL	LCOMP
	DW	ERR_-124
	DW	ERR_-125
	DW	EXFAL
	DW	EXNUL
	DW	EXNUL
	EVEN
	NOP
S_LGT:
	CALL	LCOMP
	DW	ERR_-126
	DW	ERR_-127
	DW	EXFAL
	DW	EXFAL
	DW	EXNUL
	EVEN
	NOP
S_LLE:
	CALL	LCOMP
	DW	ERR_-128
	DW	ERR_-129
	DW	EXNUL
	DW	EXNUL
	DW	EXFAL
	EVEN
	NOP
S_LLT:
	CALL	LCOMP
	DW	ERR_-130
	DW	ERR_-131
	DW	EXNUL
	DW	EXFAL
	DW	EXFAL
	EVEN
	NOP
S_LNE:
	CALL	LCOMP
	DW	ERR_-132
	DW	ERR_-133
	DW	EXNUL
	DW	EXFAL
	DW	EXNUL
	EVEN
	NOP
S_LNF:
	POP	DI
	EVEN
	CALL	GTREA
	DW	ERR_-306
	LEA	BP,WORD PTR [2*RCVAL+DI]
	CALL	LDR_
	CALL	CPR_
	JE	SHORT SLNF1	; (Jump shortened)
	CALL	CPR_
	JB	SHORT SLNF2	; (Jump shortened)
	CALL	LNF_
	CALL	OVR_
	JZ	EXREA
SLNF1:	CALL	ERR_1
	DB	51
SLNF2:	CALL	ERR_1
	DB	59
	EVEN
	NOP
S_LOC:
	CALL	GTSMI
	DW	ERR_-134
	DW	EXFAL
	MOV	BX,DI
	POP	DI
	EVEN
	CALL	GTNVR
	DW	SLOC1
	MOV	DI,WORD PTR [2*VRFNC+DI]
	CMP	WORD PTR [DI],OFFSET MINCODE:B_PFC
	JNE	SHORT SLOC1	; (Jump shortened)
	OR	BX,BX
	JZ	EXFAL
	CMP	BX,WORD PTR [2*PFNLO+DI]
	JA	EXFAL
	ADD	BX,WORD PTR [2*FARGS+DI]
	SAL	BX,1
	ADD	DI,BX
	MOV	DI,WORD PTR [2*PFAGB+DI]
	JMP	EXVNM
SLOC1:	CALL	ERR_0
	DB	135
	EVEN
	NOP
S_LOD:
	CALL	GTSTG
	DW	ERR_-136
	MOV	SI,DI
	CALL	XSCNI
	DW	ERR_-137
	DW	ERR_-138
	PUSH	SI
	MOV	DX,CH_PP
	MOV	SI,DX
	MOV	CX,SP
	EVEN
	CALL	XSCAN
	PUSH	DI
	OR	CX,CX
	JNZ	SHORT SLOD1	; (Jump shortened)
	CALL	ERR_0
	DB	139
SLOD1:
	EVEN
	CALL	GTNVR
	DW	ERR_-140
	MOV	LODFN,DI
	XOR	AX,AX
	MOV	LODNA,AX
SLOD2:	MOV	DX,CH_RP
	MOV	SI,CH_CM
	MOV	CX,SP
	EVEN
	CALL	XSCAN
	INC	LODNA
	OR	CX,CX
	JNZ	SHORT SLOD3	; (Jump shortened)
	CALL	ERR_0
	DB	141
SLOD3:	MOV	BX,CX
	MOV	CX,WORD PTR [2*SCLEN+DI]
	OR	CX,CX
	JZ	SHORT SLD3A	; (Jump shortened)
	EVEN
	CALL	FLSTG
SLD3A:	MOV	CX,BX
	PUSH	DI
	MOV	BX,NUM01
	MOV	SI,OFFSET MINDATA:SCSTR
	EVEN
	CALL	IDENT
	DW	SLOD4
	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
	ADD	BX,BX
	MOV	SI,OFFSET MINDATA:SCINT
	EVEN
	CALL	IDENT
	DW	SLOD4
	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
	INC	BX
	MOV	SI,OFFSET MINDATA:SCREA
	EVEN
	CALL	IDENT
	DW	SLOD4
	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
	INC	BX
	MOV	SI,OFFSET MINDATA:SCFIL
	EVEN
	CALL	IDENT
	DW	SLOD4
	XOR	BX,BX
SLOD4:	MOV	BP,SP
	MOV	WORD PTR [BP],BX
	CMP	CX,NUM02
	JE	SLOD2
	OR	CX,CX
	JZ	SHORT SLOD5	; (Jump shortened)
	MOV	DX,MXLEN
	MOV	SI,DX
	MOV	CX,SP
	EVEN
	CALL	XSCAN
	XOR	CX,CX
	JMP	SLOD3
SLOD5:	MOV	CX,LODNA
	MOV	DX,CX
	SAL	CX,1
	ADD	CX,2*EFSI_
	EVEN
	CALL	ALLOC
	MOV	WORD PTR [DI],OFFSET MINCODE:B_EFC
	MOV	WORD PTR [2*FARGS+DI],DX
	XOR	AX,AX
	MOV	WORD PTR [2*EFUSE+DI],AX
	XOR	AX,AX
	MOV	WORD PTR [2*EFCOD+DI],AX
	POP	WORD PTR [2*EFRSL+DI]
	MOV	AX,LODFN
	MOV	WORD PTR [2*EFVAR+DI],AX
	MOV	WORD PTR [2*EFLEN+DI],CX
	MOV	BX,DI
	ADD	DI,CX
SLOD6:	DEC	DI
	DEC	DI
	POP	WORD PTR [DI]
	DEC	DX
	JNZ	SLOD6
	POP	DI
	MOV	CX,WORD PTR [2*SCLEN+DI]
	EVEN
	CALL	FLSTG
	MOV	BP,SP
	MOV	SI,WORD PTR [BP]
;	 MOV  BP,SP	; (Redundant)
	MOV	WORD PTR [BP],BX
	EVEN
	CALL	SYSLD
	DW	ERR_-142
	DW	ERR_-143
	DW	ERR_-328
	POP	SI
	MOV	WORD PTR [2*EFCOD+SI],DI
	MOV	DI,LODFN
	EVEN
	CALL	DFFNC
	JMP	EXNUL
	EVEN
	NOP
S_LPD:
	CALL	GTSTG
	DW	ERR_-144
	ADD	DI,CFP_F
	MOV	BL,[DI]
	XOR	BH,BH
	CALL	GTSMI
	DW	ERR_-145
	DW	SLPD4
SLPD1:	CALL	GTSTG
	DW	ERR_-146
	CMP	CX,DX
	JAE	EXIXR
	MOV	SI,DI
	MOV	CX,DX
	EVEN
	CALL	ALOCS
	PUSH	DI
	MOV	CX,WORD PTR [2*SCLEN+SI]
	SUB	DX,CX
	ADD	DI,CFP_F
SLPD2:	MOV	AL,BL
	STOSB
	DEC	DX
	JNZ	SLPD2
	OR	CX,CX
	JZ	SHORT SLPD3	; (Jump shortened)
	ADD	SI,CFP_F
	SHR	CX,1
	REP	MOVSW
	ADC	CX,CX
	REP	MOVSB
	XOR	SI,SI
SLPD3:	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
SLPD4:	XOR	DX,DX
	JMP	SLPD1
	EVEN
	NOP
S_LTF:
	CALL	ACOMP
	DW	ERR_-147
	DW	ERR_-148
	DW	EXNUL
	DW	EXFAL
	DW	EXFAL
	EVEN
	NOP
S_NEF:
	CALL	ACOMP
	DW	ERR_-149
	DW	ERR_-150
	DW	EXNUL
	DW	EXFAL
	DW	EXNUL
	EVEN
	NOP
S_NAY:
	MOV	BX,OFFSET MINCODE:P_NAS
	MOV	SI,OFFSET MINCODE:P_NAY
	MOV	DX,OFFSET MINCODE:P_NAD
	CALL	PATST
	DW	ERR_-151
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
S_OPS:
	CALL	GTSMI
	DW	ERR_-152
	DW	ERR_-153
	MOV	BX,DX
	POP	DI
	EVEN
	CALL	GTNVR
	DW	ERR_-154
	MOV	SI,WORD PTR [2*VRFNC+DI]
	OR	BX,BX
	JNZ	SHORT SOPS2	; (Jump shortened)
	POP	DI
	EVEN
	CALL	GTNVR
	DW	ERR_-155
SOPS1:
	EVEN
	CALL	DFFNC
	JMP	EXNUL
SOPS2:	CALL	GTSTG
	DW	SOPS5
	CMP	CX,NUM01
	JNE	SHORT SOPS5	; (Jump shortened)
	ADD	DI,CFP_F
	MOV	DL,[DI]
	XOR	DH,DH
	MOV	CX,OFFSET MINDATA:R_UUB
	MOV	DI,OFFSET MINDATA:OPNSU
	ADD	BX,OPBUN
	CMP	BX,OPUUN
	JE	SHORT SOPS3	; (Jump shortened)
	MOV	CX,OFFSET MINDATA:R_UBA
	MOV	DI,OFFSET MINDATA:OPSNB
	MOV	BX,OPBUN
SOPS3:
SOPS4:	CMP	DX,WORD PTR [DI]
	JE	SHORT SOPS6	; (Jump shortened)
	INC	CX
	INC	CX
	INC	DI
	INC	DI
	DEC	BX
	JNZ	SOPS4
SOPS5:	CALL	ERR_0
	DB	156
SOPS6:	MOV	DI,CX
	SUB	DI,2*VRFNC
	JMP	SOPS1
	EVEN
	NOP
S_OUP:
	MOV	BX,NUM03
	CALL	IOPUT
	DW	ERR_-157
	DW	ERR_-158
	DW	ERR_-159
	DW	ERR_-160
	DW	EXFAL
	DW	ERR_-161
	DW	ERR_-290
	JMP	EXNUL
	EVEN
	NOP
S_POS:
	MOV	BX,OFFSET MINCODE:P_POS
	MOV	CX,OFFSET MINCODE:P_PSD
	CALL	PATIN
	DW	ERR_-162
	DW	ERR_-163
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
S_PRO:
	POP	DI
	MOV	BX,WORD PTR [2*TBLEN+DI]
	SHR	BX,1
	MOV	CX,WORD PTR [DI]
	CMP	CX,OFFSET MINCODE:B_ART
	JE	SHORT SPRO4	; (Jump shortened)
	CMP	CX,OFFSET MINCODE:B_TBT
	JE	SHORT SPRO1	; (Jump shortened)
	CMP	CX,OFFSET MINCODE:B_VCT
	JE	SHORT SPRO3	; (Jump shortened)
	CALL	ERR_0
	DB	164
SPRO1:	SUB	BX,TBSI_
SPRO2:	MOV	WORD PTR REG_IA,BX
	XOR	DX,DX
	JMP	EXINT
SPRO3:	SUB	BX,VCSI_
	JMP	SPRO2
SPRO4:	ADD	DI,WORD PTR [2*AROFS+DI]
	MOV	DI,WORD PTR [DI]
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
S_RMD:
	CALL	ARITH
	DW	ERR_-166
	DW	ERR_-165
	DW	SRM06
	XOR	BX,BX
	MOV	DX,WORD PTR WORD PTR [2*ICVAL+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+DI]
	MOV	WORD PTR REG_IA,AX
	OR	DX,DX
	JGE	SHORT SRM01	; (Jump shortened)
	MOV	BX,SP
SRM01:	LEA	BP,WORD PTR [2*ICVAL+SI]
	CALL	RMI_
	JO	SHORT SRM05	; (Jump shortened)
	OR	BX,BX
	JZ	SHORT SRM03	; (Jump shortened)
	OR	DX,DX
	JG	SHORT L0005
	JL	EXINT
	CMP	WORD PTR REG_IA,0
	JE	EXINT
L0005	LABEL	NEAR
SRM02:	NOT	DX
	NEG	WORD PTR REG_IA
	SBB	DX,-1
	JMP	EXINT
SRM03:	OR	DX,DX
	JL	SRM02
	JMP	EXINT
SRM04:	CALL	ERR_0
	DB	166
SRM05:	CALL	ERR_0
	DB	167
SRM06:	XOR	BX,BX
	LEA	BP,WORD PTR [2*RCVAL+DI]
	CALL	LDR_
	CALL	CPR_
	JAE	SHORT SRM07	; (Jump shortened)
	MOV	BX,SP
SRM07:	LEA	BP,WORD PTR [2*RCVAL+SI]
	CALL	DVR_
	CALL	OVR_
	JNZ	SHORT SRM10	; (Jump shortened)
	CALL	CHP_
	LEA	BP,WORD PTR [2*RCVAL+SI]
	CALL	MLR_
	LEA	BP,WORD PTR [2*RCVAL+DI]
	CALL	SBR_
	OR	BX,BX
	JZ	SHORT SRM09	; (Jump shortened)
	CALL	CPR_
	JBE	EXREA
SRM08:	CALL	NGR_
	JMP	EXREA
SRM09:	CALL	CPR_
	JB	SRM08
	JMP	EXREA
SRM10:	CALL	ERR_1
	DB	56
	EVEN
	NOP
S_RPL:
	CALL	GTSTG
	DW	ERR_-168
	MOV	SI,DI
	CALL	GTSTG
	DW	ERR_-169
	CMP	DI,R_RA2
	JNE	SHORT SRPL1	; (Jump shortened)
	CMP	SI,R_RA3
	JE	SHORT SRPL4	; (Jump shortened)
SRPL1:	MOV	BX,WORD PTR [2*SCLEN+SI]
	CMP	CX,BX
	JNE	SRPL6
	CMP	DI,KVALP
	JE	SHORT SRPL5	; (Jump shortened)
	OR	BX,BX
	JZ	SRPL6
	MOV	R_RA3,SI
	MOV	R_RA2,DI
	MOV	SI,KVALP
	MOV	CX,WORD PTR [2*SCLEN+SI]
	MOV	DI,R_RPT
	OR	DI,DI
	JNZ	SHORT SRPL2	; (Jump shortened)
	EVEN
	CALL	ALOCS
	MOV	CX,DX
	MOV	R_RPT,DI
SRPL2:	ADD	CX,1+2*SCSI_
	AND	CX,-2
	SHR	CX,1
	REP	MOVSW
	MOV	SI,R_RA2
	XOR	DX,DX
	MOV	DI,R_RA3
	ADD	DI,CFP_F
SRPL3:	MOV	SI,R_RA2
	ADD	SI,CFP_F
	ADD	SI,DX
	INC	DX
	MOV	CL,[SI]
	XOR	CH,CH
	MOV	SI,R_RPT
	ADD	SI,CFP_F
	ADD	SI,CX
	MOV	CL,[DI]
	XOR	CH,CH
	INC	DI
	MOV	[SI],CL
	DEC	BX
	JNZ	SRPL3
SRPL4:	MOV	SI,R_RPT
SRPL5:	CALL	GTSTG
	DW	ERR_-170
	OR	CX,CX
	JZ	EXNUL
	PUSH	SI
	MOV	SI,DI
	MOV	DX,CX
	ADD	CX,1+2*SCHAR
	AND	CX,-2
	EVEN
	CALL	ALLOC
	MOV	BX,DI
	SHR	CX,1
	REP	MOVSW
	POP	DI
	ADD	DI,CFP_F
	MOV	SI,BX
	ADD	SI,CFP_F
	MOV	CX,DX
	XCHG	SI,DI
	XCHG	SI,BX
L0006:	MOV	AL,[DI]
	XLATB
	STOSB
	LOOP	L0006
	MOV	BX,SI
	XOR	SI,SI
	XOR	DI,DI
SRPL8:	PUSH	BX
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
SRPL6:	CALL	ERR_0
	DB	171
	EVEN
	NOP
S_REW:
	CALL	IOFCB
	DW	ERR_-172
	DW	ERR_-173
	DW	ERR_-174
	EVEN
	CALL	SYSRW
	DW	ERR_-174
	DW	ERR_-175
	DW	ERR_-176
	JMP	EXNUL
	EVEN
	NOP
S_RVS:
	CALL	GTSTG
	DW	ERR_-177
	OR	CX,CX
	JZ	EXIXR
	MOV	SI,DI
	EVEN
	CALL	ALOCS
	PUSH	DI
	ADD	DI,CFP_F
	ADD	SI,CFP_F
	ADD	SI,DX
SRVS1:	DEC	SI
	MOV	BL,[SI]
	XOR	BH,BH
	MOV	AL,BL
	STOSB
	DEC	DX
	JNZ	SRVS1
SRVS4:
	XOR	SI,SI
SRVS2:	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
S_RPD:
	CALL	GTSTG
	DW	ERR_-178
	ADD	DI,CFP_F
	MOV	BL,[DI]
	XOR	BH,BH
	CALL	GTSMI
	DW	ERR_-179
	DW	SRPD3
SRPD1:	CALL	GTSTG
	DW	ERR_-180
	CMP	CX,DX
	JAE	EXIXR
	MOV	SI,DI
	MOV	CX,DX
	EVEN
	CALL	ALOCS
	PUSH	DI
	MOV	CX,WORD PTR [2*SCLEN+SI]
	SUB	DX,CX
	ADD	DI,CFP_F
	OR	CX,CX
	JZ	SHORT SRPD2	; (Jump shortened)
	ADD	SI,CFP_F
	SHR	CX,1
	REP	MOVSW
	ADC	CX,CX
	REP	MOVSB
	XOR	SI,SI
SRPD2:	MOV	AL,BL
	STOSB
	DEC	DX
	JNZ	SRPD2
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
SRPD3:	XOR	DX,DX
	JMP	SRPD1
	EVEN
	NOP
S_RTB:
	MOV	BX,OFFSET MINCODE:P_RTB
	MOV	CX,OFFSET MINCODE:P_RTD
	CALL	PATIN
	DW	ERR_-181
	DW	ERR_-182
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
S_SET:
	POP	R_IO2
	POP	R_IO1
	CALL	IOFCB
	DW	ERR_-291
	DW	ERR_-292
	DW	ERR_-295
	MOV	BX,R_IO1
	MOV	DX,R_IO2
	EVEN
	CALL	SYSST
	DW	ERR_-293
	DW	ERR_-294
	DW	ERR_-295
	DW	ERR_-296
	DW	ERR_-297
	JMP	EXINT
	EVEN
	NOP
S_TAB:
	MOV	BX,OFFSET MINCODE:P_TAB
	MOV	CX,OFFSET MINCODE:P_TBD
	CALL	PATIN
	DW	ERR_-183
	DW	ERR_-184
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
S_RPS:
	MOV	BX,OFFSET MINCODE:P_RPS
	MOV	CX,OFFSET MINCODE:P_RPD
	CALL	PATIN
	DW	ERR_-185
	DW	ERR_-186
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
S_RSR:
	MOV	CX,SP
	CALL	SORTA
	DW	EXFAL
	JMP	EXSID
	EVEN
	NOP
S_STX:
	POP	DI
	MOV	CX,STXVR
	XOR	SI,SI
	CMP	DI,OFFSET MINDATA:NULLS
	JE	SHORT SSTX1	; (Jump shortened)
	EVEN
	CALL	GTNVR
	DW	SSTX2
	MOV	SI,WORD PTR [2*VRLBL+DI]
	CMP	SI,OFFSET MINDATA:STNDL
	JE	SHORT SSTX2	; (Jump shortened)
	CMP	WORD PTR [SI],OFFSET MINCODE:B_TRT
	JNE	SHORT SSTX1	; (Jump shortened)
	MOV	SI,WORD PTR [2*TRLBL+SI]
SSTX1:	MOV	STXVR,DI
	MOV	R_SXC,SI
	CMP	CX,OFFSET MINDATA:NULLS
	JE	EXNUL
	MOV	DI,CX
	JMP	EXVNM
SSTX2:	CALL	ERR_0
	DB	187
	EVEN
	NOP
S_SIN:
	POP	DI
	EVEN
	CALL	GTREA
	DW	ERR_-308
	LEA	BP,WORD PTR [2*RCVAL+DI]
	CALL	LDR_
	CALL	SIN_
	CALL	OVR_
	JZ	EXREA
	CALL	ERR_1
	DB	67
	EVEN
	NOP
S_SQR:
	POP	DI
	EVEN
	CALL	GTREA
	DW	ERR_-313
	LEA	BP,WORD PTR [2*RCVAL+DI]
	CALL	LDR_
	CALL	CPR_
	JB	SHORT SSQR1	; (Jump shortened)
	CALL	SQR_
	JMP	EXREA
SSQR1:	CALL	ERR_1
	DB	58
	EVEN
	NOP
S_SRT:
	XOR	CX,CX
	CALL	SORTA
	DW	EXFAL
	JMP	EXSID
	EVEN
	NOP
S_SPN:
	MOV	BX,OFFSET MINCODE:P_SPS
	MOV	SI,OFFSET MINCODE:P_SPN
	MOV	DX,OFFSET MINCODE:P_SPD
	CALL	PATST
	DW	ERR_-188
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
S_SI_:
	CALL	GTSTG
	DW	ERR_-189
	MOV	WORD PTR REG_IA,CX
	XOR	DX,DX
	JMP	EXINT
	EVEN
	NOP
S_STT:
	XOR	SI,SI
	CALL	TRACE
	DW	ERR_-190
	DW	ERR_-191
	JMP	EXNUL
	EVEN
	NOP
S_SUB:
	CALL	GTSMI
	DW	ERR_-192
	DW	EXFAL
	MOV	SBSSV,DI
	CALL	GTSMI
	DW	ERR_-193
	DW	EXFAL
	MOV	DX,DI
	OR	DX,DX
	JZ	EXFAL
	DEC	DX
	CALL	GTSTG
	DW	ERR_-194
	MOV	BX,DX
	MOV	DX,SBSSV
	OR	DX,DX
	JNZ	SHORT SSUB2	; (Jump shortened)
	MOV	DX,CX
	CMP	BX,DX
	JA	EXFAL
	SUB	DX,BX
SSUB2:	MOV	SI,CX
	MOV	CX,DX
	ADD	DX,BX
	CMP	DX,SI
	JA	EXFAL
	MOV	SI,DI
	EVEN
	CALL	SBSTR
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
S_TBL:
	POP	SI
	POP	AX
	CALL	GTSMI
	DW	ERR_-195
	DW	ERR_-196
	OR	DX,DX
	JNZ	SHORT STBL1	; (Jump shortened)
	MOV	DX,TBNBK
STBL1:
	EVEN
	CALL	TMAKE
	JMP	EXSID
	EVEN
	NOP
S_TAN:
	POP	DI
	EVEN
	CALL	GTREA
	DW	ERR_-309
	LEA	BP,WORD PTR [2*RCVAL+DI]
	CALL	LDR_
	CALL	TAN_
	CALL	OVR_
	JZ	EXREA
	CALL	ERR_1
	DB	54
	EVEN
	NOP
S_TIM:
	EVEN
	CALL	SYSTM
	MOV	AX,WORD PTR TIMSX
	SUB	WORD PTR REG_IA,AX
	SBB	DX,WORD PTR TIMSX+2
	JMP	EXINT
	EVEN
	NOP
S_TRA:
	MOV	BP,SP
	CMP	WORD PTR [2*3+BP],OFFSET MINDATA:NULLS
	JE	SHORT STR02	; (Jump shortened)
	POP	DI
	XOR	SI,SI
	CMP	DI,OFFSET MINDATA:NULLS
	JE	SHORT STR01	; (Jump shortened)
	EVEN
	CALL	GTNVR
	DW	STR03
	MOV	SI,DI
STR01:	POP	DI
	XOR	BX,BX
	EVEN
	CALL	TRBLD
	MOV	SI,DI
	CALL	TRACE
	DW	ERR_-198
	DW	ERR_-199
	JMP	EXNUL
STR02:
	EVEN
	CALL	SYSTT
	ADD	SP,2*NUM04
	JMP	EXNUL
STR03:	CALL	ERR_0
	DB	197
	EVEN
	NOP
S_TRM:
	CALL	GTSTG
	DW	ERR_-200
	OR	CX,CX
	JZ	EXNUL
	MOV	SI,DI
	ADD	CX,1+2*SCHAR
	AND	CX,-2
	EVEN
	CALL	ALLOC
	MOV	BX,DI
	SHR	CX,1
	REP	MOVSW
	MOV	DI,BX
	EVEN
	CALL	TRIMR
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
	EVEN
	NOP
S_UNL:
	POP	DI
	EVEN
	CALL	GTNVR
	DW	ERR_-201
	MOV	SI,OFFSET MINDATA:STNDF
	EVEN
	CALL	DFFNC
	JMP	EXNUL
	SUBTTL	S P I T B O L -- UTILITY ROUTINES
ARREF:
	PUBLIC	ARREF
	MOV	CX,DI
	MOV	SI,SP
	SAL	DI,1
	ADD	SI,DI
	INC	SI
	INC	SI
	MOV	ARFXS,SI
	DEC	SI
	DEC	SI
	MOV	DI,WORD PTR [SI]
	MOV	R_ARF,DI
	MOV	DI,SI
	MOV	SI,R_ARF
	MOV	DX,WORD PTR [SI]
	CMP	DX,OFFSET MINCODE:B_ART
	JE	SHORT ARF01	; (Jump shortened)
	CMP	DX,OFFSET MINCODE:B_VCT
	JE	ARF07
	CMP	DX,OFFSET MINCODE:B_TBT
	JE	ARF10
	CALL	ERR_0
	DB	235
ARF01:	CMP	CX,WORD PTR [2*ARNDM+SI]
	JNE	ARF09
	MOV	DX,WORD PTR INTV0+2
	MOV	AX,WORD PTR INTV0
	MOV	WORD PTR REG_IA,AX
	MOV	SI,DI
	XOR	CX,CX
	JMP	SHORT ARF03	; (Jump shortened)
ARF02:	LEA	BP,WORD PTR [2*ARDM2+DI]
	CALL	MLI_
ARF03:	DEC	SI
	DEC	SI
	MOV	DI,WORD PTR [SI]
	MOV	WORD PTR ARFSI+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR ARFSI,AX
	MOV	DX,WORD PTR WORD PTR [2*ICVAL+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+DI]
	MOV	WORD PTR REG_IA,AX
	CMP	WORD PTR [DI],OFFSET MINCODE:B_ICL
	JE	SHORT ARF04	; (Jump shortened)
	EVEN
	CALL	GTINT
	DW	ARF12
	MOV	DX,WORD PTR WORD PTR [2*ICVAL+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+DI]
	MOV	WORD PTR REG_IA,AX
ARF04:	MOV	DI,R_ARF
	ADD	DI,CX
	MOV	AX,WORD PTR WORD PTR [2*ARLBD+DI]
	SUB	WORD PTR REG_IA,AX
	SBB	DX,WORD PTR WORD PTR [2*ARLBD+DI]+2
	JO	ARF13
	OR	DX,DX
	JL	ARF13
	MOV	AX,WORD PTR WORD PTR [2*ARDIM+DI]
	SUB	WORD PTR REG_IA,AX
	SBB	DX,WORD PTR WORD PTR [2*ARDIM+DI]+2
	OR	DX,DX
	JGE	ARF13
	MOV	AX,WORD PTR WORD PTR [2*ARDIM+DI]
	ADD	WORD PTR REG_IA,AX
	ADC	DX,WORD PTR WORD PTR [2*ARDIM+DI]+2
	MOV	AX,WORD PTR ARFSI
	ADD	WORD PTR REG_IA,AX
	ADC	DX,WORD PTR ARFSI+2
	ADD	CX,2*ARDMS
	CMP	SI,SP
	JNE	ARF02
	MOV	CX,WORD PTR REG_IA
	SAL	CX,1
	MOV	SI,R_ARF
	ADD	CX,WORD PTR [2*AROFS+SI]
	INC	CX
	INC	CX
	OR	BX,BX
	JNZ	SHORT ARF08	; (Jump shortened)
ARF05:
	EVEN
	CALL	ACESS
	DW	ARF13
ARF06:	MOV	SP,ARFXS
	XOR	AX,AX
	MOV	R_ARF,AX
	PUSH	DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
ARF07:	CMP	CX,NUM01
	JNE	SHORT ARF09	; (Jump shortened)
	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
	EVEN
	CALL	GTINT
	DW	ARF12
	MOV	DX,WORD PTR WORD PTR [2*ICVAL+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+DI]
	MOV	WORD PTR REG_IA,AX
	MOV	AX,WORD PTR INTV1
	SUB	WORD PTR REG_IA,AX
	SBB	DX,WORD PTR INTV1+2
	OR	DX,DX
	JNE	SHORT ARF13	; (Jump shortened)
	MOV	CX,WORD PTR REG_IA
	OR	CX,CX
	JL	SHORT ARF13	; (Jump shortened)
	ADD	CX,VCVLS
	SAL	CX,1
	CMP	CX,WORD PTR [2*VCLEN+SI]
	JAE	SHORT ARF13	; (Jump shortened)
	OR	BX,BX
	JZ	ARF05
ARF08:	MOV	SP,ARFXS
	XOR	AX,AX
	MOV	R_ARF,AX
	JMP	EXNAM
ARF09:	CALL	ERR_0
	DB	236
ARF10:	CMP	CX,NUM01
	JNE	SHORT ARF11	; (Jump shortened)
	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
	EVEN
	CALL	TFIND
	DW	ARF13
	OR	BX,BX
	JNZ	ARF08
	JMP	ARF06
ARF11:	CALL	ERR_0
	DB	237
ARF12:	CALL	ERR_0
	DB	238
ARF13:	XOR	AX,AX
	MOV	R_ARF,AX
	JMP	SHORT EXFAL	; (Jump shortened)
CFUNC:
	PUBLIC	CFUNC
	CMP	CX,WORD PTR [2*FARGS+SI]
	JB	SHORT CFNC1	; (Jump shortened)
	CMP	CX,WORD PTR [2*FARGS+SI]
	JE	SHORT CFNC3	; (Jump shortened)
	MOV	BX,CX
	SUB	BX,WORD PTR [2*FARGS+SI]
	SAL	BX,1
	ADD	SP,BX
	JMP	SHORT CFNC3	; (Jump shortened)
CFNC1:	MOV	BX,WORD PTR [2*FARGS+SI]
	CMP	BX,NINI9
	JE	SHORT CFNC3	; (Jump shortened)
	SUB	BX,CX
CFNC2:	MOV	AX,OFFSET MINDATA:NULLS
	PUSH	AX
	DEC	BX
	JNZ	CFNC2
CFNC3:	JMP	WORD PTR [SI]
EXFAL:
	PUBLIC	EXFAL
	MOV	SP,FLPTR
	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
	ADD	DI,R_COD
	MOV	REG_CP,DI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	MOV	SI,WORD PTR [DI]
	JMP	SI
EXINT:
	PUBLIC	EXINT
	XOR	SI,SI
	EVEN
	CALL	ICBLD
EXIXR:
	PUBLIC	EXIXR
	PUSH	DI
EXITS:
	PUBLIC	EXITS
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	MOV	SI,WORD PTR [DI]
	JMP	SI
EXNAM:
	PUBLIC	EXNAM
	PUSH	SI
	PUSH	CX
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
EXNUL:
	PUBLIC	EXNUL
	MOV	AX,OFFSET MINDATA:NULLS
	PUSH	AX
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	MOV	SI,WORD PTR [DI]
	JMP	SI
EXREA:
	PUBLIC	EXREA
	XOR	SI,SI
	EVEN
	CALL	RCBLD
	JMP	EXIXR
EXSID:
	PUBLIC	EXSID
	MOV	CX,CURID
	CMP	CX,CFP_M
	JNE	SHORT EXSI1	; (Jump shortened)
	XOR	CX,CX
EXSI1:	INC	CX
	MOV	CURID,CX
	MOV	WORD PTR [2*IDVAL+DI],CX
	JMP	EXIXR
EXVNM:
	PUBLIC	EXVNM
	MOV	SI,DI
	MOV	CX,2*NMSI_
	EVEN
	CALL	ALLOC
	MOV	WORD PTR [DI],OFFSET MINCODE:B_NML
	MOV	WORD PTR [2*NMBAS+DI],SI
	MOV	WORD PTR [2*NMOFS+DI],2*VRVAL
	JMP	EXIXR
FLPOP:
	PUBLIC	FLPOP
	ADD	SP,2*NUM02
FAILP:
	PUBLIC	FAILP
	POP	DI
	POP	BX
	MOV	SI,WORD PTR [DI]
	JMP	SI
INDIR:
	PUBLIC	INDIR
	POP	DI
	CMP	WORD PTR [DI],OFFSET MINCODE:B_NML
	JE	SHORT INDR2	; (Jump shortened)
	EVEN
	CALL	GTNVR
	DW	ERR_-239
	OR	BX,BX
	JZ	SHORT INDR1	; (Jump shortened)
	PUSH	DI
	MOV	AX,2*VRVAL
	PUSH	AX
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	MOV	SI,WORD PTR [DI]
	JMP	SI
INDR1:	JMP	WORD PTR [DI]
INDR2:	MOV	SI,WORD PTR [2*NMBAS+DI]
	MOV	CX,WORD PTR [2*NMOFS+DI]
	OR	BX,BX
	JNZ	EXNAM
	EVEN
	CALL	ACESS
	DW	EXFAL
	JMP	EXIXR
MATCH:
	PUBLIC	MATCH
	POP	DI
	EVEN
	CALL	GTPAT
	DW	ERR_-240
	MOV	SI,DI
	OR	BX,BX
	JNZ	SHORT MTCH1	; (Jump shortened)
	MOV	BP,SP
	MOV	CX,WORD PTR [BP]
	PUSH	SI
	MOV	BP,SP
	MOV	SI,WORD PTR [2*2+BP]
	EVEN
	CALL	ACESS
	DW	EXFAL
	MOV	BP,SP
	MOV	SI,WORD PTR [BP]
;	 MOV  BP,SP	; (Redundant)
	MOV	WORD PTR [BP],DI
	XOR	BX,BX
MTCH1:	CALL	GTSTG
	DW	ERR_-241
	PUSH	BX
	MOV	R_PMS,DI
	MOV	PMSSL,CX
	XOR	AX,AX
	PUSH	AX
	XOR	BX,BX
	MOV	PMHBS,SP
	XOR	AX,AX
	MOV	PMDFL,AX
	MOV	DI,SI
	CMP	KVANC,0
	JNZ	SHORT MTCH2	; (Jump shortened)
	PUSH	DI
	MOV	AX,OFFSET MINDATA:NDUNA
	PUSH	AX
	JMP	WORD PTR [DI]
MTCH2:	XOR	AX,AX
	PUSH	AX
	MOV	AX,OFFSET MINDATA:NDABO
	PUSH	AX
	JMP	WORD PTR [DI]
RETRN:
	PUBLIC	RETRN
	CMP	KVFNC,0
	JNZ	SHORT RTN01	; (Jump shortened)
	CALL	ERR_0
	DB	242
RTN01:	MOV	SP,FLPRT
	POP	AX
	POP	DI
	POP	FLPTR
	POP	FLPRT
	POP	BX
	POP	DX
	ADD	BX,DX
	MOV	REG_CP,BX
	MOV	R_COD,DX
	DEC	KVFNC
	MOV	BX,KVTRA
	ADD	BX,KVFTR
;	OR	BX,BX	(Optimized)
	JZ	SHORT RTN06	; (Jump shortened)
	PUSH	CX
	PUSH	DI
	MOV	KVRTN,CX
	MOV	SI,R_FNC
	EVEN
	CALL	KTREX
	MOV	SI,WORD PTR [2*PFVBL+DI]
	CMP	KVTRA,0
	JZ	SHORT RTN02	; (Jump shortened)
	MOV	DI,WORD PTR [2*PFRTR+DI]
	OR	DI,DI
	JZ	SHORT RTN02	; (Jump shortened)
	DEC	KVTRA
	CMP	WORD PTR [2*TRFNC+DI],0
	JZ	SHORT RTN03	; (Jump shortened)
	MOV	CX,2*VRVAL
	MOV	BP,SP
	MOV	AX,WORD PTR [2*1+BP]
	MOV	KVRTN,AX
	EVEN
	CALL	TRXEQ
RTN02:	CMP	KVFTR,0
	JZ	SHORT RTN05	; (Jump shortened)
	DEC	KVFTR
RTN03:
	EVEN
	CALL	PRTSN
	MOV	BP,SP
	MOV	DI,WORD PTR [2*1+BP]
	EVEN
	CALL	PRTST
	MOV	CX,CH_BL
	EVEN
	CALL	PRTCH
	MOV	BP,SP
	MOV	SI,WORD PTR [2*0+BP]
	MOV	SI,WORD PTR [2*PFVBL+SI]
	MOV	CX,2*VRVAL
	CMP	DI,OFFSET MINDATA:SCFRT
	JNE	SHORT RTN04	; (Jump shortened)
	EVEN
	CALL	PRTNM
	EVEN
	CALL	PRTNL
	JMP	SHORT RTN05	; (Jump shortened)
RTN04:
	EVEN
	CALL	PRTNV
RTN05:	POP	DI
	POP	CX
RTN06:	MOV	KVRTN,CX
	MOV	SI,WORD PTR [2*PFVBL+DI]
RTN07:	MOV	RTNBP,SI
	MOV	SI,WORD PTR [2*VRVAL+SI]
	CMP	WORD PTR [SI],OFFSET MINCODE:B_TRT
	JE	RTN07
	MOV	RTNFV,SI
	POP	RTNSV
	POP	SI
	OR	SI,SI
	JZ	SHORT RTN7C	; (Jump shortened)
	CMP	KVPFL,0
	JZ	SHORT RTN7C	; (Jump shortened)
	EVEN
	CALL	PRFLU
	CMP	KVPFL,NUM02
	JE	SHORT RTN7A	; (Jump shortened)
	MOV	DX,WORD PTR PFSTM+2
	MOV	AX,WORD PTR PFSTM
	MOV	WORD PTR REG_IA,AX
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+SI]
	SUB	WORD PTR REG_IA,AX
	SBB	DX,WORD PTR WORD PTR [2*ICVAL+SI]+2
	JMP	SHORT RTN7B	; (Jump shortened)
RTN7A:	MOV	DX,WORD PTR WORD PTR [2*ICVAL+SI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+SI]
	MOV	WORD PTR REG_IA,AX
RTN7B:	MOV	WORD PTR PFSTM+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR PFSTM,AX
RTN7C:	MOV	BX,WORD PTR [2*FARGS+DI]
	ADD	BX,WORD PTR [2*PFNLO+DI]
;	OR	BX,BX	(Optimized)
	JZ	SHORT RTN10	; (Jump shortened)
	ADD	DI,WORD PTR [2*PFLEN+DI]
RTN08:	DEC	DI
	DEC	DI
	MOV	SI,WORD PTR [DI]
RTN09:	MOV	CX,SI
	MOV	SI,WORD PTR [2*VRVAL+SI]
	CMP	WORD PTR [SI],OFFSET MINCODE:B_TRT
	JE	RTN09
	MOV	SI,CX
	POP	WORD PTR [2*VRVAL+SI]
	DEC	BX
	JNZ	RTN08
RTN10:	MOV	SI,RTNBP
	MOV	AX,RTNSV
	MOV	WORD PTR [2*VRVAL+SI],AX
	MOV	DI,RTNFV
	MOV	SI,R_COD
	MOV	AX,KVSTN
	MOV	KVLST,AX
	MOV	AX,WORD PTR [2*CDSTM+SI]
	MOV	KVSTN,AX
	MOV	AX,KVLIN
	MOV	KVLLN,AX
	MOV	AX,WORD PTR [2*CDSLN+SI]
	MOV	KVLIN,AX
	MOV	CX,KVRTN
	CMP	CX,OFFSET MINDATA:SCRTN
	JE	EXIXR
	CMP	CX,OFFSET MINDATA:SCFRT
	JE	EXFAL
	CMP	WORD PTR [DI],OFFSET MINCODE:B_NML
	JE	SHORT RTN11	; (Jump shortened)
	EVEN
	CALL	GTNVR
	DW	ERR_-243
	MOV	SI,DI
	MOV	CX,2*VRVAL
	JMP	SHORT RTN12	; (Jump shortened)
RTN11:	MOV	SI,WORD PTR [2*NMBAS+DI]
	MOV	CX,WORD PTR [2*NMOFS+DI]
RTN12:	MOV	DI,SI
	MOV	BP,REG_CP
	MOV	BX,[BP]
	ADD	REG_CP,2
	MOV	SI,DI
	CMP	BX,OFFSET MINDATA:OFNE_
	JE	EXNAM
	PUSH	BX
	EVEN
	CALL	ACESS
	DW	EXFAL
	MOV	SI,DI
	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
;	 MOV  BP,SP	; (Redundant)
	MOV	WORD PTR [BP],SI
	MOV	SI,WORD PTR [DI]
	JMP	SI
STCOV:
	PUBLIC	STCOV
	INC	ERRFT
	MOV	DX,WORD PTR INTVT+2
	MOV	AX,WORD PTR INTVT
	MOV	WORD PTR REG_IA,AX
	MOV	AX,WORD PTR KVSTL
	ADD	WORD PTR REG_IA,AX
	ADC	DX,WORD PTR KVSTL+2
	MOV	WORD PTR KVSTL+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR KVSTL,AX
	MOV	DX,WORD PTR INTVT+2
	MOV	AX,WORD PTR INTVT
	MOV	WORD PTR REG_IA,AX
	MOV	WORD PTR KVSTC+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR KVSTC,AX
	EVEN
	CALL	STGCC
	CALL	ERR_0
	DB	244
STMGO:
	PUBLIC	STMGO
	MOV	R_COD,DI
	DEC	STMCT
;	CMP	STMCT,0	(Optimized)
	JZ	SHORT STGO2	; (Jump shortened)
	MOV	AX,KVSTN
	MOV	KVLST,AX
	MOV	AX,WORD PTR [2*CDSTM+DI]
	MOV	KVSTN,AX
	MOV	AX,KVLIN
	MOV	KVLLN,AX
	MOV	AX,WORD PTR [2*CDSLN+DI]
	MOV	KVLIN,AX
	ADD	DI,2*CDCOD
	MOV	REG_CP,DI
STGO1:	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	XOR	SI,SI
	JMP	WORD PTR [DI]
STGO2:	CMP	KVPFL,0
	JZ	SHORT STGO3	; (Jump shortened)
	EVEN
	CALL	PRFLU
STGO3:	MOV	AX,KVSTN
	MOV	KVLST,AX
	MOV	AX,WORD PTR [2*CDSTM+DI]
	MOV	KVSTN,AX
	MOV	AX,KVLIN
	MOV	KVLLN,AX
	MOV	AX,WORD PTR [2*CDSLN+DI]
	MOV	KVLIN,AX
	ADD	DI,2*CDCOD
	MOV	REG_CP,DI
	PUSH	STMCS
	DEC	POLCT
;	CMP	POLCT,0	(Optimized)
	JNZ	SHORT STGO4	; (Jump shortened)
	XOR	CX,CX
	MOV	BX,KVSTN
	MOV	SI,DI
	EVEN
	CALL	SYSPL
	DW	ERR_-320
	DW	ERR_-299
	DW	ERR_-299
	MOV	DI,SI
	MOV	POLCS,CX
	EVEN
	CALL	STGCC
STGO4:	MOV	DX,WORD PTR KVSTC+2
	MOV	AX,WORD PTR KVSTC
	MOV	WORD PTR REG_IA,AX
	OR	DX,DX
	JL	SHORT STGO5	; (Jump shortened)
	POP	WORD PTR REG_IA
	XOR	DX,DX
	NOT	DX
	NEG	WORD PTR REG_IA
	SBB	DX,-1
	MOV	AX,WORD PTR KVSTC
	ADD	WORD PTR REG_IA,AX
	ADC	DX,WORD PTR KVSTC+2
	MOV	WORD PTR KVSTC+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR KVSTC,AX
	OR	DX,DX
	JG	SHORT L0007
	JL	STCOV
	CMP	WORD PTR REG_IA,0
	JE	STCOV
L0007	LABEL	NEAR
	CMP	R_STC,0
	JZ	SHORT STGO5	; (Jump shortened)
	XOR	DI,DI
	MOV	SI,R_STC
	EVEN
	CALL	KTREX
STGO5:	MOV	AX,STMCS
	MOV	STMCT,AX
	JMP	STGO1
STOPR:
	PUBLIC	STOPR
	OR	DI,DI
	JZ	SHORT STPRA	; (Jump shortened)
	EVEN
	CALL	SYSAX
STPRA:	MOV	AX,RSMEM
	ADD	DNAME,AX
	CMP	DI,OFFSET MINDATA:ENDMS
	JNE	SHORT STPR0	; (Jump shortened)
	CMP	EXSTS,0
	JNZ	STPR3
	XOR	AX,AX
	MOV	ERICH,AX
STPR0:
	EVEN
	CALL	PRTPG
	OR	DI,DI
	JZ	SHORT STPR1	; (Jump shortened)
	EVEN
	CALL	PRTST
STPR1:
	EVEN
	CALL	PRTIS
	CMP	GBCFL,0
	JNZ	SHORT STPR5	; (Jump shortened)
	MOV	DI,OFFSET MINDATA:STPM7
	EVEN
	CALL	PRTST
	MOV	PROFS,PRTMF
	MOV	DX,KVSTN
	EVEN
	CALL	FILNM
	MOV	DI,SI
	EVEN
	CALL	PRTST
	EVEN
	CALL	PRTIS
	MOV	DI,R_COD
	MOV	AX,WORD PTR [2*CDSLN+DI]
	MOV	WORD PTR REG_IA,AX
	XOR	DX,DX
	MOV	DI,OFFSET MINDATA:STPM6
	EVEN
	CALL	PRTMX
STPR5:	MOV	AX,KVSTN
	MOV	WORD PTR REG_IA,AX
	XOR	DX,DX
	MOV	DI,OFFSET MINDATA:STPM1
	EVEN
	CALL	PRTMX
	EVEN
	CALL	SYSTM
	MOV	AX,WORD PTR TIMSX
	SUB	WORD PTR REG_IA,AX
	SBB	DX,WORD PTR TIMSX+2
	MOV	WORD PTR STPTI+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR STPTI,AX
	MOV	DI,OFFSET MINDATA:STPM3
	EVEN
	CALL	PRTMX
	MOV	DX,WORD PTR KVSTL+2
	MOV	AX,WORD PTR KVSTL
	MOV	WORD PTR REG_IA,AX
	OR	DX,DX
	JL	SHORT STPR2	; (Jump shortened)
	MOV	AX,WORD PTR KVSTC
	SUB	WORD PTR REG_IA,AX
	SBB	DX,WORD PTR KVSTC+2
	MOV	WORD PTR STPSI+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR STPSI,AX
	MOV	CX,STMCS
	SUB	CX,STMCT
	MOV	WORD PTR REG_IA,CX
	XOR	DX,DX
	MOV	AX,WORD PTR STPSI
	ADD	WORD PTR REG_IA,AX
	ADC	DX,WORD PTR STPSI+2
	MOV	WORD PTR STPSI+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR STPSI,AX
	MOV	DI,OFFSET MINDATA:STPM2
	EVEN
	CALL	PRTMX
	MOV	DX,WORD PTR STPTI+2
	MOV	AX,WORD PTR STPTI
	MOV	WORD PTR REG_IA,AX
	MOV	BP,OFFSET MINDATA:INTTH
	CALL	MLI_
	JO	SHORT STPR2	; (Jump shortened)
	MOV	BP,OFFSET MINDATA:STPSI
	CALL	DVI_
	JO	SHORT STPR2	; (Jump shortened)
	MOV	DI,OFFSET MINDATA:STPM4
	EVEN
	CALL	PRTMX
STPR2:	MOV	AX,GBCNT
	MOV	WORD PTR REG_IA,AX
	XOR	DX,DX
	MOV	DI,OFFSET MINDATA:STPM5
	EVEN
	CALL	PRTMX
	EVEN
	CALL	PRTMM
	EVEN
	CALL	PRTIS
STPR3:
	EVEN
	CALL	PRFLR
	MOV	DI,KVDMP
	EVEN
	CALL	DUMPR
	MOV	SI,R_FCB
	MOV	CX,KVABE
	MOV	BX,KVCOD
	EVEN
	CALL	SYSEJ
STPR4:
	PUBLIC	STPR4
	MOV	AX,RSMEM
	ADD	DNAME,AX
	CMP	EXSTS,0
	JZ	STPR1
	JMP	STPR3
SUCCP:
	PUBLIC	SUCCP
	MOV	DI,WORD PTR [2*PTHEN+DI]
	MOV	SI,WORD PTR [DI]
	JMP	SI
SYSAB:
	PUBLIC	SYSAB
	MOV	DI,OFFSET MINDATA:ENDAB
	MOV	KVABE,NUM01
	EVEN
	CALL	PRTNL
	JMP	STOPR
SYSTU:
	PUBLIC	SYSTU
	MOV	DI,OFFSET MINDATA:ENDTU
	MOV	CX,STRTU
	MOV	KVCOD,CX
	MOV	CX,TIMUP
	MOV	TIMUP,SP
	OR	CX,CX
	JNZ	STOPR
	CALL	ERR_0
	DB	245
	SUBTTL	S P I T B O L -- UTILITY PROCEDURES
ACESS:
	PUBLIC	ACESS
	MOV	DI,SI
	ADD	DI,CX
	MOV	DI,WORD PTR [DI]
ACS02:	CMP	WORD PTR [DI],OFFSET MINCODE:B_TRT
	JNE	ACS18
	CMP	DI,OFFSET MINDATA:TRBKV
	JE	ACS12
	CMP	DI,OFFSET MINDATA:TRBEV
	JNE	SHORT ACS05	; (Jump shortened)
	MOV	DI,WORD PTR [2*EVEXP+SI]
	XOR	BX,BX
	EVEN
	CALL	EVALX
	DW	ACS04
	JMP	ACS02
ACS03:	ADD	SP,2*NUM03
	MOV	DNAMP,DI
ACS04:	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
ACS05:	MOV	BX,WORD PTR [2*TRTYP+DI]
	OR	BX,BX
	JNZ	SHORT ACS10	; (Jump shortened)
	CMP	KVINP,0
	JZ	SHORT ACS09	; (Jump shortened)
	PUSH	SI
	PUSH	CX
	PUSH	DI
	MOV	AX,KVTRM
	MOV	ACTRM,AX
	MOV	SI,WORD PTR [2*TRFPT+DI]
	OR	SI,SI
	JNZ	SHORT ACS06	; (Jump shortened)
	CMP	WORD PTR [2*TRTER+DI],OFFSET MINDATA:V_TER
	JE	ACS21
	MOV	CX,CSWIN
	EVEN
	CALL	ALOCS
	EVEN
	CALL	SYSRD
	DW	ACS03
	JMP	SHORT ACS07	; (Jump shortened)
ACS06:	MOV	CX,SI
	EVEN
	CALL	SYSIL
	OR	DX,DX
	JNZ	SHORT ACS6A	; (Jump shortened)
	MOV	ACTRM,DX
ACS6A:
	EVEN
	CALL	ALOCS
	MOV	CX,SI
	EVEN
	CALL	SYSIN
	DW	ACS03
	DW	ACS22
	DW	ACS23
ACS07:	MOV	BX,ACTRM
	EVEN
	CALL	TRIMR
	MOV	BX,DI
	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
ACS08:	MOV	SI,DI
	MOV	DI,WORD PTR [2*TRNXT+DI]
	CMP	WORD PTR [DI],OFFSET MINCODE:B_TRT
	JE	ACS08
	MOV	WORD PTR [2*TRNXT+SI],BX
	POP	DI
	POP	CX
	POP	SI
ACS09:	MOV	DI,WORD PTR [2*TRNXT+DI]
	JMP	ACS02
ACS10:	CMP	BX,TRTAC
	JNE	ACS09
	CMP	KVTRA,0
	JZ	ACS09
	DEC	KVTRA
	CMP	WORD PTR [2*TRFNC+DI],0
	JZ	SHORT ACS11	; (Jump shortened)
	EVEN
	CALL	TRXEQ
	JMP	ACS09
ACS11:
	EVEN
	CALL	PRTSN
	EVEN
	CALL	PRTNV
	JMP	ACS09
ACS12:	MOV	DI,WORD PTR [2*KVNUM+SI]
	CMP	DI,K_V__
	JAE	SHORT ACS14	; (Jump shortened)
	MOV	AX,KVABE[DI]
	MOV	WORD PTR REG_IA,AX
	XOR	DX,DX
ACS13:
	EVEN
	CALL	ICBLD
	JMP	SHORT ACS18	; (Jump shortened)
ACS14:	CMP	DI,K_S__
	JAE	SHORT ACS15	; (Jump shortened)
	SUB	DI,K_V__
	SAL	DI,1
	ADD	DI,OFFSET MINDATA:NDABO
	JMP	SHORT ACS18	; (Jump shortened)
ACS15:	MOV	SI,KVRTN
	MOV	DX,WORD PTR KVSTL+2
	MOV	AX,WORD PTR KVSTL
	MOV	WORD PTR REG_IA,AX
	SUB	DI,K_S__
	SHL	DI,1
	JMP	CS:WORD PTR L0008[DI]
L0008	LABEL	WORD
	DW	OFFSET MINCODE:ACS16
	DW	OFFSET MINCODE:ACS17
	DW	OFFSET MINCODE:ACS19
	DW	OFFSET MINCODE:ACS20
	DW	OFFSET MINCODE:ACS26
	DW	OFFSET MINCODE:ACS27
	DW	OFFSET MINCODE:ACS13
	DW	OFFSET MINCODE:ACS24
	DW	OFFSET MINCODE:ACS25
ACS24:	MOV	DI,OFFSET MINDATA:LCASE
	JMP	SHORT ACS18	; (Jump shortened)
ACS25:	MOV	DI,OFFSET MINDATA:UCASE
	JMP	SHORT ACS18	; (Jump shortened)
ACS26:	MOV	DX,KVSTN
	JMP	SHORT ACS28	; (Jump shortened)
ACS27:	MOV	DX,KVLST
ACS28:
	EVEN
	CALL	FILNM
	JMP	SHORT ACS17	; (Jump shortened)
ACS16:	MOV	SI,KVALP
ACS17:	MOV	DI,SI
ACS18:	POP	AX
	INC	AX
	INC	AX
	JMP	AX
ACS19:	OR	DX,DX
	JL	SHORT ACS29	; (Jump shortened)
	MOV	CX,STMCS
	SUB	CX,STMCT
	MOV	WORD PTR REG_IA,CX
	XOR	DX,DX
	MOV	AX,WORD PTR KVSTL
	ADD	WORD PTR REG_IA,AX
	ADC	DX,WORD PTR KVSTL+2
ACS29:	MOV	AX,WORD PTR KVSTC
	SUB	WORD PTR REG_IA,AX
	SBB	DX,WORD PTR KVSTC+2
	JMP	ACS13
ACS20:	MOV	DI,R_ETX
	JMP	ACS18
ACS21:	MOV	CX,RILEN
	EVEN
	CALL	ALOCS
	EVEN
	CALL	SYSRI
	DW	ACS03
	JMP	ACS07
ACS22:	MOV	DNAMP,DI
	CALL	ERR_0
	DB	202
ACS23:	MOV	DNAMP,DI
	CALL	ERR_0
	DB	203
ACOMP:
	PUBLIC	ACOMP
	POP	PRC_+0
	CALL	ARITH
	DW	ACMP7
	DW	ACMP8
	DW	ACMP4
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+SI]
	SUB	WORD PTR REG_IA,AX
	SBB	DX,WORD PTR WORD PTR [2*ICVAL+SI]+2
	JO	SHORT ACMP3	; (Jump shortened)
	OR	DX,DX
	JL	SHORT ACMP5	; (Jump shortened)
	MOV	AX,WORD PTR REG_IA
	OR	AX,DX
	JE	SHORT ACMP2	; (Jump shortened)
ACMP1:	MOV	BP,PRC_+0
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+8]
ACMP2:	MOV	BP,PRC_+0
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+6]
ACMP3:	MOV	DX,WORD PTR WORD PTR [2*ICVAL+SI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+SI]
	MOV	WORD PTR REG_IA,AX
	OR	DX,DX
	JL	ACMP1
	JMP	SHORT ACMP5	; (Jump shortened)
ACMP4:	LEA	BP,WORD PTR [2*RCVAL+SI]
	CALL	SBR_
	CALL	OVR_
	JNZ	SHORT ACMP6	; (Jump shortened)
	CALL	CPR_
	JA	ACMP1
	CALL	CPR_
	JE	ACMP2
ACMP5:	MOV	BP,PRC_+0
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+4]
ACMP6:	LEA	BP,WORD PTR [2*RCVAL+SI]
	CALL	LDR_
	CALL	CPR_
	JB	ACMP1
	JMP	ACMP5
ACMP7:	MOV	BP,PRC_+0
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
ACMP8:	MOV	BP,PRC_+0
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+2]
ALLOC:
	PUBLIC	ALLOC
ALOC1:	MOV	DI,DNAMP
	ADD	DI,CX
	JC	SHORT ALOC2	; (Jump shortened)
	CMP	DI,DNAME
	JA	SHORT ALOC2	; (Jump shortened)
	MOV	DNAMP,DI
	SUB	DI,CX
	RET
ALOC2:	MOV	ALLSV,BX
ALC2A:	XOR	BX,BX
	EVEN
	CALL	GBCOL
ALOC3:	MOV	DI,DNAMP
	ADD	DI,CX
	JC	SHORT ALC3A	; (Jump shortened)
	CMP	DI,DNAME
	JB	SHORT ALOC4	; (Jump shortened)
ALC3A:
	EVEN
	CALL	SYSMM
	SAL	DI,1
	ADD	DNAME,DI
	OR	DI,DI
	JNZ	ALOC3
	MOV	AX,RSMEM
	ADD	DNAME,AX
	XOR	AX,AX
	MOV	RSMEM,AX
	INC	ERRFT
	CALL	ERR_0
	DB	204
ALOC4:	MOV	WORD PTR ALLIA+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR ALLIA,AX
	MOV	BX,DNAME
	SUB	BX,DNAMP
	SHR	BX,1
	MOV	WORD PTR REG_IA,BX
	XOR	DX,DX
	MOV	BP,OFFSET MINDATA:ALFSF
	CALL	MLI_
	JO	SHORT ALOC5	; (Jump shortened)
	MOV	BX,DNAME
	SUB	BX,DNAMB
	SHR	BX,1
	MOV	ALDYN,BX
	MOV	AX,WORD PTR ALDYN
	SUB	WORD PTR REG_IA,AX
	SBB	DX,WORD PTR ALDYN+2
	OR	DX,DX
	JL	SHORT L0009
	JG	SHORT ALOC5	; (Jump shortened)
	CMP	WORD PTR REG_IA,0
	JNE	SHORT ALOC5	; (Jump shortened)
L0009	LABEL	NEAR
	EVEN
	CALL	SYSMM
	SAL	DI,1
	ADD	DNAME,DI
ALOC5:	MOV	DX,WORD PTR ALLIA+2
	MOV	AX,WORD PTR ALLIA
	MOV	WORD PTR REG_IA,AX
	MOV	BX,ALLSV
	JMP	ALOC1
ALOCS:
	PUBLIC	ALOCS
	CMP	CX,KVMXL
	JA	SHORT ALCS2	; (Jump shortened)
	MOV	DX,CX
	ADD	CX,1+2*SCSI_
	AND	CX,-2
	MOV	DI,DNAMP
	ADD	DI,CX
	JC	SHORT ALCS0	; (Jump shortened)
	CMP	DI,DNAME
	JB	SHORT ALCS1	; (Jump shortened)
ALCS0:	XOR	DI,DI
	EVEN
	CALL	ALLOC
	ADD	DI,CX
ALCS1:	MOV	DNAMP,DI
	DEC	DI
	DEC	DI
	XOR	AX,AX
	MOV	WORD PTR [DI],AX
	DEC	CX
	DEC	CX
	SUB	DI,CX
	MOV	WORD PTR [DI],OFFSET MINCODE:B_SCL
	MOV	WORD PTR [2*SCLEN+DI],DX
	RET
ALCS2:	CALL	ERR_0
	DB	205
ALOST:
	PUBLIC	ALOST
ALST1:	MOV	DI,STATE
	ADD	DI,CX
	JC	SHORT ALST2	; (Jump shortened)
	CMP	DI,DNAMB
	JAE	SHORT ALST2	; (Jump shortened)
	MOV	STATE,DI
	SUB	DI,CX
	RET
ALST2:	MOV	ALSTA,CX
	CMP	CX,2*E_STS
	JAE	SHORT ALST3	; (Jump shortened)
	MOV	CX,2*E_STS
ALST3:
	EVEN
	CALL	ALLOC
	MOV	DNAMP,DI
	MOV	BX,CX
	EVEN
	CALL	GBCOL
	MOV	CX,ALSTA
	JMP	ALST1
ARITH:
	PUBLIC	ARITH
	POP	PRC_+2
	POP	SI
	POP	DI
	MOV	CX,WORD PTR [SI]
	CMP	CX,OFFSET MINCODE:B_ICL
	JE	SHORT ARTH1	; (Jump shortened)
	CMP	CX,OFFSET MINCODE:B_RCL
	JE	SHORT ARTH4	; (Jump shortened)
	PUSH	DI
	MOV	DI,SI
	EVEN
	CALL	GTNUM
	DW	ARTH6
	MOV	SI,DI
	MOV	CX,WORD PTR [SI]
	POP	DI
	CMP	CX,OFFSET MINCODE:B_RCL
	JE	SHORT ARTH4	; (Jump shortened)
ARTH1:	CMP	WORD PTR [DI],OFFSET MINCODE:B_ICL
	JNE	SHORT ARTH3	; (Jump shortened)
ARTH2:	MOV	DX,WORD PTR WORD PTR [2*ICVAL+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+DI]
	MOV	WORD PTR REG_IA,AX
	MOV	AX,PRC_+2
	ADD	AX,6
	JMP	AX
ARTH3:
	EVEN
	CALL	GTNUM
	DW	ARTH7
	CMP	CX,OFFSET MINCODE:B_ICL
	JE	ARTH2
	PUSH	DI
	MOV	DX,WORD PTR WORD PTR [2*ICVAL+SI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+SI]
	MOV	WORD PTR REG_IA,AX
	CALL	ITR_
	EVEN
	CALL	RCBLD
	MOV	SI,DI
	POP	DI
	JMP	SHORT ARTH5	; (Jump shortened)
ARTH4:	CMP	WORD PTR [DI],OFFSET MINCODE:B_RCL
	JE	SHORT ARTH5	; (Jump shortened)
	EVEN
	CALL	GTREA
	DW	ARTH7
ARTH5:	LEA	BP,WORD PTR [2*RCVAL+DI]
	CALL	LDR_
	MOV	BP,PRC_+2
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+4]
ARTH6:	POP	AX
	MOV	BP,PRC_+2
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+2]
ARTH7:	MOV	BP,PRC_+2
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
ASIGN:
	PUBLIC	ASIGN
ASG01:	ADD	SI,CX
	MOV	DI,WORD PTR [SI]
	CMP	WORD PTR [DI],OFFSET MINCODE:B_TRT
	JE	SHORT ASG02	; (Jump shortened)
	MOV	WORD PTR [SI],BX
	XOR	SI,SI
	POP	AX
	INC	AX
	INC	AX
	JMP	AX
ASG02:	SUB	SI,CX
	CMP	DI,OFFSET MINDATA:TRBKV
	JE	ASG14
	CMP	DI,OFFSET MINDATA:TRBEV
	JNE	SHORT ASG04	; (Jump shortened)
	MOV	DI,WORD PTR [2*EVEXP+SI]
	PUSH	BX
	MOV	BX,NUM01
	EVEN
	CALL	EVALX
	DW	ASG03
	POP	BX
	JMP	ASG01
ASG03:	POP	AX
	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
ASG04:	PUSH	DI
ASG05:	MOV	DX,DI
	MOV	DI,WORD PTR [2*TRNXT+DI]
	CMP	WORD PTR [DI],OFFSET MINCODE:B_TRT
	JE	ASG05
	MOV	DI,DX
	MOV	WORD PTR [2*TRVAL+DI],BX
	POP	DI
ASG06:	MOV	BX,WORD PTR [2*TRTYP+DI]
	CMP	BX,TRTVL
	JE	SHORT ASG08	; (Jump shortened)
	CMP	BX,TRTOU
	JE	SHORT ASG10	; (Jump shortened)
ASG07:	MOV	DI,WORD PTR [2*TRNXT+DI]
	CMP	WORD PTR [DI],OFFSET MINCODE:B_TRT
	JE	ASG06
	POP	AX
	INC	AX
	INC	AX
	JMP	AX
ASG08:	CMP	KVTRA,0
	JZ	ASG07
	DEC	KVTRA
	CMP	WORD PTR [2*TRFNC+DI],0
	JZ	SHORT ASG09	; (Jump shortened)
	EVEN
	CALL	TRXEQ
	JMP	ASG07
ASG09:
	EVEN
	CALL	PRTSN
	EVEN
	CALL	PRTNV
	JMP	ASG07
ASG10:	CMP	KVOUP,0
	JZ	ASG07
ASG1B:	MOV	SI,DI
	MOV	DI,WORD PTR [2*TRNXT+DI]
	CMP	WORD PTR [DI],OFFSET MINCODE:B_TRT
	JE	ASG1B
	MOV	DI,SI
	PUSH	WORD PTR [2*TRVAL+DI]
	CALL	GTSTG
	DW	ASG12
ASG11:	MOV	CX,WORD PTR [2*TRFPT+SI]
	OR	CX,CX
	JZ	SHORT ASG13	; (Jump shortened)
ASG1A:
	EVEN
	CALL	SYSOU
	DW	ERR_-206
	DW	ERR_-207
	POP	AX
	INC	AX
	INC	AX
	JMP	AX
ASG12:
	EVEN
	CALL	DTYPE
	JMP	ASG11
ASG13:	CMP	WORD PTR [2*TRTER+SI],OFFSET MINDATA:V_TER
	JE	ASG1A
	INC	CX
	JMP	ASG1A
ASG14:	MOV	SI,WORD PTR [2*KVNUM+SI]
	CMP	SI,K_ETX
	JE	ASG19
	MOV	DI,BX
	EVEN
	CALL	GTINT
	DW	ERR_-208
	MOV	DX,WORD PTR WORD PTR [2*ICVAL+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+DI]
	MOV	WORD PTR REG_IA,AX
	CMP	SI,K_STL
	JE	SHORT ASG16	; (Jump shortened)
	OR	DX,DX
	JNE	ASG18
	MOV	CX,WORD PTR REG_IA
	OR	CX,CX
	JL	ASG18
	CMP	CX,MXLEN
	JA	ASG18
	CMP	SI,K_ERT
	JE	ASG17
	CMP	SI,K_PFL
	JE	ASG21
	CMP	SI,K_MXL
	JE	ASG24
	CMP	SI,K_FLS
	JE	ASG26
	CMP	SI,K_P__
	JB	SHORT ASG15	; (Jump shortened)
	CALL	ERR_0
	DB	209
ASG15:	MOV	KVABE[SI],CX
	POP	AX
	INC	AX
	INC	AX
	JMP	AX
ASG16:	MOV	AX,WORD PTR KVSTL
	SUB	WORD PTR REG_IA,AX
	SBB	DX,WORD PTR KVSTL+2
	MOV	AX,WORD PTR KVSTC
	ADD	WORD PTR REG_IA,AX
	ADC	DX,WORD PTR KVSTC+2
	MOV	WORD PTR KVSTC+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR KVSTC,AX
	MOV	DX,WORD PTR KVSTL+2
	MOV	AX,WORD PTR KVSTL
	MOV	WORD PTR REG_IA,AX
	OR	DX,DX
	JL	SHORT ASG25	; (Jump shortened)
	MOV	CX,STMCS
	SUB	CX,STMCT
	MOV	WORD PTR REG_IA,CX
	XOR	DX,DX
	NOT	DX
	NEG	WORD PTR REG_IA
	SBB	DX,-1
	MOV	AX,WORD PTR KVSTC
	ADD	WORD PTR REG_IA,AX
	ADC	DX,WORD PTR KVSTC+2
	MOV	WORD PTR KVSTC+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR KVSTC,AX
ASG25:	MOV	DX,WORD PTR WORD PTR [2*ICVAL+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+DI]
	MOV	WORD PTR REG_IA,AX
	MOV	WORD PTR KVSTL+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR KVSTL,AX
	EVEN
	CALL	STGCC
	POP	AX
	INC	AX
	INC	AX
	JMP	AX
ASG17:	CMP	CX,NINI9
	JBE	ERROR
ASG18:	CALL	ERR_0
	DB	210
ASG19:	PUSH	BX
	CALL	GTSTG
	DW	ERR_-211
	MOV	R_ETX,DI
	POP	AX
	INC	AX
	INC	AX
	JMP	AX
ASG21:	CMP	CX,NUM02
	JA	ASG18
	OR	CX,CX
	JZ	ASG15
	CMP	PFDMP,0
	JZ	SHORT ASG22	; (Jump shortened)
	CMP	CX,PFDMP
	JE	SHORT ASG23	; (Jump shortened)
	CALL	ERR_1
	DB	12
ASG22:	MOV	PFDMP,CX
ASG23:	MOV	KVPFL,CX
	EVEN
	CALL	STGCC
	EVEN
	CALL	SYSTM
	MOV	WORD PTR PFSTM+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR PFSTM,AX
	POP	AX
	INC	AX
	INC	AX
	JMP	AX
ASG24:	CMP	CX,MNLEN
	JAE	ASG15
	CALL	ERR_1
	DB	31
ASG26:	OR	CX,CX
	JNZ	ASG15
	CALL	ERR_1
	DB	18
ASINP:
	PUBLIC	ASINP
	ADD	SI,CX
	MOV	DI,WORD PTR [SI]
	CMP	WORD PTR [DI],OFFSET MINCODE:B_TRT
	JE	SHORT ASNP1	; (Jump shortened)
	MOV	WORD PTR [SI],BX
	XOR	SI,SI
	POP	AX
	INC	AX
	INC	AX
	JMP	AX
ASNP1:	SUB	SI,CX
	PUSH	PMSSL
	PUSH	PMHBS
	PUSH	R_PMS
	PUSH	PMDFL
	EVEN
	CALL	ASIGN
	DW	ASNP2
	POP	PMDFL
	POP	R_PMS
	POP	PMHBS
	POP	PMSSL
	POP	AX
	INC	AX
	INC	AX
	JMP	AX
ASNP2:	POP	PMDFL
	POP	R_PMS
	POP	PMHBS
	POP	PMSSL
	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
BLKLN:
	PUBLIC	BLKLN
	MOV	SI,CX
	MOV	SI,CS:[SI-2]
	INC	SI
	CMP	SI,BL___+1
	SBB	AX,AX
	AND	SI,AX
	SHL	SI,1
	JMP	CS:WORD PTR L0010[SI]
L0010	DW	OFFSET MINCODE:BLN00
	DW	OFFSET MINCODE:BLN01
	DW	OFFSET MINCODE:BLN12
	DW	OFFSET MINCODE:BLN12
	DW	OFFSET MINCODE:BLN07
	DW	OFFSET MINCODE:BLN03
	DW	OFFSET MINCODE:BLN02
	DW	OFFSET MINCODE:BLN03
	DW	OFFSET MINCODE:BLN04
	DW	OFFSET MINCODE:BLN09
	DW	OFFSET MINCODE:BLN10
	DW	OFFSET MINCODE:BLN02
	DW	OFFSET MINCODE:BLN01
	DW	OFFSET MINCODE:BLN01
	DW	OFFSET MINCODE:BLN00
	DW	OFFSET MINCODE:BLN00
	DW	OFFSET MINCODE:BLN00
	DW	OFFSET MINCODE:BLN08
	DW	OFFSET MINCODE:BLN05
	DW	OFFSET MINCODE:BLN00
	DW	OFFSET MINCODE:BLN00
	DW	OFFSET MINCODE:BLN00
	DW	OFFSET MINCODE:BLN06
	DW	OFFSET MINCODE:BLN01
	DW	OFFSET MINCODE:BLN01
	DW	OFFSET MINCODE:BLN03
	DW	OFFSET MINCODE:BLN05
	DW	OFFSET MINCODE:BLN03
	DW	OFFSET MINCODE:BLN01
	DW	OFFSET MINCODE:BLN04
BLN00:	MOV	CX,WORD PTR [2*1+DI]
	RET
BLN01:	MOV	CX,WORD PTR [2*2+DI]
	RET
BLN02:	MOV	CX,2*NUM02
	RET
BLN03:	MOV	CX,2*NUM03
	RET
BLN04:	MOV	CX,2*NUM04
	RET
BLN05:	MOV	CX,2*NUM05
	RET
BLN06:	MOV	CX,2*CTSI_
	RET
BLN07:	MOV	CX,2*ICSI_
	RET
BLN08:	MOV	SI,WORD PTR [2*PDDFP+DI]
	MOV	CX,WORD PTR [2*DFPDL+SI]
	RET
BLN09:	MOV	CX,2*RCSI_
	RET
BLN10:	MOV	CX,WORD PTR [2*SCLEN+DI]
	ADD	CX,1+2*SCSI_
	AND	CX,-2
	RET
BLN12:	MOV	CX,WORD PTR [2*3+DI]
	RET
COPYB:
	PUBLIC	COPYB
	POP	PRC_+4
	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
	CMP	DI,OFFSET MINDATA:NULLS
	JE	COP10
	MOV	CX,WORD PTR [DI]
	MOV	BX,CX
	EVEN
	CALL	BLKLN
	MOV	SI,DI
	EVEN
	CALL	ALLOC
	MOV	BP,SP
	MOV	WORD PTR [BP],DI
	SHR	CX,1
	REP	MOVSW
	XOR	SI,SI
;	 MOV  BP,SP	; (Redundant)
	MOV	DI,WORD PTR [BP]
	CMP	BX,OFFSET MINCODE:B_TBT
	JE	SHORT COP05	; (Jump shortened)
	CMP	BX,OFFSET MINCODE:B_VCT
	JE	SHORT COP01	; (Jump shortened)
	CMP	BX,OFFSET MINCODE:B_PDT
	JE	SHORT COP01	; (Jump shortened)
	CMP	BX,OFFSET MINCODE:B_ART
	JNE	COP10
	ADD	DI,WORD PTR [2*AROFS+DI]
	JMP	SHORT COP02	; (Jump shortened)
COP01:	ADD	DI,2*PDFLD
COP02:	MOV	SI,WORD PTR [DI]
COP03:	CMP	WORD PTR [SI],OFFSET MINCODE:B_TRT
	JNE	SHORT COP04	; (Jump shortened)
	MOV	SI,WORD PTR [2*TRVAL+SI]
	JMP	COP03
COP04:	MOV	AX,SI
	STOSW
	CMP	DI,DNAMP
	JNE	COP02
	JMP	SHORT COP09	; (Jump shortened)
COP05:	XOR	AX,AX
	MOV	WORD PTR [2*IDVAL+DI],AX
	MOV	CX,2*TESI_
	MOV	DX,2*TBBUK
COP06:	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
	CMP	DX,WORD PTR [2*TBLEN+DI]
	JE	SHORT COP09	; (Jump shortened)
	MOV	BX,DX
	SUB	BX,2*TENXT
	ADD	DI,BX
	INC	DX
	INC	DX
COP07:	MOV	SI,WORD PTR [2*TENXT+DI]
	MOV	BP,SP
	MOV	AX,WORD PTR [BP]
	MOV	WORD PTR [2*TENXT+DI],AX
	CMP	WORD PTR [SI],OFFSET MINCODE:B_TBT
	JE	COP06
	SUB	DI,BX
	PUSH	DI
	MOV	CX,2*TESI_
	EVEN
	CALL	ALLOC
	PUSH	DI
	SHR	CX,1
	REP	MOVSW
	POP	DI
	POP	SI
	ADD	SI,BX
	MOV	WORD PTR [2*TENXT+SI],DI
	MOV	SI,DI
COP08:	MOV	SI,WORD PTR [2*TEVAL+SI]
	CMP	WORD PTR [SI],OFFSET MINCODE:B_TRT
	JE	COP08
	MOV	WORD PTR [2*TEVAL+DI],SI
	XOR	BX,BX
	JMP	COP07
COP09:	POP	DI
	MOV	AX,PRC_+4
	INC	AX
	INC	AX
	JMP	AX
COP10:	MOV	BP,PRC_+4
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
CDGCG:
	PUBLIC	CDGCG
	MOV	SI,WORD PTR [2*CMOPN+DI]
	MOV	DI,WORD PTR [2*CMROP+DI]
	CMP	SI,OFFSET MINDATA:OPDVD
	JE	SHORT CDGC2	; (Jump shortened)
	EVEN
	CALL	CDGNM
CDGC1:	MOV	CX,SI
	EVEN
	CALL	CDWRD
	RET
CDGC2:
	EVEN
	CALL	CDGVL
	JMP	CDGC1
CDGEX:
	PUBLIC	CDGEX
	CMP	WORD PTR [SI],OFFSET MINCODE:B_VR_
	JB	SHORT CDGX1	; (Jump shortened)
	MOV	CX,2*SESI_
	EVEN
	CALL	ALLOC
	MOV	WORD PTR [DI],OFFSET MINCODE:B_SEL
	MOV	WORD PTR [2*SEVAR+DI],SI
	RET
CDGX1:	MOV	DI,SI
	PUSH	DX
	MOV	SI,CWCOF
	OR	CX,CX
	JZ	SHORT CDGX2	; (Jump shortened)
	MOV	CX,WORD PTR [DI]
	CMP	CX,OFFSET MINCODE:B_CMT
	JNE	SHORT CDGX2	; (Jump shortened)
	CMP	WORD PTR [2*CMTYP+DI],C__NM
	JAE	SHORT CDGX2	; (Jump shortened)
	EVEN
	CALL	CDGNM
	MOV	CX,OFFSET MINDATA:ORNM_
	JMP	SHORT CDGX3	; (Jump shortened)
CDGX2:
	EVEN
	CALL	CDGVL
	MOV	CX,OFFSET MINDATA:ORVL_
CDGX3:
	EVEN
	CALL	CDWRD
	EVEN
	CALL	EXBLD
	POP	DX
	RET
CDGNM:
	PUBLIC	CDGNM
	PUSH	SI
	PUSH	BX
	CMP	SP,LOWSPMIN
	JB	SEC06
	MOV	CX,WORD PTR [DI]
	CMP	CX,OFFSET MINCODE:B_CMT
	JE	SHORT CGN04	; (Jump shortened)
	CMP	CX,OFFSET MINCODE:B_VR_
	JA	SHORT CGN02	; (Jump shortened)
CGN01:	CALL	ERR_0
	DB	212
CGN02:	MOV	CX,OFFSET MINDATA:OLVN_
	EVEN
	CALL	CDWRD
	MOV	CX,DI
	EVEN
	CALL	CDWRD
CGN03:	POP	BX
	POP	SI
	RET
CGN04:	MOV	SI,DI
	MOV	DI,WORD PTR [2*CMTYP+DI]
	CMP	DI,C__NM
	JAE	CGN01
	SHL	DI,1
	JMP	CS:WORD PTR L0011[DI]
L0011	LABEL	WORD
	DW	OFFSET MINCODE:CGN05
	DW	OFFSET MINCODE:CGN08
	DW	OFFSET MINCODE:CGN09
	DW	OFFSET MINCODE:CGN10
	DW	OFFSET MINCODE:CGN11
	DW	OFFSET MINCODE:CGN08
	DW	OFFSET MINCODE:CGN08
CGN05:	MOV	BX,2*CMOPN
CGN06:
	EVEN
	CALL	CMGEN
	MOV	DX,WORD PTR [2*CMLEN+SI]
	CMP	BX,DX
	JB	CGN06
	MOV	CX,OFFSET MINDATA:OAON_
	CMP	DX,2*CMAR1
	JE	SHORT CGN07	; (Jump shortened)
	MOV	CX,OFFSET MINDATA:OAMN_
	EVEN
	CALL	CDWRD
	MOV	CX,DX
	SHR	CX,1
	SUB	CX,CMVLS
CGN07:	MOV	DX,SP
	EVEN
	CALL	CDWRD
	JMP	CGN03
CGN08:	MOV	DI,SI
	EVEN
	CALL	CDGVL
	MOV	CX,OFFSET MINDATA:OFNE_
	JMP	CGN07
CGN09:	MOV	DI,WORD PTR [2*CMROP+SI]
	CMP	WORD PTR [DI],OFFSET MINCODE:B_VR_
	JA	CGN02
	MOV	SI,DI
	MOV	CX,NUM01
	EVEN
	CALL	CDGEX
	MOV	CX,OFFSET MINDATA:OLEX_
	EVEN
	CALL	CDWRD
	MOV	CX,DI
	EVEN
	CALL	CDWRD
	JMP	CGN03
CGN10:	MOV	DI,WORD PTR [2*CMROP+SI]
	EVEN
	CALL	CDGVL
	MOV	CX,OFFSET MINDATA:OINN_
	JMP	SHORT CGN12	; (Jump shortened)
CGN11:	MOV	DI,WORD PTR [2*CMROP+SI]
	EVEN
	CALL	CDGNM
	MOV	CX,OFFSET MINDATA:OKWN_
CGN12:
	EVEN
	CALL	CDWRD
	JMP	CGN03
CDGVL:
	PUBLIC	CDGVL
	MOV	CX,WORD PTR [DI]
	CMP	CX,OFFSET MINCODE:B_CMT
	JE	SHORT CGV01	; (Jump shortened)
	CMP	CX,OFFSET MINCODE:B_VRA
	JB	SHORT CGV00	; (Jump shortened)
	CMP	WORD PTR [2*VRLEN+DI],0
	JNZ	SHORT CGVL0	; (Jump shortened)
	PUSH	DI
	MOV	DI,WORD PTR [2*VRSVP+DI]
	MOV	CX,WORD PTR [2*SVBIT+DI]
	POP	DI
	AND	CX,BTKWV
	CMP	CX,BTKWV
	JE	SHORT CGV00	; (Jump shortened)
CGVL0:	MOV	DX,SP
CGV00:	MOV	CX,DI
	EVEN
	CALL	CDWRD
	RET
CGV01:	PUSH	BX
	PUSH	SI
	PUSH	DX
	PUSH	CWCOF
	CMP	SP,LOWSPMIN
	JB	SEC06
	MOV	SI,DI
	MOV	DI,WORD PTR [2*CMTYP+DI]
	MOV	DX,CSWNO
	CMP	DI,C_PR_
	JBE	SHORT CGV02	; (Jump shortened)
	MOV	DX,SP
CGV02:	SHL	DI,1
	JMP	CS:WORD PTR L0012[DI]
L0012	LABEL	WORD
	DW	OFFSET MINCODE:CGV03
	DW	OFFSET MINCODE:CGV05
	DW	OFFSET MINCODE:CGV14
	DW	OFFSET MINCODE:CGV31
	DW	OFFSET MINCODE:CGV27
	DW	OFFSET MINCODE:CGV29
	DW	OFFSET MINCODE:CGV30
	DW	OFFSET MINCODE:CGV18
	DW	OFFSET MINCODE:CGV19
	DW	OFFSET MINCODE:CGV18
	DW	OFFSET MINCODE:CGV24
	DW	OFFSET MINCODE:CGV24
	DW	OFFSET MINCODE:CGV27
	DW	OFFSET MINCODE:CGV26
	DW	OFFSET MINCODE:CGV21
	DW	OFFSET MINCODE:CGV31
	DW	OFFSET MINCODE:CGV28
	DW	OFFSET MINCODE:CGV15
	DW	OFFSET MINCODE:CGV18
CGV03:	MOV	BX,2*CMOPN
CGV04:
	EVEN
	CALL	CMGEN
	MOV	DX,WORD PTR [2*CMLEN+SI]
	CMP	BX,DX
	JB	CGV04
	MOV	CX,OFFSET MINDATA:OAOV_
	CMP	DX,2*CMAR1
	JE	CGV32
	MOV	CX,OFFSET MINDATA:OAMV_
	EVEN
	CALL	CDWRD
	MOV	CX,DX
	SUB	CX,2*CMVLS
	SHR	CX,1
	JMP	CGV32
CGV05:	MOV	BX,2*CMVLS
CGV06:	CMP	BX,WORD PTR [2*CMLEN+SI]
	JE	SHORT CGV07	; (Jump shortened)
	EVEN
	CALL	CMGEN
	JMP	CGV06
CGV07:	SUB	BX,2*CMVLS
	SHR	BX,1
	MOV	DI,WORD PTR [2*CMOPN+SI]
	CMP	WORD PTR [2*VRLEN+DI],0
	JNZ	SHORT CGV12	; (Jump shortened)
	MOV	SI,WORD PTR [2*VRSVP+DI]
	MOV	CX,WORD PTR [2*SVBIT+SI]
	AND	CX,BTFFC
;	OR	CX,CX	(Optimized)
	JZ	SHORT CGV12	; (Jump shortened)
	MOV	CX,WORD PTR [2*SVBIT+SI]
	AND	CX,BTPRE
;	OR	CX,CX	(Optimized)
	JNZ	SHORT CGV08	; (Jump shortened)
	MOV	DX,SP
CGV08:	MOV	SI,WORD PTR [2*VRFNC+DI]
	MOV	CX,WORD PTR [2*FARGS+SI]
	CMP	CX,BX
	JE	SHORT CGV11	; (Jump shortened)
	CMP	CX,BX
	JA	SHORT CGV09	; (Jump shortened)
	SUB	BX,CX
	MOV	CX,OFFSET MINDATA:OPOP_
	JMP	SHORT CGV10	; (Jump shortened)
CGV09:	SUB	CX,BX
	MOV	BX,CX
	MOV	CX,OFFSET MINDATA:NULLS
CGV10:
	EVEN
	CALL	CDWRD
	DEC	BX
	JNZ	CGV10
CGV11:	MOV	CX,SI
	JMP	CGV36
CGV12:	MOV	CX,OFFSET MINDATA:OFNS_
	CMP	BX,NUM01
	JE	SHORT CGV13	; (Jump shortened)
	MOV	CX,OFFSET MINDATA:OFNC_
	EVEN
	CALL	CDWRD
	MOV	CX,BX
CGV13:
	EVEN
	CALL	CDWRD
	MOV	CX,DI
	JMP	CGV32
CGV14:	MOV	SI,WORD PTR [2*CMROP+SI]
	XOR	CX,CX
	EVEN
	CALL	CDGEX
	MOV	CX,DI
	EVEN
	CALL	CDWRD
	JMP	CGV34
CGV15:	XOR	AX,AX
	PUSH	AX
	XOR	AX,AX
	PUSH	AX
	MOV	BX,2*CMVLS
	MOV	CX,OFFSET MINDATA:OSLA_
CGV16:
	EVEN
	CALL	CDWRD
	MOV	BP,SP
	MOV	AX,CWCOF
	MOV	WORD PTR [BP],AX
	EVEN
	CALL	CDWRD
	EVEN
	CALL	CMGEN
	MOV	CX,OFFSET MINDATA:OSLB_
	EVEN
	CALL	CDWRD
	MOV	BP,SP
	MOV	CX,WORD PTR [2*1+BP]
;	 MOV  BP,SP	; (Redundant)
	MOV	AX,CWCOF
	MOV	WORD PTR [2*1+BP],AX
	EVEN
	CALL	CDWRD
	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
	ADD	DI,R_CCB
	MOV	AX,CWCOF
	MOV	WORD PTR [DI],AX
	MOV	CX,OFFSET MINDATA:OSLC_
	MOV	DI,BX
	INC	DI
	INC	DI
	CMP	DI,WORD PTR [2*CMLEN+SI]
	JB	CGV16
	MOV	CX,OFFSET MINDATA:OSLD_
	EVEN
	CALL	CDWRD
	EVEN
	CALL	CMGEN
	POP	AX
	POP	DI
CGV17:	ADD	DI,R_CCB
	MOV	CX,WORD PTR [DI]
	MOV	AX,CWCOF
	MOV	WORD PTR [DI],AX
	MOV	DI,CX
	OR	CX,CX
	JNZ	CGV17
	JMP	CGV33
CGV18:	MOV	DI,WORD PTR [2*CMLOP+SI]
	EVEN
	CALL	CDGVL
CGV19:	MOV	DI,WORD PTR [2*CMROP+SI]
	EVEN
	CALL	CDGVL
CGV20:	MOV	CX,WORD PTR [2*CMOPN+SI]
	JMP	CGV36
CGV21:	MOV	DI,WORD PTR [2*CMLOP+SI]
	CMP	WORD PTR [DI],OFFSET MINCODE:B_VR_
	JB	SHORT CGV22	; (Jump shortened)
	MOV	DI,WORD PTR [2*CMROP+SI]
	EVEN
	CALL	CDGVL
	MOV	CX,WORD PTR [2*CMLOP+SI]
	ADD	CX,2*VRSTO
	JMP	CGV32
CGV22:
	EVEN
	CALL	EXPAP
	DW	CGV23
	MOV	AX,WORD PTR [2*CMROP+DI]
	MOV	WORD PTR [2*CMLOP+SI],AX
	MOV	DI,WORD PTR [2*CMLOP+DI]
	EVEN
	CALL	CDGNM
	MOV	DI,WORD PTR [2*CMLOP+SI]
	EVEN
	CALL	CDGVL
	MOV	CX,OFFSET MINDATA:OPMN_
	EVEN
	CALL	CDWRD
	MOV	DI,WORD PTR [2*CMROP+SI]
	EVEN
	CALL	CDGVL
	MOV	CX,OFFSET MINDATA:ORPL_
	JMP	CGV32
CGV23:	MOV	DX,SP
	EVEN
	CALL	CDGNM
	JMP	CGV31
CGV24:	MOV	DI,WORD PTR [2*CMLOP+SI]
	CMP	WORD PTR [DI],OFFSET MINCODE:B_CMT
	JNE	CGV18
	MOV	BX,WORD PTR [2*CMTYP+DI]
	CMP	BX,C_INT
	JE	SHORT CGV25	; (Jump shortened)
	CMP	BX,C_NEG
	JE	SHORT CGV25	; (Jump shortened)
	CMP	BX,C_FNC
	JNE	CGV18
	MOV	DI,WORD PTR [2*CMOPN+DI]
	CMP	WORD PTR [2*VRLEN+DI],0
	JNZ	CGV18
	MOV	DI,WORD PTR [2*VRSVP+DI]
	MOV	CX,WORD PTR [2*SVBIT+DI]
	AND	CX,BTPRD
;	OR	CX,CX	(Optimized)
	JZ	CGV18
CGV25:	MOV	DI,WORD PTR [2*CMLOP+SI]
	EVEN
	CALL	CDGVL
	MOV	CX,OFFSET MINDATA:OPOP_
	EVEN
	CALL	CDWRD
	MOV	DI,WORD PTR [2*CMROP+SI]
	EVEN
	CALL	CDGVL
	JMP	CGV33
CGV26:	MOV	DI,WORD PTR [2*CMLOP+SI]
	EVEN
	CALL	CDGVL
CGV27:	MOV	DI,WORD PTR [2*CMROP+SI]
	EVEN
	CALL	CDGNM
	MOV	DI,WORD PTR [2*CMOPN+SI]
	CMP	WORD PTR [DI],OFFSET MINCODE:O_KWV
	JNE	CGV20
	OR	DX,DX
	JNZ	CGV20
	MOV	DX,SP
	MOV	DI,WORD PTR [2*CMROP+SI]
	CMP	WORD PTR [2*VRLEN+DI],0
	JNZ	CGV20
	MOV	DI,WORD PTR [2*VRSVP+DI]
	MOV	CX,WORD PTR [2*SVBIT+DI]
	AND	CX,BTCKW
;	OR	CX,CX	(Optimized)
	JZ	CGV20
	XOR	DX,DX
	JMP	CGV20
CGV28:	MOV	CX,OFFSET MINDATA:ONTA_
	EVEN
	CALL	CDWRD
	MOV	BX,CWCOF
	EVEN
	CALL	CDWRD
	MOV	DI,WORD PTR [2*CMROP+SI]
	EVEN
	CALL	CDGVL
	MOV	CX,OFFSET MINDATA:ONTB_
	EVEN
	CALL	CDWRD
	MOV	DI,BX
	ADD	DI,R_CCB
	MOV	AX,CWCOF
	MOV	WORD PTR [DI],AX
	MOV	CX,OFFSET MINDATA:ONTC_
	JMP	SHORT CGV32	; (Jump shortened)
CGV29:	MOV	DI,WORD PTR [2*CMLOP+SI]
	EVEN
	CALL	CDGVL
CGV30:	MOV	BX,C_UO_
	SUB	BX,WORD PTR [2*CMTYP+SI]
	MOV	DI,WORD PTR [2*CMROP+SI]
	EVEN
	CALL	CDGVL
	MOV	DI,WORD PTR [2*CMOPN+SI]
	MOV	DI,WORD PTR [2*DVOPN+DI]
	SAL	DI,1
	ADD	DI,OFFSET MINDATA:R_UBA
	SUB	DI,2*VRFNC
	JMP	CGV12
CGV31:	MOV	DX,SP
	JMP	CGV19
CGV32:
	EVEN
	CALL	CDWRD
CGV33:	MOV	DX,SP
CGV34:	POP	AX
	POP	CX
	POP	SI
	POP	BX
	OR	DX,DX
	JNZ	SHORT CGV35	; (Jump shortened)
	MOV	DX,CX
CGV35:	RET
CGV36:
	EVEN
	CALL	CDWRD
	OR	DX,DX
	JNZ	CGV34
	MOV	CX,OFFSET MINDATA:ORVL_
	EVEN
	CALL	CDWRD
	MOV	BP,SP
	MOV	SI,WORD PTR [BP]
	EVEN
	CALL	EXBLD
	XOR	BX,BX
	EVEN
	CALL	EVALX
	DW	ERR_-299
	MOV	CX,WORD PTR [DI]
	CMP	CX,OFFSET MINCODE:P_AAA
	JB	SHORT CGV37	; (Jump shortened)
	MOV	CX,OFFSET MINDATA:OLPT_
	EVEN
	CALL	CDWRD
CGV37:	MOV	CX,DI
	EVEN
	CALL	CDWRD
	XOR	DX,DX
	JMP	CGV34
CDWRD:
	PUBLIC	CDWRD
	PUSH	DI
	PUSH	CX
CDWD1:	MOV	DI,R_CCB
	OR	DI,DI
	JNZ	SHORT CDWD2	; (Jump shortened)
	MOV	CX,2*E_CBS
	EVEN
	CALL	ALLOC
	MOV	WORD PTR [DI],OFFSET MINCODE:B_CCT
	MOV	CWCOF,2*CCCOD
	MOV	WORD PTR [2*CCLEN+DI],CX
	XOR	AX,AX
	MOV	WORD PTR [2*CCSLN+DI],AX
	MOV	R_CCB,DI
CDWD2:	MOV	CX,CWCOF
	ADD	CX,2*NUM05
	CMP	CX,WORD PTR [2*CCLEN+DI]
	JB	SHORT CDWD4	; (Jump shortened)
	CMP	CX,MXLEN
	JAE	SHORT CDWD5	; (Jump shortened)
	ADD	CX,2*E_CBS
	PUSH	SI
	MOV	SI,DI
	CMP	CX,MXLEN
	JB	SHORT CDWD3	; (Jump shortened)
	MOV	CX,MXLEN
CDWD3:
	EVEN
	CALL	ALLOC
	MOV	R_CCB,DI
	MOV	AX,OFFSET MINCODE:B_CCT
	STOSW
	MOV	AX,CX
	STOSW
	MOV	AX,WORD PTR [2*CCSLN+SI]
	STOSW
	ADD	SI,2*CCUSE
	MOV	CX,WORD PTR [SI]
	SHR	CX,1
	REP	MOVSW
	POP	SI
	JMP	CDWD1
CDWD4:	MOV	CX,CWCOF
	INC	CX
	INC	CX
	MOV	CWCOF,CX
	MOV	WORD PTR [2*CCUSE+DI],CX
	DEC	CX
	DEC	CX
	ADD	DI,CX
	POP	CX
	MOV	WORD PTR [DI],CX
	POP	DI
	RET
CDWD5:	CALL	ERR_0
	DB	213
CMGEN:
	PUBLIC	CMGEN
	MOV	DI,SI
	ADD	DI,BX
	MOV	DI,WORD PTR [DI]
	EVEN
	CALL	CDGVL
	INC	BX
	INC	BX
	RET
CMPIL:
	PUBLIC	CMPIL
	MOV	BX,CMNEN
CMP00:	XOR	AX,AX
	PUSH	AX
	DEC	BX
	JNZ	CMP00
	MOV	CMPXS,SP
CMP01:	MOV	BX,SCNPT
	MOV	SCNSE,BX
	MOV	CX,OFFSET MINDATA:OCER_
	EVEN
	CALL	CDWRD
	CMP	BX,SCNIL
	JB	SHORT CMP04	; (Jump shortened)
CMPCE:	XOR	DI,DI
	CMP	CNIND,0
	JNZ	SHORT CMPC2	; (Jump shortened)
	CMP	STAGE,STGIC
	JNE	SHORT CMP02	; (Jump shortened)
CMPC2:
	EVEN
	CALL	READR
	OR	DI,DI
	JZ	CMP09
	EVEN
	CALL	NEXTS
	MOV	AX,CMPSN
	MOV	LSTSN,AX
	MOV	AX,RDCLN
	MOV	CMPLN,AX
	XOR	AX,AX
	MOV	SCNPT,AX
	JMP	SHORT CMP04	; (Jump shortened)
CMP02:	MOV	DI,R_CIM
	MOV	BX,SCNPT
	LEA	DI,[CFP_F+DI+BX]
CMP03:	MOV	AX,SCNPT
	CMP	AX,SCNIL
	JAE	CMP09
	MOV	DL,[DI]
	XOR	DH,DH
	INC	DI
	INC	SCNPT
	CMP	DX,CH_SM
	JNE	CMP03
CMP04:	MOV	DI,R_CIM
	MOV	BX,SCNPT
	MOV	CX,BX
	LEA	DI,[CFP_F+DI+BX]
	MOV	DL,[DI]
	XOR	DH,DH
	INC	DI
	CMP	DX,CH_SM
	JE	CMP12
	CMP	DX,CH_AS
	JE	CMPCE
	CMP	DX,CH_MN
	JE	CMP32
	MOV	AX,R_CIM
	MOV	R_CMP,AX
	MOV	SI,OFFSET MINDATA:CMLAB
	MOV	R_CIM,SI
	ADD	SI,CFP_F
	MOV	[SI],DL
	INC	SI
	MOV	DX,CH_SM
	MOV	[SI],DL
	XOR	SI,SI
	XOR	AX,AX
	MOV	SCNPT,AX
	PUSH	SCNIL
	MOV	SCNIL,NUM02
	EVEN
	CALL	SCANE
	POP	SCNIL
	MOV	DX,SI
	MOV	SI,R_CMP
	MOV	R_CIM,SI
	MOV	SCNPT,BX
	CMP	SCNBL,0
	JNZ	CMP12
	MOV	DI,SI
	LEA	DI,[CFP_F+DI+BX]
	CMP	DX,T_VAR
	JE	SHORT CMP06	; (Jump shortened)
	CMP	DX,T_CON
	JE	SHORT CMP06	; (Jump shortened)
CMPLE:	MOV	AX,R_CMP
	MOV	R_CIM,AX
	CALL	ERR_0
	DB	214
CMP05:	CMP	DX,CH_SM
	JE	SHORT CMP07	; (Jump shortened)
	INC	CX
	CMP	CX,SCNIL
	JE	SHORT CMP07	; (Jump shortened)
CMP06:	MOV	DL,[DI]
	XOR	DH,DH
	INC	DI
	CMP	DX,CH_HT
	JE	SHORT CMP07	; (Jump shortened)
	CMP	DX,CH_BL
	JNE	CMP05
CMP07:	MOV	SCNPT,CX
	SUB	CX,BX
;	OR	CX,CX	(Optimized)
	JZ	CMP12
	XOR	DI,DI
	EVEN
	CALL	SBSTR
	EVEN
	CALL	GTNVR
	DW	ERR_-299
	MOV	BP,SP
	MOV	WORD PTR [2*CMLBL+BP],DI
	CMP	WORD PTR [2*VRLEN+DI],0
	JNZ	SHORT CMP11	; (Jump shortened)
	CMP	WORD PTR [2*VRSVP+DI],OFFSET MINDATA:V_END
	JNE	SHORT CMP11	; (Jump shortened)
	ADD	STAGE,STGND
	EVEN
	CALL	SCANE
	CMP	SI,T_SMC
	JE	SHORT CMP10	; (Jump shortened)
	CMP	SI,T_VAR
	JNE	SHORT CMP08	; (Jump shortened)
	CMP	WORD PTR [2*VRLBL+DI],OFFSET MINDATA:STNDL
	JE	SHORT CMP08	; (Jump shortened)
	MOV	BP,SP
	MOV	AX,WORD PTR [2*VRLBL+DI]
	MOV	WORD PTR [2*CMTRA+BP],AX
	EVEN
	CALL	SCANE
	CMP	SI,T_SMC
	JE	SHORT CMP10	; (Jump shortened)
CMP08:	CALL	ERR_0
	DB	215
CMP09:	XOR	DI,DI
	ADD	STAGE,STGND
	CMP	STAGE,STGXE
	JE	SHORT CMP10	; (Jump shortened)
	CALL	ERR_0
	DB	216
CMP10:	MOV	CX,OFFSET MINDATA:OSTP_
	EVEN
	CALL	CDWRD
	JMP	CMPSE
CMP11:	CMP	STAGE,STGIC
	JNE	SHORT CMP12	; (Jump shortened)
	CMP	WORD PTR [2*VRLBL+DI],OFFSET MINDATA:STNDL
	JE	SHORT CMP12	; (Jump shortened)
	MOV	BP,SP
	XOR	AX,AX
	MOV	WORD PTR [2*CMLBL+BP],AX
	CALL	ERR_0
	DB	217
CMP12:	XOR	BX,BX
	EVEN
	CALL	EXPAN
	MOV	BP,SP
	MOV	WORD PTR [2*CMSTM+BP],DI
;	 MOV  BP,SP	; (Redundant)
	XOR	AX,AX
	MOV	WORD PTR [2*CMSGO+BP],AX
;	 MOV  BP,SP	; (Redundant)
	XOR	AX,AX
	MOV	WORD PTR [2*CMFGO+BP],AX
;	 MOV  BP,SP	; (Redundant)
	XOR	AX,AX
	MOV	WORD PTR [2*CMCGO+BP],AX
	EVEN
	CALL	SCANE
	CMP	SI,T_COL
	JE	SHORT CMP13	; (Jump shortened)
	CMP	CSWNO,0
	JNZ	CMP18
	MOV	BP,SP
	CMP	WORD PTR [2*CMLBL+BP],0
	JNZ	CMP18
;	 MOV  BP,SP	; (Redundant)
	MOV	DI,WORD PTR [2*CMSTM+BP]
	MOV	CX,WORD PTR [DI]
	CMP	CX,OFFSET MINCODE:B_CMT
	JE	CMP18
	CMP	CX,OFFSET MINCODE:B_VRA
	JAE	SHORT CMP18	; (Jump shortened)
	MOV	SI,R_CCB
	MOV	WORD PTR [2*CCUSE+SI],2*CCCOD
	MOV	CWCOF,2*CCCOD
	INC	CMPSN
	JMP	CMP01
CMP13:	MOV	SCNGO,SP
	EVEN
	CALL	SCANE
	CMP	SI,T_SMC
	JE	CMP31
	CMP	SI,T_SGO
	JE	SHORT CMP14	; (Jump shortened)
	CMP	SI,T_FGO
	JE	SHORT CMP16	; (Jump shortened)
	MOV	SCNRS,SP
	EVEN
	CALL	SCNGF
	MOV	BP,SP
	CMP	WORD PTR [2*CMFGO+BP],0
	JNZ	SHORT CMP17	; (Jump shortened)
;	 MOV  BP,SP	; (Redundant)
	MOV	WORD PTR [2*CMFGO+BP],DI
	JMP	SHORT CMP15	; (Jump shortened)
CMP14:
	EVEN
	CALL	SCNGF
	MOV	BP,SP
	MOV	WORD PTR [2*CMCGO+BP],NUM01
CMP15:	MOV	BP,SP
	CMP	WORD PTR [2*CMSGO+BP],0
	JNZ	SHORT CMP17	; (Jump shortened)
;	 MOV  BP,SP	; (Redundant)
	MOV	WORD PTR [2*CMSGO+BP],DI
	JMP	CMP13
CMP16:
	EVEN
	CALL	SCNGF
	MOV	BP,SP
	MOV	WORD PTR [2*CMCGO+BP],NUM01
;	 MOV  BP,SP	; (Redundant)
	CMP	WORD PTR [2*CMFGO+BP],0
	JNZ	SHORT CMP17	; (Jump shortened)
;	 MOV  BP,SP	; (Redundant)
	MOV	WORD PTR [2*CMFGO+BP],DI
	JMP	CMP13
CMP17:	CALL	ERR_0
	DB	218
CMP18:	XOR	AX,AX
	MOV	SCNSE,AX
	MOV	BP,SP
	MOV	DI,WORD PTR [2*CMSTM+BP]
	XOR	BX,BX
	XOR	DX,DX
	EVEN
	CALL	EXPAP
	DW	CMP19
	MOV	WORD PTR [2*CMOPN+DI],OFFSET MINDATA:OPMS_
	MOV	WORD PTR [2*CMTYP+DI],C_PMT
CMP19:
	EVEN
	CALL	CDGVL
	MOV	BP,SP
	MOV	DI,WORD PTR [2*CMSGO+BP]
	MOV	CX,DI
	OR	DI,DI
	JZ	SHORT CMP21	; (Jump shortened)
;	 MOV  BP,SP	; (Redundant)
	XOR	AX,AX
	MOV	WORD PTR [2*CMSOC+BP],AX
	CMP	DI,STATE
	JA	SHORT CMP20	; (Jump shortened)
	ADD	CX,2*VRTRA
	EVEN
	CALL	CDWRD
	JMP	SHORT CMP22	; (Jump shortened)
CMP20:	MOV	BP,SP
	CMP	DI,WORD PTR [2*CMFGO+BP]
	JE	SHORT CMP22	; (Jump shortened)
	XOR	BX,BX
	EVEN
	CALL	CDGCG
	JMP	SHORT CMP22	; (Jump shortened)
CMP21:	MOV	BP,SP
	MOV	AX,CWCOF
	MOV	WORD PTR [2*CMSOC+BP],AX
	MOV	CX,OFFSET MINDATA:OCER_
	EVEN
	CALL	CDWRD
CMP22:	MOV	BP,SP
	MOV	DI,WORD PTR [2*CMFGO+BP]
	MOV	CX,DI
;	 MOV  BP,SP	; (Redundant)
	XOR	AX,AX
	MOV	WORD PTR [2*CMFFC+BP],AX
	OR	DI,DI
	JZ	SHORT CMP23	; (Jump shortened)
	ADD	CX,2*VRTRA
	CMP	DI,STATE
	JB	SHORT CMPSE	; (Jump shortened)
	MOV	BX,CWCOF
	MOV	CX,OFFSET MINDATA:OGOF_
	EVEN
	CALL	CDWRD
	MOV	CX,OFFSET MINDATA:OFIF_
	EVEN
	CALL	CDWRD
	EVEN
	CALL	CDGCG
	MOV	CX,BX
	MOV	BX,OFFSET MINCODE:B_CDC
	JMP	SHORT CMP25	; (Jump shortened)
CMP23:	MOV	CX,OFFSET MINDATA:OUNF_
	MOV	DX,CSWFL
	MOV	BP,SP
	OR	DX,WORD PTR [2*CMCGO+BP]
;	OR	DX,DX	(Optimized)
	JZ	SHORT CMPSE	; (Jump shortened)
;	 MOV  BP,SP	; (Redundant)
	MOV	WORD PTR [2*CMFFC+BP],SP
	MOV	CX,OFFSET MINDATA:OCER_
CMPSE:	MOV	BX,OFFSET MINCODE:B_CDS
CMP25:	MOV	DI,R_CCB
	MOV	BP,SP
	MOV	SI,WORD PTR [2*CMLBL+BP]
	OR	SI,SI
	JZ	SHORT CMP26	; (Jump shortened)
;	 MOV  BP,SP	; (Redundant)
	XOR	AX,AX
	MOV	WORD PTR [2*CMLBL+BP],AX
	MOV	WORD PTR [2*VRLBL+SI],DI
CMP26:	MOV	WORD PTR [DI],BX
	MOV	WORD PTR [2*CDFAL+DI],CX
	MOV	SI,DI
	MOV	BX,WORD PTR [2*CCUSE+DI]
	MOV	DX,WORD PTR [2*CCLEN+DI]
	ADD	SI,BX
	SUB	DX,BX
	MOV	WORD PTR [SI],OFFSET MINCODE:B_CCT
	MOV	WORD PTR [2*CCUSE+SI],2*CCCOD
	MOV	CWCOF,2*CCCOD
	MOV	WORD PTR [2*CCLEN+SI],DX
	MOV	R_CCB,SI
	XOR	AX,AX
	MOV	WORD PTR [2*CCSLN+SI],AX
	MOV	AX,CMPLN
	MOV	WORD PTR [2*CDSLN+DI],AX
	MOV	AX,CMPSN
	MOV	WORD PTR [2*CDSTM+DI],AX
	INC	CMPSN
	MOV	BP,SP
	MOV	SI,WORD PTR [2*CMPCD+BP]
;	 MOV  BP,SP	; (Redundant)
	CMP	WORD PTR [2*CMFFP+BP],0
	JZ	SHORT CMP27	; (Jump shortened)
	MOV	WORD PTR [2*CDFAL+SI],DI
CMP27:	MOV	BP,SP
	MOV	CX,WORD PTR [2*CMSOP+BP]
	OR	CX,CX
	JZ	SHORT CMP28	; (Jump shortened)
	ADD	SI,CX
	MOV	WORD PTR [SI],DI
	XOR	SI,SI
;	 MOV  BP,SP	; (Redundant)
CMP28:	MOV	BP,SP
	MOV	AX,WORD PTR [2*CMFFC+BP]
	MOV	WORD PTR [2*CMFFP+BP],AX
;	 MOV  BP,SP	; (Redundant)
;	 MOV  BP,SP	; (Redundant)
	MOV	AX,WORD PTR [2*CMSOC+BP]
	MOV	WORD PTR [2*CMSOP+BP],AX
;	 MOV  BP,SP	; (Redundant)
	MOV	WORD PTR [2*CMPCD+BP],DI
;	 MOV  BP,SP	; (Redundant)
	CMP	WORD PTR [2*CMTRA+BP],0
	JNZ	SHORT CMP29	; (Jump shortened)
;	 MOV  BP,SP	; (Redundant)
	MOV	WORD PTR [2*CMTRA+BP],DI
CMP29:	CMP	STAGE,STGCE
	JB	CMP01
	CMP	CSWLS,0
	JZ	SHORT CMP30	; (Jump shortened)
	EVEN
	CALL	LISTR
CMP30:	MOV	BP,SP
	MOV	DI,WORD PTR [2*CMTRA+BP]
	ADD	SP,2*CMNEN
	RET
CMP31:	MOV	BP,SP
	MOV	BX,WORD PTR [2*CMFGO+BP]
;	 MOV  BP,SP	; (Redundant)
	OR	BX,WORD PTR [2*CMSGO+BP]
;	OR	BX,BX	(Optimized)
	JNZ	CMP18
	CALL	ERR_0
	DB	219
CMP32:	INC	BX
	EVEN
	CALL	CNCRD
	XOR	AX,AX
	MOV	SCNSE,AX
	JMP	CMPCE
CNCRD:
	PUBLIC	CNCRD
	MOV	SCNPT,BX
	MOV	CX,CCNOC
	INC	CX
	SHR	CX,1
	MOV	CNSWC,CX
CNC01:	MOV	AX,SCNPT
	CMP	AX,SCNIL
	JAE	CNC09
	MOV	DI,R_CIM
	ADD	DI,CFP_F
	ADD	DI,SCNPT
	MOV	CL,[DI]
	XOR	CH,CH
	INC	DI
	CMP	CL,'a'
	JB	SHORT L0013
	CMP	CL,'z'
	JA	SHORT L0013
	SUB	CL,32
L0013	LABEL	NEAR
	CMP	CX,CH_LI
	JE	CNC07
CNC0A:	MOV	SCNCC,SP
	EVEN
	CALL	SCANE
	XOR	AX,AX
	MOV	SCNCC,AX
	OR	SI,SI
	JNZ	CNC06
	MOV	CX,CCNOC
	CMP	WORD PTR [2*SCLEN+DI],CX
	JB	CNC08
	MOV	SI,DI
	XOR	BX,BX
	EVEN
	CALL	SBSTR
	MOV	CX,WORD PTR [2*SCLEN+DI]
	EVEN
	CALL	FLSTG
	MOV	CNSCC,DI
	MOV	DI,OFFSET MINDATA:CCNMS
	XOR	BX,BX
	MOV	DX,CC_NC
CNC02:	MOV	SI,CNSCC
	MOV	CX,CNSWC
	JMP	SHORT CNC04	; (Jump shortened)
CNC03:	INC	DI
	INC	DI
	INC	SI
	INC	SI
CNC04:	MOV	AX,WORD PTR [2*SCHAR+SI]
	CMP	AX,WORD PTR [DI]
	JNZ	SHORT CNC05	; (Jump shortened)
	LOOP	CNC03
	MOV	SI,BX
	INC	SI
	CMP	SI,CC_NC+1
	SBB	AX,AX
	AND	SI,AX
	SHL	SI,1
	JMP	CS:WORD PTR L0014[SI]
L0014	DW	OFFSET MINCODE:CNC08
	DW	OFFSET MINCODE:CNC37
	DW	OFFSET MINCODE:CNC10
	DW	OFFSET MINCODE:CNC08
	DW	OFFSET MINCODE:CNC11
	DW	OFFSET MINCODE:CNC41
	DW	OFFSET MINCODE:CNC12
	DW	OFFSET MINCODE:CNC13
	DW	OFFSET MINCODE:CNC14
	DW	OFFSET MINCODE:CNC15
	DW	OFFSET MINCODE:CNC41
	DW	OFFSET MINCODE:CNC44
	DW	OFFSET MINCODE:CNC16
	DW	OFFSET MINCODE:CNC17
	DW	OFFSET MINCODE:CNC18
	DW	OFFSET MINCODE:CNC19
	DW	OFFSET MINCODE:CNC20
	DW	OFFSET MINCODE:CNC21
	DW	OFFSET MINCODE:CNC22
	DW	OFFSET MINCODE:CNC24
	DW	OFFSET MINCODE:CNC25
	DW	OFFSET MINCODE:CNC27
	DW	OFFSET MINCODE:CNC28
	DW	OFFSET MINCODE:CNC31
	DW	OFFSET MINCODE:CNC32
	DW	OFFSET MINCODE:CNC36
CNC05:	INC	DI
	INC	DI
	LOOP	CNC05
	INC	BX
	DEC	DX
	JNZ	CNC02
	JMP	SHORT CNC08	; (Jump shortened)
CNC06:	CALL	ERR_0
	DB	247
CNC07:	MOV	CL,[DI]
	XOR	CH,CH
	INC	DI
	CMP	CL,'a'
	JB	SHORT L0015
	CMP	CL,'z'
	JA	SHORT L0015
	SUB	CL,32
L0015	LABEL	NEAR
	CMP	CX,CH_LN
	JNE	CNC0A
	MOV	CL,[DI]
	XOR	CH,CH
	CMP	CX,CH_D0
	JB	CNC0A
	CMP	CX,CH_D9
	JA	CNC0A
	ADD	SCNPT,NUM02
	EVEN
	CALL	SCANE
	PUSH	DI
	CALL	GTSMI
	DW	CNC06
	DW	CNC06
	MOV	CSWIN,DI
CNC08:	MOV	CX,SCNPT
	EVEN
	CALL	SCANE
	CMP	SI,T_CMA
	JE	CNC01
	MOV	SCNPT,CX
CNC09:	RET
CNC10:	MOV	CSWDB,SP
	JMP	CNC08
CNC11:
	EVEN
	CALL	SYSDM
	JMP	CNC09
CNC12:	CMP	CSWLS,0
	JZ	CNC09
	EVEN
	CALL	PRTPS
	EVEN
	CALL	LISTT
	JMP	CNC09
CNC13:	XOR	AX,AX
	MOV	CSWER,AX
	JMP	CNC08
CNC14:	XOR	AX,AX
	MOV	CSWEX,AX
	JMP	CNC08
CNC15:	MOV	CSWFL,SP
	JMP	CNC08
CNC16:	MOV	CSWLS,SP
	CMP	STAGE,STGIC
	JE	CNC08
	XOR	AX,AX
	MOV	LSTPF,AX
	EVEN
	CALL	LISTR
	JMP	CNC08
CNC17:	MOV	CSWER,SP
	JMP	CNC08
CNC18:	MOV	CSWEX,SP
	JMP	CNC08
CNC19:	XOR	AX,AX
	MOV	CSWFL,AX
	JMP	CNC08
CNC20:	XOR	AX,AX
	MOV	CSWLS,AX
	JMP	CNC08
CNC21:	MOV	CSWNO,SP
	JMP	CNC08
CNC22:	XOR	AX,AX
	MOV	CSWPR,AX
	JMP	CNC08
CNC24:	XOR	AX,AX
	MOV	CSWNO,AX
	JMP	CNC08
CNC25:	MOV	CSWPR,SP
	JMP	CNC08
CNC27:	XOR	AX,AX
	MOV	CSWDB,AX
	JMP	CNC08
CNC28:	CMP	CSWLS,0
	JZ	CNC09
	EVEN
	CALL	SCANE
	MOV	DX,NUM01
	CMP	DI,T_SMC
	JE	SHORT CNC29	; (Jump shortened)
	PUSH	DI
	CALL	GTSMI
	DW	CNC06
	DW	CNC06
	OR	DX,DX
	JNZ	SHORT CNC29	; (Jump shortened)
	MOV	DX,NUM01
CNC29:	ADD	LSTLC,DX
	MOV	AX,LSTLC
	CMP	AX,LSTNP
	JB	SHORT CNC30	; (Jump shortened)
	EVEN
	CALL	PRTPS
	EVEN
	CALL	LISTT
	JMP	CNC09
CNC30:
	EVEN
	CALL	PRTNL
	DEC	DX
	JNZ	CNC30
	JMP	CNC09
CNC31:	MOV	CNR_T,OFFSET MINDATA:R_STL
	JMP	SHORT CNC33	; (Jump shortened)
CNC32:	MOV	R_STL,OFFSET MINDATA:NULLS
	MOV	CNR_T,OFFSET MINDATA:R_TTL
CNC33:	MOV	DI,OFFSET MINDATA:NULLS
	MOV	CNTTL,SP
	MOV	BX,CCOFS
	MOV	CX,SCNIL
	CMP	CX,BX
	JB	SHORT CNC34	; (Jump shortened)
	SUB	CX,BX
	MOV	SI,R_CIM
	EVEN
	CALL	SBSTR
CNC34:	MOV	SI,CNR_T
	MOV	WORD PTR [SI],DI
	CMP	SI,OFFSET MINDATA:R_STL
	JE	CNC09
	CMP	PRECL,0
	JNZ	CNC09
	CMP	PRICH,0
	JZ	CNC09
	MOV	SI,WORD PTR [2*SCLEN+DI]
	MOV	CX,SI
	OR	SI,SI
	JZ	SHORT CNC35	; (Jump shortened)
	ADD	SI,NUM10
	CMP	SI,PRLEN
	JA	CNC09
	ADD	CX,NUM04
CNC35:	MOV	LSTPO,CX
	JMP	CNC09
CNC36:
	EVEN
	CALL	SYSTT
	JMP	CNC08
CNC37:
	EVEN
	CALL	SCANE
	XOR	DX,DX
	CMP	SI,T_SMC
	JE	SHORT CNC38	; (Jump shortened)
	PUSH	DI
	CALL	GTSMI
	DW	CNC06
	DW	CNC06
CNC38:	MOV	KVCAS,DX
	JMP	CNC09
CNC41:	MOV	SCNCC,SP
	EVEN
	CALL	SCANE
	XOR	AX,AX
	MOV	SCNCC,AX
	CMP	SI,T_CON
	JNE	CNC06
	CMP	WORD PTR [DI],OFFSET MINCODE:B_SCL
	JNE	CNC06
	MOV	R_IFN,DI
	MOV	SI,R_INC
	XOR	BX,BX
	EVEN
	CALL	TFIND
	DW	ERR_-299
	CMP	DI,OFFSET MINDATA:INTON
	JE	CNC09
	MOV	BX,SP
	MOV	DI,R_IFN
	EVEN
	CALL	TRIMR
	MOV	SI,R_INC
	MOV	BX,SP
	EVEN
	CALL	TFIND
	DW	ERR_-299
	MOV	WORD PTR [2*TEVAL+SI],OFFSET MINDATA:INTON
	INC	CNIND
	MOV	CX,CNIND
	CMP	CX,CCINM
	JA	CNC42
	MOV	SI,R_IFA
	ADD	CX,VCVLB
	SAL	CX,1
	ADD	SI,CX
	MOV	AX,R_SFC
	MOV	WORD PTR [SI],AX
	MOV	SI,CX
	MOV	AX,RDNLN
	MOV	WORD PTR REG_IA,AX
	XOR	DX,DX
	EVEN
	CALL	ICBLD
	ADD	SI,R_IFL
	MOV	WORD PTR [SI],DI
	MOV	CX,CSWIN
	MOV	SI,R_IFN
	EVEN
	CALL	ALOCS
	EVEN
	CALL	SYSIF
	DW	CNC43
	XOR	BX,BX
	EVEN
	CALL	TRIMR
	MOV	R_SFC,DI
	MOV	AX,CMPSN
	MOV	WORD PTR REG_IA,AX
	XOR	DX,DX
	EVEN
	CALL	ICBLD
	MOV	SI,R_SFN
	MOV	BX,SP
	EVEN
	CALL	TFIND
	DW	ERR_-299
	MOV	AX,R_SFC
	MOV	WORD PTR [2*TEVAL+SI],AX
	XOR	AX,AX
	MOV	RDNLN,AX
	CMP	STAGE,STGIC
	JE	CNC09
	CMP	CNIND,NUM01
	JNE	CNC09
	MOV	AX,R_CIM
	MOV	R_ICI,AX
	MOV	AX,SCNPT
	MOV	CNSPT,AX
	MOV	AX,SCNIL
	MOV	CNSIL,AX
	JMP	CNC09
CNC42:	CALL	ERR_1
	DB	28
CNC43:	MOV	DNAMP,DI
	CALL	ERR_1
	DB	29
CNC44:
	EVEN
	CALL	SCANE
	CMP	SI,T_CON
	JNE	CNC06
	CMP	WORD PTR [DI],OFFSET MINCODE:B_ICL
	JNE	CNC06
	MOV	DX,WORD PTR WORD PTR [2*ICVAL+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+DI]
	MOV	WORD PTR REG_IA,AX
	OR	DX,DX
	JG	SHORT L0016
	JL	CNC06
	CMP	WORD PTR REG_IA,0
	JE	CNC06
L0016	LABEL	NEAR
	CMP	STAGE,STGIC
	JE	SHORT CNC45	; (Jump shortened)
	MOV	AX,WORD PTR REG_IA
	MOV	CMPLN,AX
	JMP	SHORT CNC46	; (Jump shortened)
CNC45:	MOV	AX,WORD PTR INTV1
	SUB	WORD PTR REG_IA,AX
	SBB	DX,WORD PTR INTV1+2
	MOV	AX,WORD PTR REG_IA
	MOV	RDNLN,AX
CNC46:	MOV	SCNCC,SP
	EVEN
	CALL	SCANE
	XOR	AX,AX
	MOV	SCNCC,AX
	CMP	SI,T_SMC
	JE	SHORT CNC47	; (Jump shortened)
	CMP	SI,T_CON
	JNE	CNC06
	CMP	WORD PTR [DI],OFFSET MINCODE:B_SCL
	JNE	CNC06
	EVEN
	CALL	NEWFN
	JMP	CNC09
CNC47:	DEC	SCNPT
	JMP	CNC09
DFFNC:
	PUBLIC	DFFNC
	CMP	WORD PTR [SI],OFFSET MINCODE:B_EFC
	JNE	SHORT DFFN1	; (Jump shortened)
	INC	WORD PTR [2*EFUSE+SI]
DFFN1:	MOV	CX,DI
	MOV	DI,WORD PTR [2*VRFNC+DI]
	CMP	WORD PTR [DI],OFFSET MINCODE:B_EFC
	JNE	SHORT DFFN2	; (Jump shortened)
	MOV	BX,WORD PTR [2*EFUSE+DI]
	DEC	BX
	MOV	WORD PTR [2*EFUSE+DI],BX
	OR	BX,BX
	JNZ	SHORT DFFN2	; (Jump shortened)
	EVEN
	CALL	SYSUL
DFFN2:	MOV	DI,CX
	MOV	CX,SI
	CMP	DI,OFFSET MINDATA:R_YYY
	JB	SHORT DFFN3	; (Jump shortened)
	CMP	WORD PTR [2*VRLEN+DI],0
	JNZ	SHORT DFFN3	; (Jump shortened)
	MOV	SI,WORD PTR [2*VRSVP+DI]
	MOV	BX,WORD PTR [2*SVBIT+SI]
	AND	BX,BTFNC
;	OR	BX,BX	(Optimized)
	JZ	SHORT DFFN3	; (Jump shortened)
	CALL	ERR_0
	DB	248
DFFN3:	MOV	WORD PTR [2*VRFNC+DI],CX
	MOV	SI,CX
	RET
DTACH:
	PUBLIC	DTACH
	MOV	DTCNB,SI
	ADD	SI,CX
	MOV	DTCNM,SI
DTCH1:	MOV	DI,SI
DTCH2:	MOV	SI,WORD PTR [SI]
	CMP	WORD PTR [SI],OFFSET MINCODE:B_TRT
	JNE	SHORT DTCH6	; (Jump shortened)
	MOV	CX,WORD PTR [2*TRTYP+SI]
	CMP	CX,TRTIN
	JE	SHORT DTCH3	; (Jump shortened)
	CMP	CX,TRTOU
	JE	SHORT DTCH3	; (Jump shortened)
	ADD	SI,2*TRNXT
	JMP	DTCH1
DTCH3:	MOV	AX,WORD PTR [2*TRVAL+SI]
	MOV	WORD PTR [DI],AX
	MOV	CX,SI
	MOV	BX,DI
	MOV	SI,WORD PTR [2*TRTRF+SI]
	OR	SI,SI
	JZ	SHORT DTCH5	; (Jump shortened)
	CMP	WORD PTR [SI],OFFSET MINCODE:B_TRT
	JNE	SHORT DTCH5	; (Jump shortened)
DTCH4:	MOV	DI,SI
	MOV	SI,WORD PTR [2*TRTRF+SI]
	OR	SI,SI
	JZ	SHORT DTCH5	; (Jump shortened)
	MOV	DX,WORD PTR [2*IONMB+SI]
	ADD	DX,WORD PTR [2*IONMO+SI]
	CMP	DX,DTCNM
	JNE	DTCH4
	MOV	AX,WORD PTR [2*TRTRF+SI]
	MOV	WORD PTR [2*TRTRF+DI],AX
DTCH5:	MOV	SI,CX
	MOV	DI,BX
	ADD	SI,2*TRVAL
	JMP	DTCH2
DTCH6:	MOV	DI,DTCNB
	EVEN
	CALL	SETVR
	RET
DTYPE:
	PUBLIC	DTYPE
	CMP	WORD PTR [DI],OFFSET MINCODE:B_PDT
	JE	SHORT DTYP1	; (Jump shortened)
	MOV	DI,WORD PTR [DI]
	MOV	DI,CS:[DI-2]
	SAL	DI,1
	MOV	DI,SCNMT[DI]
	RET
DTYP1:	MOV	DI,WORD PTR [2*PDDFP+DI]
	MOV	DI,WORD PTR [2*DFNAM+DI]
	RET
DUMPR:
	PUBLIC	DUMPR
	OR	DI,DI
	JZ	DMP28
	CMP	DI,NUM03
	JA	DMP29
	XOR	SI,SI
	XOR	BX,BX
	MOV	DMARG,DI
	EVEN
	CALL	GBCOL
	EVEN
	CALL	PRTPG
	MOV	DI,OFFSET MINDATA:DMHDV
	EVEN
	CALL	PRTST
	EVEN
	CALL	PRTNL
	EVEN
	CALL	PRTNL
	XOR	AX,AX
	MOV	DMVCH,AX
	MOV	CX,HSHTB
DMP00:	MOV	DI,CX
	INC	CX
	INC	CX
	SUB	DI,2*VRNXT
DMP01:	MOV	DI,WORD PTR [2*VRNXT+DI]
	OR	DI,DI
	JZ	DMP09
	MOV	SI,DI
DMP02:	MOV	SI,WORD PTR [2*VRVAL+SI]
	CMP	DMARG,NUM03
	JE	SHORT DMP2A	; (Jump shortened)
	CMP	SI,OFFSET MINDATA:NULLS
	JE	DMP01
DMP2A:	CMP	WORD PTR [SI],OFFSET MINCODE:B_TRT
	JE	DMP02
	MOV	DX,DI
	ADD	DI,2*VRSOF
	CMP	WORD PTR [2*SCLEN+DI],0
	JNZ	SHORT DMP03	; (Jump shortened)
	MOV	DI,WORD PTR [2*VRSVO+DI]
DMP03:	MOV	BX,DI
	MOV	DMPSV,CX
	MOV	CX,OFFSET MINDATA:DMVCH
DMP04:	MOV	DMPCH,CX
	MOV	SI,CX
	MOV	DI,WORD PTR [SI]
	OR	DI,DI
	JZ	SHORT DMP08	; (Jump shortened)
	ADD	DI,2*VRSOF
	CMP	WORD PTR [2*SCLEN+DI],0
	JNZ	SHORT DMP05	; (Jump shortened)
	MOV	DI,WORD PTR [2*VRSVO+DI]
DMP05:	MOV	SI,BX
	MOV	CX,WORD PTR [2*SCLEN+SI]
	ADD	SI,CFP_F
	CMP	CX,WORD PTR [2*SCLEN+DI]
	JA	SHORT DMP06	; (Jump shortened)
	ADD	DI,CFP_F
	REPE	CMPSB
	MOV	SI,0
	MOV	DI,SI
	JA	SHORT DMP07	; (Jump shortened)
	JB	SHORT DMP08	; (Jump shortened)
	JMP	SHORT DMP08	; (Jump shortened)
DMP06:	MOV	CX,WORD PTR [2*SCLEN+DI]
	ADD	DI,CFP_F
	REPE	CMPSB
	MOV	SI,0
	MOV	DI,SI
	JA	SHORT DMP07	; (Jump shortened)
	JB	SHORT DMP08	; (Jump shortened)
DMP07:	MOV	SI,DMPCH
	MOV	CX,WORD PTR [SI]
	JMP	DMP04
DMP08:	MOV	SI,DMPCH
	MOV	CX,DMPSV
	MOV	DI,DX
	MOV	AX,WORD PTR [SI]
	MOV	WORD PTR [2*VRGET+DI],AX
	MOV	WORD PTR [SI],DI
	JMP	DMP01
DMP09:	CMP	CX,HSHTE
	JNE	DMP00
DMP10:	MOV	DI,DMVCH
	OR	DI,DI
	JZ	SHORT DMP11	; (Jump shortened)
	MOV	AX,WORD PTR [DI]
	MOV	DMVCH,AX
	EVEN
	CALL	SETVR
	MOV	SI,DI
	MOV	CX,2*VRVAL
	EVEN
	CALL	PRTNV
	JMP	DMP10
DMP11:
	EVEN
	CALL	PRTNL
	EVEN
	CALL	PRTNL
	MOV	DI,OFFSET MINDATA:DMHDK
	EVEN
	CALL	PRTST
	EVEN
	CALL	PRTNL
	EVEN
	CALL	PRTNL
	MOV	SI,OFFSET MINDATA:VDMKW
DMP12:	LODSW
	MOV	DI,AX
	OR	DI,DI
	JZ	SHORT DMP13	; (Jump shortened)
	CMP	DI,NUM01
	JE	DMP12
	MOV	CX,CH_AM
	EVEN
	CALL	PRTCH
	EVEN
	CALL	PRTST
	MOV	CX,WORD PTR [2*SVLEN+DI]
	ADD	CX,1+2*SVCHS
	AND	CX,-2
	ADD	DI,CX
	MOV	AX,WORD PTR [DI]
	MOV	DMPKN,AX
	MOV	DI,OFFSET MINDATA:TMBEB
	EVEN
	CALL	PRTST
	MOV	DMPSV,SI
	MOV	SI,OFFSET MINDATA:DMPKB
	MOV	WORD PTR [SI],OFFSET MINCODE:B_KVT
	MOV	WORD PTR [2*KVVAR+SI],OFFSET MINDATA:TRBKV
	MOV	CX,2*KVVAR
	EVEN
	CALL	ACESS
	DW	ERR_-299
	EVEN
	CALL	PRTVL
	EVEN
	CALL	PRTNL
	MOV	SI,DMPSV
	JMP	DMP12
DMP13:	CMP	DMARG,NUM01
	JE	DMP27
	MOV	DI,DNAMB
DMP14:	CMP	DI,DNAMP
	JE	DMP27
	MOV	CX,WORD PTR [DI]
	CMP	CX,OFFSET MINCODE:B_VCT
	JE	SHORT DMP16	; (Jump shortened)
	CMP	CX,OFFSET MINCODE:B_ART
	JE	SHORT DMP17	; (Jump shortened)
	CMP	CX,OFFSET MINCODE:B_PDT
	JE	SHORT DMP18	; (Jump shortened)
	CMP	CX,OFFSET MINCODE:B_TBT
	JE	SHORT DMP19	; (Jump shortened)
DMP15:
	EVEN
	CALL	BLKLN
	ADD	DI,CX
	JMP	DMP14
DMP16:	MOV	BX,2*VCVLS
	JMP	SHORT DMP19	; (Jump shortened)
DMP17:	MOV	BX,WORD PTR [2*AROFS+DI]
	INC	BX
	INC	BX
	JMP	SHORT DMP19	; (Jump shortened)
DMP18:	MOV	BX,2*PDFLD
DMP19:	CMP	WORD PTR [2*IDVAL+DI],0
	JZ	DMP15
	EVEN
	CALL	BLKLN
	MOV	SI,DI
	MOV	DMPSV,CX
	MOV	CX,BX
	EVEN
	CALL	PRTNL
	MOV	DMPSA,CX
	EVEN
	CALL	PRTVL
	MOV	CX,DMPSA
	EVEN
	CALL	PRTNL
	CMP	WORD PTR [DI],OFFSET MINCODE:B_TBT
	JE	SHORT DMP22	; (Jump shortened)
	DEC	CX
	DEC	CX
DMP20:	MOV	DI,SI
	INC	CX
	INC	CX
	ADD	DI,CX
	CMP	CX,DMPSV
	JE	DMP14
	SUB	DI,2*VRVAL
DMP21:	MOV	DI,WORD PTR [2*VRVAL+DI]
	CMP	DMARG,NUM03
	JE	SHORT DMP2B	; (Jump shortened)
	CMP	DI,OFFSET MINDATA:NULLS
	JE	DMP20
DMP2B:	CMP	WORD PTR [DI],OFFSET MINCODE:B_TRT
	JE	DMP21
	EVEN
	CALL	PRTNV
	JMP	DMP20
DMP22:	MOV	DX,2*TBBUK
	MOV	CX,2*TEVAL
DMP23:	PUSH	SI
	ADD	SI,DX
	INC	DX
	INC	DX
	SUB	SI,2*TENXT
DMP24:	MOV	SI,WORD PTR [2*TENXT+SI]
	MOV	BP,SP
	CMP	SI,WORD PTR [BP]
	JE	SHORT DMP26	; (Jump shortened)
	MOV	DI,SI
DMP25:	MOV	DI,WORD PTR [2*TEVAL+DI]
	CMP	DI,OFFSET MINDATA:NULLS
	JE	DMP24
	CMP	WORD PTR [DI],OFFSET MINCODE:B_TRT
	JE	DMP25
	MOV	DMPSV,DX
	EVEN
	CALL	PRTNV
	MOV	DX,DMPSV
	JMP	DMP24
DMP26:	POP	SI
	CMP	DX,WORD PTR [2*TBLEN+SI]
	JNE	DMP23
	MOV	DI,SI
	ADD	DI,DX
	JMP	DMP14
DMP27:
	EVEN
	CALL	PRTPG
DMP28:	RET
DMP29:
	EVEN
	CALL	SYSDM
	JMP	DMP28
ERMSG:
	PUBLIC	ERMSG
	MOV	CX,KVERT
	MOV	DI,OFFSET MINDATA:ERMMS
	EVEN
	CALL	PRTST
	EVEN
	CALL	ERTEX
	ADD	CX,THSND
	MOV	WORD PTR REG_IA,CX
	XOR	DX,DX
	MOV	BX,PROFS
	EVEN
	CALL	PRTIN
	MOV	SI,PRBUF
	LEA	SI,[CFP_F+SI+BX]
	MOV	CX,CH_BL
	MOV	[SI],CL
	XOR	SI,SI
	MOV	CX,DI
	MOV	DI,OFFSET MINDATA:ERMNS
	EVEN
	CALL	PRTST
	MOV	DI,CX
	EVEN
	CALL	PRTST
	EVEN
	CALL	PRTIS
	EVEN
	CALL	PRTIS
	RET
ERTEX:
	PUBLIC	ERTEX
	MOV	ERTWA,CX
	MOV	ERTWB,BX
	EVEN
	CALL	SYSEM
	MOV	SI,DI
	MOV	CX,WORD PTR [2*SCLEN+DI]
	OR	CX,CX
	JZ	SHORT ERT02	; (Jump shortened)
	XOR	BX,BX
	EVEN
	CALL	SBSTR
	MOV	R_ETX,DI
ERT01:	MOV	BX,ERTWB
	MOV	CX,ERTWA
	RET
ERT02:	MOV	DI,R_ETX
	JMP	ERT01
EVALI:
	PUBLIC	EVALI
	EVEN
	CALL	EVALP
	DW	EVLI1
	PUSH	SI
	MOV	SI,WORD PTR [2*PTHEN+DI]
	MOV	EVLIO,DI
	MOV	EVLIF,DX
	CALL	GTSMI
	DW	EVLI2
	DW	EVLI3
	MOV	EVLIV,DI
	MOV	DI,OFFSET MINDATA:EVLIN
	MOV	WORD PTR [DI],OFFSET MINCODE:P_LEN
	MOV	WORD PTR [2*PTHEN+DI],SI
	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+6]
EVLI1:	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+4]
EVLI2:	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
EVLI3:	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+2]
EVALP:
	PUBLIC	EVALP
	MOV	SI,WORD PTR [2*PARM1+DI]
	CMP	WORD PTR [SI],OFFSET MINCODE:B_EXL
	JE	SHORT EVLP1	; (Jump shortened)
	MOV	SI,WORD PTR [2*SEVAR+SI]
	MOV	SI,WORD PTR [2*VRVAL+SI]
	MOV	CX,WORD PTR [SI]
	CMP	CX,OFFSET MINCODE:B_T__
	JA	SHORT EVLP3	; (Jump shortened)
EVLP1:	CMP	SP,LOWSPMIN
	JB	SEC06
	PUSH	DI
	PUSH	BX
	PUSH	R_PMS
	PUSH	PMSSL
	PUSH	PMDFL
	PUSH	PMHBS
	MOV	DI,WORD PTR [2*PARM1+DI]
EVLP2:	XOR	BX,BX
	EVEN
	CALL	EVALX
	DW	EVLP4
	MOV	CX,WORD PTR [DI]
	CMP	CX,OFFSET MINCODE:B_E__
	JB	EVLP2
	MOV	SI,DI
	POP	PMHBS
	POP	PMDFL
	POP	PMSSL
	POP	R_PMS
	POP	BX
	POP	DI
	MOV	DX,DI
	POP	AX
	INC	AX
	INC	AX
	JMP	AX
EVLP3:	XOR	DX,DX
	POP	AX
	INC	AX
	INC	AX
	JMP	AX
EVLP4:	POP	PMHBS
	POP	PMDFL
	POP	PMSSL
	POP	R_PMS
	ADD	SP,2*NUM02
	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
EVALS:
	PUBLIC	EVALS
	EVEN
	CALL	EVALP
	DW	EVLS1
	PUSH	WORD PTR [2*PTHEN+DI]
	PUSH	BX
	PUSH	SI
	XOR	BX,BX
	XOR	DX,DX
	MOV	SI,OFFSET MINCODE:P_BRK
	CALL	PATST
	DW	EVLS2
	POP	BX
	POP	WORD PTR [2*PTHEN+DI]
	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+4]
EVLS1:	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+2]
EVLS2:	ADD	SP,2*NUM02
	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
EVALX:
	PUBLIC	EVALX
	CMP	WORD PTR [DI],OFFSET MINCODE:B_EXL
	JE	SHORT EVLX2	; (Jump shortened)
	MOV	SI,WORD PTR [2*SEVAR+DI]
	MOV	CX,2*VRVAL
	OR	BX,BX
	JNZ	SHORT EVLX1	; (Jump shortened)
	EVEN
	CALL	ACESS
	DW	EVLX9
EVLX1:	POP	AX
	INC	AX
	INC	AX
	JMP	AX
EVLX2:	MOV	DX,REG_CP
	MOV	CX,R_COD
	SUB	DX,CX
	PUSH	CX
	PUSH	DX
	PUSH	FLPTR
	PUSH	BX
	MOV	AX,2*EXFLC
	PUSH	AX
	MOV	AX,FLPTR
	MOV	GTCEF,AX
	MOV	AX,R_COD
	MOV	R_GTC,AX
	MOV	FLPTR,SP
	MOV	R_COD,DI
	MOV	AX,KVSTN
	MOV	WORD PTR [2*EXSTM+DI],AX
	ADD	DI,2*EXCOD
	MOV	REG_CP,DI
	CMP	STAGE,STGXT
	JNE	SHORT EVLX0	; (Jump shortened)
	MOV	STAGE,STGEE
EVLX0:	XOR	SI,SI
	MOV	DI,REG_CP
	MOV	DI,[DI]
	ADD	REG_CP,2
	JMP	WORD PTR [DI]
EVLX3:	POP	DI
	MOV	BP,SP
	CMP	WORD PTR [2*1+BP],0
	JZ	SHORT EVLX5	; (Jump shortened)
	CALL	ERR_0
	DB	249
EVLX4:	POP	CX
	POP	SI
	MOV	BP,SP
	CMP	WORD PTR [2*1+BP],0
	JNZ	SHORT EVLX5	; (Jump shortened)
	EVEN
	CALL	ACESS
	DW	EVLX6
EVLX5:	XOR	BX,BX
	JMP	SHORT EVLX7	; (Jump shortened)
EVLX6:	MOV	BX,SP
EVLX7:	CMP	STAGE,STGEE
	JNE	SHORT EVLX8	; (Jump shortened)
	MOV	STAGE,STGXT
EVLX8:	ADD	SP,2*NUM02
	POP	FLPTR
	POP	DX
	MOV	BP,SP
	ADD	DX,WORD PTR [BP]
	POP	R_COD
	MOV	REG_CP,DX
	OR	BX,BX
	JZ	EVLX1
EVLX9:	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
EXBLD:
	PUBLIC	EXBLD
	MOV	CX,SI
	SUB	CX,2*EXCOD
	PUSH	CX
	MOV	CX,CWCOF
	SUB	CX,SI
	ADD	CX,2*EXSI_
	EVEN
	CALL	ALLOC
	PUSH	DI
	MOV	WORD PTR [2*EXTYP+DI],OFFSET MINCODE:B_EXL
	XOR	AX,AX
	MOV	WORD PTR [2*EXSTM+DI],AX
	MOV	AX,CMPLN
	MOV	WORD PTR [2*EXSLN+DI],AX
	MOV	WORD PTR [2*EXLEN+DI],CX
	MOV	WORD PTR [2*EXFLC+DI],OFFSET MINDATA:OFEX_
	ADD	DI,2*EXSI_
	MOV	CWCOF,SI
	ADD	SI,R_CCB
	SUB	CX,2*EXSI_
	PUSH	CX
	SHR	CX,1
	REP	MOVSW
	POP	CX
	SHR	CX,1
	MOV	BP,SP
	MOV	SI,WORD PTR [BP]
	ADD	SI,2*EXCOD
;	 MOV  BP,SP	; (Redundant)
	MOV	BX,WORD PTR [2*1+BP]
EXBL1:	LODSW
	MOV	DI,AX
	CMP	DI,OFFSET MINDATA:OSLA_
	JE	SHORT EXBL3	; (Jump shortened)
	CMP	DI,OFFSET MINDATA:ONTA_
	JE	SHORT EXBL3	; (Jump shortened)
	LOOP	EXBL1
EXBL2:	POP	DI
	POP	SI
	RET
EXBL3:	SUB	WORD PTR [SI],BX
	INC	SI
	INC	SI
	LOOP	EXBL4
EXBL4:	LOOP	EXBL5
EXBL5:	LODSW
	MOV	DI,AX
	CMP	DI,OFFSET MINDATA:OSLA_
	JE	EXBL3
	CMP	DI,OFFSET MINDATA:OSLB_
	JE	EXBL3
	CMP	DI,OFFSET MINDATA:OSLC_
	JE	EXBL3
	CMP	DI,OFFSET MINDATA:ONTA_
	JE	EXBL3
	LOOP	EXBL5
	JMP	EXBL2
EXPAN:
	PUBLIC	EXPAN
	XOR	AX,AX
	PUSH	AX
	XOR	CX,CX
	XOR	DX,DX
EXP01:
	EVEN
	CALL	SCANE
	ADD	SI,CX
	SHL	SI,1
	JMP	CS:WORD PTR L0017[SI]
L0017	LABEL	WORD
	DW	OFFSET MINCODE:EXP27
	DW	OFFSET MINCODE:EXP27
	DW	OFFSET MINCODE:EXP04
	DW	OFFSET MINCODE:EXP06
	DW	OFFSET MINCODE:EXP06
	DW	OFFSET MINCODE:EXP04
	DW	OFFSET MINCODE:EXP08
	DW	OFFSET MINCODE:EXP08
	DW	OFFSET MINCODE:EXP09
	DW	OFFSET MINCODE:EXP02
	DW	OFFSET MINCODE:EXP05
	DW	OFFSET MINCODE:EXP11
	DW	OFFSET MINCODE:EXP10
	DW	OFFSET MINCODE:EXP10
	DW	OFFSET MINCODE:EXP04
	DW	OFFSET MINCODE:EXP03
	DW	OFFSET MINCODE:EXP03
	DW	OFFSET MINCODE:EXP04
	DW	OFFSET MINCODE:EXP03
	DW	OFFSET MINCODE:EXP03
	DW	OFFSET MINCODE:EXP04
	DW	OFFSET MINCODE:EXP05
	DW	OFFSET MINCODE:EXP05
	DW	OFFSET MINCODE:EXP26
	DW	OFFSET MINCODE:EXP02
	DW	OFFSET MINCODE:EXP05
	DW	OFFSET MINCODE:EXP12
	DW	OFFSET MINCODE:EXP02
	DW	OFFSET MINCODE:EXP05
	DW	OFFSET MINCODE:EXP18
	DW	OFFSET MINCODE:EXP02
	DW	OFFSET MINCODE:EXP05
	DW	OFFSET MINCODE:EXP19
	DW	OFFSET MINCODE:EXP02
	DW	OFFSET MINCODE:EXP05
	DW	OFFSET MINCODE:EXP19
EXP02:	MOV	SCNRS,SP
	MOV	DI,OFFSET MINDATA:NULLS
EXP03:	PUSH	DI
	MOV	CX,NUM02
	JMP	EXP01
EXP04:	MOV	SCNRS,SP
	MOV	DI,OFFSET MINDATA:OPDVC
	OR	BX,BX
	JZ	SHORT EXP4A	; (Jump shortened)
	MOV	DI,OFFSET MINDATA:OPDVP
EXP4A:	CMP	SCNBL,0
	JNZ	EXP26
	CALL	ERR_0
	DB	220
EXP05:	CALL	ERR_0
	DB	221
EXP06:	MOV	SI,NUM04
	XOR	DI,DI
EXP07:	PUSH	DI
	PUSH	DX
	PUSH	BX
	CMP	SP,LOWSPMIN
	JB	SEC06
	XOR	CX,CX
	MOV	BX,SI
	MOV	DX,NUM01
	JMP	EXP01
EXP08:	CALL	ERR_0
	DB	222
EXP09:	POP	DI
	MOV	SI,NUM03
	JMP	EXP07
EXP10:	MOV	SI,NUM05
	JMP	EXP07
EXP11:	INC	DX
	CALL	EXPDM
	XOR	AX,AX
	PUSH	AX
	XOR	CX,CX
	CMP	BX,NUM02
	JA	EXP01
	CALL	ERR_0
	DB	223
EXP12:	CMP	BX,NUM01
	JE	EXP20
	CMP	BX,NUM05
	JE	SHORT EXP13	; (Jump shortened)
	CMP	BX,NUM04
	JE	SHORT EXP14	; (Jump shortened)
	CALL	ERR_0
	DB	224
EXP13:	MOV	SI,C_FNC
	JMP	SHORT EXP15	; (Jump shortened)
EXP14:	CMP	DX,NUM01
	JE	SHORT EXP17	; (Jump shortened)
	MOV	SI,C_SEL
EXP15:	CALL	EXPDM
	MOV	CX,DX
	ADD	CX,CMVLS
	SAL	CX,1
	EVEN
	CALL	ALLOC
	MOV	WORD PTR [DI],OFFSET MINCODE:B_CMT
	MOV	WORD PTR [2*CMTYP+DI],SI
	MOV	WORD PTR [2*CMLEN+DI],CX
	ADD	DI,CX
EXP16:	DEC	DI
	DEC	DI
	POP	WORD PTR [DI]
	POP	BX
	DEC	DX
	JNZ	EXP16
	SUB	DI,2*CMVLS
	POP	DX
	MOV	BP,SP
	MOV	AX,WORD PTR [BP]
	MOV	WORD PTR [2*CMOPN+DI],AX
;	 MOV  BP,SP	; (Redundant)
	MOV	WORD PTR [BP],DI
	MOV	CX,NUM02
	JMP	EXP01
EXP17:	CALL	EXPDM
	POP	DI
	POP	BX
	POP	DX
	MOV	BP,SP
	MOV	WORD PTR [BP],DI
	MOV	CX,NUM02
	JMP	EXP01
EXP18:	MOV	SI,C_ARR
	CMP	BX,NUM03
	JE	EXP15
	CMP	BX,NUM02
	JE	SHORT EXP20	; (Jump shortened)
	CALL	ERR_0
	DB	225
EXP19:	MOV	SCNRS,SP
	MOV	SI,BX
	SHL	SI,1
	JMP	CS:WORD PTR L0018[SI]
L0018	LABEL	WORD
	DW	OFFSET MINCODE:EXP20
	DW	OFFSET MINCODE:EXP22
	DW	OFFSET MINCODE:EXP23
	DW	OFFSET MINCODE:EXP24
	DW	OFFSET MINCODE:EXP21
	DW	OFFSET MINCODE:EXP21
EXP20:	CALL	EXPDM
	POP	DI
	POP	AX
	RET
EXP21:	CALL	ERR_0
	DB	226
EXP22:	CALL	ERR_0
	DB	227
EXP23:	CALL	ERR_0
	DB	228
EXP24:	CALL	ERR_0
	DB	229
EXP25:	MOV	EXPSV,DI
	CALL	EXPOP
	MOV	DI,EXPSV
EXP26:	MOV	BP,SP
	MOV	SI,WORD PTR [2*1+BP]
	CMP	SI,NUM05
	JBE	SHORT EXP27	; (Jump shortened)
	MOV	AX,WORD PTR [2*DVRPR+DI]
	CMP	AX,WORD PTR [2*DVLPR+SI]
	JB	EXP25
EXP27:	PUSH	DI
	CMP	SP,LOWSPMIN
	JB	SEC06
	MOV	CX,NUM01
	CMP	DI,OFFSET MINDATA:OPDVS
	JNE	EXP01
	XOR	CX,CX
	JMP	EXP01
EXPAP:
	PUBLIC	EXPAP
	PUSH	SI
	CMP	WORD PTR [DI],OFFSET MINCODE:B_CMT
	JNE	SHORT EXPP2	; (Jump shortened)
	MOV	CX,WORD PTR [2*CMTYP+DI]
	CMP	CX,C_CNC
	JE	SHORT EXPP1	; (Jump shortened)
	CMP	CX,C_PMT
	JE	SHORT EXPP1	; (Jump shortened)
	CMP	CX,C_ALT
	JNE	SHORT EXPP2	; (Jump shortened)
	MOV	SI,WORD PTR [2*CMLOP+DI]
	CMP	WORD PTR [SI],OFFSET MINCODE:B_CMT
	JNE	SHORT EXPP2	; (Jump shortened)
	CMP	WORD PTR [2*CMTYP+SI],C_CNC
	JNE	SHORT EXPP2	; (Jump shortened)
	MOV	AX,WORD PTR [2*CMROP+SI]
	MOV	WORD PTR [2*CMLOP+DI],AX
	MOV	WORD PTR [2*CMROP+SI],DI
	MOV	DI,SI
EXPP1:	POP	SI
	POP	AX
	INC	AX
	INC	AX
	JMP	AX
EXPP2:	POP	SI
	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
EXPDM:
	PUBLIC	EXPDM
	POP	PRC_+6
	MOV	R_EXS,SI
EXDM1:	MOV	BP,SP
	CMP	WORD PTR [2*1+BP],NUM05
	JBE	SHORT EXDM2	; (Jump shortened)
	CALL	EXPOP
	JMP	EXDM1
EXDM2:	MOV	SI,R_EXS
	XOR	AX,AX
	MOV	R_EXS,AX
	MOV	AX,PRC_+6
	JMP	AX
EXPOP:
	PUBLIC	EXPOP
	POP	PRC_+8
	MOV	BP,SP
	MOV	DI,WORD PTR [2*1+BP]
	CMP	WORD PTR [2*DVLPR+DI],LLUNO
	JE	SHORT EXPO2	; (Jump shortened)
	MOV	CX,2*CMBS_
	EVEN
	CALL	ALLOC
	POP	WORD PTR [2*CMROP+DI]
	POP	SI
	MOV	BP,SP
	MOV	AX,WORD PTR [BP]
	MOV	WORD PTR [2*CMLOP+DI],AX
EXPO1:	MOV	WORD PTR [DI],OFFSET MINCODE:B_CMT
	MOV	AX,WORD PTR [2*DVTYP+SI]
	MOV	WORD PTR [2*CMTYP+DI],AX
	MOV	WORD PTR [2*CMOPN+DI],SI
	MOV	WORD PTR [2*CMLEN+DI],CX
	MOV	BP,SP
	MOV	WORD PTR [BP],DI
	MOV	AX,PRC_+8
	JMP	AX
EXPO2:	MOV	CX,2*CMUS_
	EVEN
	CALL	ALLOC
	POP	WORD PTR [2*CMROP+DI]
	MOV	BP,SP
	MOV	SI,WORD PTR [BP]
	JMP	EXPO1
FILNM:
	PUBLIC	FILNM
	PUSH	BX
	OR	DX,DX
	JZ	SHORT FILN3	; (Jump shortened)
	MOV	SI,R_SFN
	OR	SI,SI
	JZ	SHORT FILN3	; (Jump shortened)
	MOV	BX,WORD PTR [2*TBBUK+SI]
	CMP	BX,R_SFN
	JE	SHORT FILN3	; (Jump shortened)
	PUSH	DI
	MOV	DI,BX
	PUSH	DX
FILN1:	MOV	SI,DI
	MOV	DI,WORD PTR [2*TESUB+SI]
	MOV	DX,WORD PTR WORD PTR [2*ICVAL+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+DI]
	MOV	WORD PTR REG_IA,AX
	MOV	DX,WORD PTR REG_IA
	MOV	BP,SP
	CMP	WORD PTR [BP],DX
	JB	SHORT FILN2	; (Jump shortened)
	MOV	BX,SI
	MOV	DI,WORD PTR [2*TENXT+SI]
	CMP	DI,R_SFN
	JNE	FILN1
FILN2:	MOV	SI,BX
	MOV	SI,WORD PTR [2*TEVAL+SI]
	POP	DX
	POP	DI
	POP	BX
	RET
FILN3:	POP	BX
	MOV	SI,OFFSET MINDATA:NULLS
	RET
FLSTG:
	PUBLIC	FLSTG
	CMP	KVCAS,0
	JZ	SHORT FST99	; (Jump shortened)
	PUSH	SI
	PUSH	DI
	EVEN
	CALL	ALOCS
	MOV	BP,SP
	MOV	SI,WORD PTR [BP]
	PUSH	DI
	ADD	SI,CFP_F
	ADD	DI,CFP_F
	XOR	AX,AX
	PUSH	AX
FST01:	LODSB
	XOR	AH,AH
	XCHG	AX,CX
	CMP	CX,CH__A
	JB	SHORT FST02	; (Jump shortened)
	CMP	CX,CH___
	JA	SHORT FST02	; (Jump shortened)
	CMP	CL,'a'
	JB	SHORT L0019
	CMP	CL,'z'
	JA	SHORT L0019
	SUB	CL,32
L0019	LABEL	NEAR
	MOV	BP,SP
	MOV	WORD PTR [BP],SP
FST02:	MOV	AL,CL
	STOSB
	DEC	DX
	JNZ	FST01
	POP	DI
	OR	DI,DI
	JNZ	SHORT FST10	; (Jump shortened)
	POP	DNAMP
	POP	DI
	JMP	SHORT FST20	; (Jump shortened)
FST10:	POP	DI
	POP	AX
FST20:	MOV	CX,WORD PTR [2*SCLEN+DI]
	POP	SI
FST99:	RET
GBCOL:
	PUBLIC	GBCOL
	CMP	DMVCH,0
	JNZ	GBC14
	MOV	GBCFL,SP
	MOV	GBSVA,CX
	MOV	GBSVB,BX
	MOV	GBSVC,DX
	PUSH	SI
	MOV	CX,REG_CP
	SUB	CX,R_COD
	MOV	REG_CP,CX
	MOV	DI,SP
	MOV	CX,DNAMB
	MOV	BX,DNAMP
	MOV	DX,DNAME
	EVEN
	CALL	SYSGC
	MOV	DI,SP
	MOV	SI,STBAS
	CMP	SI,DI
	JAE	SHORT GBC00	; (Jump shortened)
	MOV	DI,SI
	MOV	SI,SP
GBC00:
	EVEN
	CALL	GBCPF
	MOV	DI,OFFSET MINDATA:R_AAA
	MOV	SI,OFFSET MINDATA:R_YYY
	EVEN
	CALL	GBCPF
	MOV	CX,HSHTB
GBC01:	MOV	SI,CX
	INC	CX
	INC	CX
	MOV	GBCNM,CX
GBC02:	MOV	DI,WORD PTR [SI]
	OR	DI,DI
	JZ	SHORT GBC03	; (Jump shortened)
	MOV	SI,DI
	ADD	DI,2*VRVAL
	ADD	SI,2*VRNXT
	EVEN
	CALL	GBCPF
	JMP	GBC02
GBC03:	MOV	CX,GBCNM
	CMP	CX,HSHTE
	JNE	GBC01
	MOV	DI,DNAMB
	MOV	DX,DI
	ADD	DX,GBSVB
	XOR	AX,AX
	MOV	GBCNM,AX
	MOV	GBCLM,OFFSET MINDATA:GBCNM
	MOV	GBCNS,DI
GBC05:	CMP	DI,DNAMP
	JE	SHORT GBC07	; (Jump shortened)
	MOV	CX,WORD PTR [DI]
	TEST	CL,1
	JNE	SHORT GBC07	; (Jump shortened)
GBC06:	MOV	SI,CX
	MOV	CX,WORD PTR [SI]
	MOV	WORD PTR [SI],DX
	TEST	CL,1
	JE	GBC06
	MOV	WORD PTR [DI],CX
	EVEN
	CALL	BLKLN
	ADD	DI,CX
	ADD	DX,CX
	JMP	GBC05
GBC07:	MOV	CX,DI
	MOV	SI,GBCLM
	SUB	CX,WORD PTR [2*1+SI]
	MOV	WORD PTR [2*1+SI],CX
GBC08:	CMP	DI,DNAMP
	JE	SHORT GBC10	; (Jump shortened)
	MOV	CX,WORD PTR [DI]
	TEST	CL,1
	JE	SHORT GBC09	; (Jump shortened)
	EVEN
	CALL	BLKLN
	ADD	DI,CX
	JMP	GBC08
GBC09:	SUB	DI,2*NUM02
	MOV	SI,GBCLM
	MOV	WORD PTR [SI],DI
	XOR	AX,AX
	MOV	WORD PTR [DI],AX
	MOV	GBCLM,DI
	MOV	SI,DI
	ADD	DI,2*NUM02
	MOV	WORD PTR [2*1+SI],DI
	JMP	GBC06
GBC10:	MOV	DI,DNAMB
	ADD	DI,GBCNS
GBC11:	MOV	SI,GBCNM
	OR	SI,SI
	JZ	SHORT GBC12	; (Jump shortened)
	LODSW
	MOV	GBCNM,AX
	LODSW
	MOV	CX,AX
	SHR	CX,1
	REP	MOVSW
	JMP	GBC11
GBC12:	MOV	DNAMP,DI
	MOV	BX,GBSVB
	OR	BX,BX
	JZ	SHORT GBC13	; (Jump shortened)
	MOV	SI,DI
	ADD	DI,BX
	MOV	DNAMP,DI
	MOV	CX,SI
	SUB	CX,DNAMB
	ADD	DNAMB,BX
	SHR	CX,1
	STD
	DEC	SI
	DEC	SI
	DEC	DI
	DEC	DI
	REP	MOVSW
	CLD
GBC13:	XOR	DI,DI
	MOV	GBCFL,DI
	MOV	CX,DNAMB
	MOV	BX,DNAMP
	MOV	DX,DNAME
	EVEN
	CALL	SYSGC
	MOV	CX,GBSVA
	MOV	BX,GBSVB
	MOV	DX,REG_CP
	ADD	DX,R_COD
	MOV	REG_CP,DX
	MOV	DX,GBSVC
	POP	SI
	INC	GBCNT
	RET
GBC14:	INC	ERRFT
	CALL	ERR_0
	DB	250
GBCPF:
	PUBLIC	GBCPF
	XOR	AX,AX
	PUSH	AX
	PUSH	SI
GPF01:	MOV	SI,WORD PTR [DI]
	MOV	DX,DI
	TEST	SI,1
	JNE	SHORT GPF2A	; (Jump shortened)
	CMP	SI,DNAMB
	JB	SHORT GPF2A	; (Jump shortened)
	CMP	SI,DNAMP
	JAE	SHORT GPF2A	; (Jump shortened)
	MOV	CX,WORD PTR [SI]
	MOV	WORD PTR [SI],DI
	MOV	WORD PTR [DI],CX
GPF1A:	TEST	CL,1
	JNE	SHORT GPF03	; (Jump shortened)
GPF02:	MOV	DI,DX
GPF2A:	INC	DI
	INC	DI
	MOV	BP,SP
	CMP	DI,WORD PTR [BP]
	JNE	GPF01
	POP	SI
	POP	DI
	OR	DI,DI
	JNZ	GPF2A
	RET
GPF03:	MOV	DI,SI
	MOV	SI,CX
	MOV	SI,CS:[SI-2]
	SHL	SI,1
	JMP	CS:WORD PTR L0020[SI]
L0020	LABEL	WORD
	DW	OFFSET MINCODE:GPF06
	DW	OFFSET MINCODE:GPF19
	DW	OFFSET MINCODE:GPF17
	DW	OFFSET MINCODE:GPF02
	DW	OFFSET MINCODE:GPF10
	DW	OFFSET MINCODE:GPF10
	DW	OFFSET MINCODE:GPF12
	DW	OFFSET MINCODE:GPF12
	DW	OFFSET MINCODE:GPF02
	DW	OFFSET MINCODE:GPF02
	DW	OFFSET MINCODE:GPF02
	DW	OFFSET MINCODE:GPF08
	DW	OFFSET MINCODE:GPF08
	DW	OFFSET MINCODE:GPF02
	DW	OFFSET MINCODE:GPF09
	DW	OFFSET MINCODE:GPF02
	DW	OFFSET MINCODE:GPF13
	DW	OFFSET MINCODE:GPF16
	DW	OFFSET MINCODE:GPF02
	DW	OFFSET MINCODE:GPF07
	DW	OFFSET MINCODE:GPF04
	DW	OFFSET MINCODE:GPF02
	DW	OFFSET MINCODE:GPF02
	DW	OFFSET MINCODE:GPF02
	DW	OFFSET MINCODE:GPF10
	DW	OFFSET MINCODE:GPF11
	DW	OFFSET MINCODE:GPF02
	DW	OFFSET MINCODE:GPF14
	DW	OFFSET MINCODE:GPF15
GPF04:	MOV	CX,WORD PTR [2*CMLEN+DI]
	MOV	BX,2*CMTYP
GPF05:	ADD	CX,DI
	ADD	DI,BX
	PUSH	DX
	PUSH	CX
	CMP	SP,LOWSPMIN
	JB	SEC06
	JMP	GPF01
GPF06:	MOV	CX,WORD PTR [2*ARLEN+DI]
	MOV	BX,WORD PTR [2*AROFS+DI]
	JMP	GPF05
GPF07:	MOV	CX,WORD PTR [2*CCUSE+DI]
	MOV	BX,2*CCUSE
	JMP	GPF05
GPF19:	MOV	CX,WORD PTR [2*CDLEN+DI]
	MOV	BX,2*CDFAL
	JMP	GPF05
GPF08:	MOV	CX,WORD PTR [2*OFFS2+DI]
	MOV	BX,2*OFFS3
	JMP	GPF05
GPF09:	MOV	CX,WORD PTR [2*XRLEN+DI]
	MOV	BX,2*XRPTR
	JMP	GPF05
GPF10:	MOV	CX,2*OFFS2
	MOV	BX,2*OFFS1
	JMP	GPF05
GPF11:	MOV	CX,2*FFOFS
	MOV	BX,2*FFNXT
	JMP	GPF05
GPF12:	MOV	CX,2*PARM2
	MOV	BX,2*PTHEN
	JMP	GPF05
GPF13:	MOV	SI,WORD PTR [2*PDDFP+DI]
	MOV	CX,WORD PTR [2*DFPDL+SI]
	MOV	BX,2*PDFLD
	JMP	GPF05
GPF14:	MOV	CX,2*PFARG
	MOV	BX,2*PFCOD
	JMP	GPF05
GPF15:	MOV	CX,2*TESI_
	MOV	BX,2*TESUB
	JMP	GPF05
GPF16:	MOV	CX,2*TRSI_
	MOV	BX,2*TRVAL
	JMP	GPF05
GPF17:	MOV	CX,WORD PTR [2*EXLEN+DI]
	MOV	BX,2*EXFLC
	JMP	GPF05
GTARR:
	PUBLIC	GTARR
	MOV	GTAWA,CX
	MOV	CX,WORD PTR [DI]
	CMP	CX,OFFSET MINCODE:B_ART
	JE	GTAR8
	CMP	CX,OFFSET MINCODE:B_VCT
	JE	GTAR8
	CMP	CX,OFFSET MINCODE:B_TBT
	JNE	GTA9A
	PUSH	DI
	XOR	DI,DI
	XOR	BX,BX
GTAR1:	MOV	BP,SP
	MOV	SI,WORD PTR [BP]
	ADD	SI,WORD PTR [2*TBLEN+SI]
	SUB	SI,2*TBBUK
	MOV	CX,SI
GTAR2:	MOV	SI,CX
	DEC	CX
	DEC	CX
GTAR3:	MOV	SI,WORD PTR [2*TENXT+SI]
	MOV	BP,SP
	CMP	SI,WORD PTR [BP]
	JE	SHORT GTAR6	; (Jump shortened)
	MOV	CNVTP,SI
GTAR4:	MOV	SI,WORD PTR [2*TEVAL+SI]
	CMP	WORD PTR [SI],OFFSET MINCODE:B_TRT
	JE	GTAR4
	MOV	DX,SI
	MOV	SI,CNVTP
	CMP	DX,OFFSET MINDATA:NULLS
	JE	GTAR3
	OR	DI,DI
	JNZ	SHORT GTAR5	; (Jump shortened)
	INC	BX
	JMP	GTAR3
GTAR5:	CMP	GTAWA,0
	JZ	SHORT GTA5A	; (Jump shortened)
	MOV	AX,WORD PTR [2*TESUB+SI]
	STOSW
	MOV	AX,DX
	STOSW
	JMP	GTAR3
GTA5A:	MOV	AX,SI
	STOSW
	MOV	AX,SI
	STOSW
	JMP	GTAR3
GTAR6:	MOV	BP,SP
	CMP	CX,WORD PTR [BP]
	JNE	GTAR2
	OR	DI,DI
	JNZ	SHORT GTAR7	; (Jump shortened)
	OR	BX,BX
	JZ	GTAR9
	MOV	CX,BX
	ADD	CX,BX
	ADD	CX,ARVL2
	SAL	CX,1
	CMP	CX,MXLEN
	JA	GTA9B
	EVEN
	CALL	ALLOC
	MOV	WORD PTR [DI],OFFSET MINCODE:B_ART
	XOR	AX,AX
	MOV	WORD PTR [2*IDVAL+DI],AX
	MOV	WORD PTR [2*ARLEN+DI],CX
	MOV	WORD PTR [2*ARNDM+DI],NUM02
	MOV	DX,WORD PTR INTV1+2
	MOV	AX,WORD PTR INTV1
	MOV	WORD PTR REG_IA,AX
	MOV	WORD PTR WORD PTR [2*ARLBD+DI]+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR WORD PTR [2*ARLBD+DI],AX
	MOV	WORD PTR WORD PTR [2*ARLB2+DI]+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR WORD PTR [2*ARLB2+DI],AX
	MOV	DX,WORD PTR INTV2+2
	MOV	AX,WORD PTR INTV2
	MOV	WORD PTR REG_IA,AX
	MOV	WORD PTR WORD PTR [2*ARDM2+DI]+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR WORD PTR [2*ARDM2+DI],AX
	MOV	WORD PTR REG_IA,BX
	XOR	DX,DX
	MOV	WORD PTR WORD PTR [2*ARDIM+DI]+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR WORD PTR [2*ARDIM+DI],AX
	XOR	AX,AX
	MOV	WORD PTR [2*ARPR2+DI],AX
	MOV	WORD PTR [2*AROFS+DI],2*ARPR2
	MOV	BX,DI
	ADD	DI,2*ARVL2
	JMP	GTAR1
GTAR7:	MOV	DI,BX
	MOV	BP,SP
	MOV	WORD PTR [BP],BX
	MOV	DX,WORD PTR WORD PTR [2*ARDIM+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*ARDIM+DI]
	MOV	WORD PTR REG_IA,AX
	MOV	BP,OFFSET MINDATA:INTVH
	CALL	MLI_
	MOV	AX,WORD PTR INTV2
	ADD	WORD PTR REG_IA,AX
	ADC	DX,WORD PTR INTV2+2
	EVEN
	CALL	ICBLD
	PUSH	DI
	CALL	GTSTG
	DW	ERR_-299
	MOV	SI,DI
	POP	DI
	MOV	WORD PTR [2*ARPR2+DI],SI
	SUB	CX,NUM02
	ADD	SI,CFP_F
	ADD	SI,CX
	MOV	BX,CH_CM
	MOV	[SI],BL
GTAR8:	POP	AX
	ADD	AX,4
	JMP	AX
GTAR9:	POP	DI
	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
GTA9A:	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+2]
GTA9B:	CALL	ERR_1
	DB	4
GTCOD:
	PUBLIC	GTCOD
	CMP	WORD PTR [DI],OFFSET MINCODE:B_CDS
	JE	SHORT GTCD1	; (Jump shortened)
	CMP	WORD PTR [DI],OFFSET MINCODE:B_CDC
	JE	SHORT GTCD1	; (Jump shortened)
	PUSH	DI
	CALL	GTSTG
	DW	GTCD2
	MOV	AX,FLPTR
	MOV	GTCEF,AX
	MOV	AX,R_COD
	MOV	R_GTC,AX
	MOV	R_CIM,DI
	MOV	SCNIL,CX
	XOR	AX,AX
	MOV	SCNPT,AX
	MOV	STAGE,STGXC
	MOV	AX,CMPSN
	MOV	LSTSN,AX
	INC	CMPLN
	EVEN
	CALL	CMPIL
	MOV	STAGE,STGXT
	XOR	AX,AX
	MOV	R_CIM,AX
GTCD1:	POP	AX
	INC	AX
	INC	AX
	JMP	AX
GTCD2:	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
GTEXP:
	PUBLIC	GTEXP
	CMP	WORD PTR [DI],OFFSET MINCODE:B_E__
	JB	SHORT GTEX1	; (Jump shortened)
	PUSH	DI
	CALL	GTSTG
	DW	GTEX2
	MOV	SI,DI
	ADD	SI,CFP_F
	ADD	SI,CX
	DEC	SI
	MOV	AL,[SI]
	XOR	AH,AH
	XCHG	AX,SI
	CMP	SI,CH_CL
	JE	SHORT GTEX2	; (Jump shortened)
	CMP	SI,CH_SM
	JE	SHORT GTEX2	; (Jump shortened)
	MOV	R_CIM,DI
	XOR	AX,AX
	MOV	SCNPT,AX
	MOV	SCNIL,CX
	PUSH	BX
	XOR	BX,BX
	MOV	AX,FLPTR
	MOV	GTCEF,AX
	MOV	AX,R_COD
	MOV	R_GTC,AX
	MOV	STAGE,STGEV
	MOV	SCNTP,T_UOK
	EVEN
	CALL	EXPAN
	XOR	AX,AX
	MOV	SCNRS,AX
	POP	CX
	MOV	AX,SCNPT
	CMP	AX,SCNIL
	JNE	SHORT GTEX2	; (Jump shortened)
	XOR	BX,BX
	MOV	SI,DI
	EVEN
	CALL	CDGEX
	XOR	AX,AX
	MOV	R_CIM,AX
	MOV	STAGE,STGXT
GTEX1:	POP	AX
	INC	AX
	INC	AX
	JMP	AX
GTEX2:	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
GTINT:
	PUBLIC	GTINT
	CMP	WORD PTR [DI],OFFSET MINCODE:B_ICL
	JE	SHORT GTIN2	; (Jump shortened)
	MOV	GTINA,CX
	MOV	GTINB,BX
	EVEN
	CALL	GTNUM
	DW	GTIN3
	CMP	CX,OFFSET MINCODE:B_ICL
	JE	SHORT GTIN1	; (Jump shortened)
	LEA	BP,WORD PTR [2*RCVAL+DI]
	CALL	LDR_
	CALL	RTI_
	JC	SHORT GTIN3	; (Jump shortened)
	EVEN
	CALL	ICBLD
GTIN1:	MOV	CX,GTINA
	MOV	BX,GTINB
GTIN2:	POP	AX
	INC	AX
	INC	AX
	JMP	AX
GTIN3:	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
GTNUM:
	PUBLIC	GTNUM
	MOV	CX,WORD PTR [DI]
	CMP	CX,OFFSET MINCODE:B_ICL
	JE	GTN34
	CMP	CX,OFFSET MINCODE:B_RCL
	JE	GTN34
	PUSH	DI
	PUSH	DI
	CALL	GTSTG
	DW	GTN36
	MOV	DX,WORD PTR INTV0+2
	MOV	AX,WORD PTR INTV0
	MOV	WORD PTR REG_IA,AX
	OR	CX,CX
	JZ	GTN32
	XOR	AX,AX
	MOV	GTNNF,AX
	MOV	WORD PTR GTNEX+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR GTNEX,AX
	XOR	AX,AX
	MOV	GTNSC,AX
	XOR	AX,AX
	MOV	GTNDF,AX
	XOR	AX,AX
	MOV	GTNRD,AX
	MOV	BP,OFFSET MINDATA:REAV0
	CALL	LDR_
	ADD	DI,CFP_F
GTN01:	MOV	BL,[DI]
	XOR	BH,BH
	INC	DI
	CMP	BX,CH_D0
	JB	SHORT GTN02	; (Jump shortened)
	CMP	BX,CH_D9
	JBE	SHORT GTN06	; (Jump shortened)
GTN02:	CMP	BX,CH_BL
	JNE	SHORT GTN03	; (Jump shortened)
GTNA2:	LOOP	GTN01
	JMP	SHORT GTN07	; (Jump shortened)
GTN03:	CMP	BX,CH_PL
	JE	SHORT GTN04	; (Jump shortened)
	CMP	BX,CH_HT
	JE	GTNA2
	CMP	BX,CH_MN
	JNE	GTN12
	MOV	GTNNF,SP
GTN04:	LOOP	GTN05
	JMP	GTN36
GTN05:	MOV	BL,[DI]
	XOR	BH,BH
	INC	DI
	CMP	BX,CH_D0
	JB	SHORT GTN08	; (Jump shortened)
	CMP	BX,CH_D9
	JA	SHORT GTN08	; (Jump shortened)
GTN06:	MOV	WORD PTR GTNSI+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR GTNSI,AX
	CALL	CVM_
	JO	GTN35
	MOV	GTNRD,SP
	LOOP	GTN05
GTN07:	CMP	GTNNF,0
	JNZ	GTN32
	NOT	DX
	NEG	WORD PTR REG_IA
	SBB	DX,-1
	JNO	GTN32
	JMP	GTN36
GTN08:	CMP	BX,CH_BL
	JE	SHORT GTNA9	; (Jump shortened)
	CMP	BX,CH_HT
	JE	SHORT GTNA9	; (Jump shortened)
	CALL	ITR_
	CALL	NGR_
	JMP	SHORT GTN12	; (Jump shortened)
GTN09:	MOV	BL,[DI]
	XOR	BH,BH
	INC	DI
	CMP	BX,CH_HT
	JE	SHORT GTNA9	; (Jump shortened)
	CMP	BX,CH_BL
	JNE	GTN36
GTNA9:	LOOP	GTN09
	JMP	GTN07
GTN10:	MOV	BL,[DI]
	XOR	BH,BH
	INC	DI
	CMP	BX,CH_D0
	JB	SHORT GTN12	; (Jump shortened)
	CMP	BX,CH_D9
	JA	SHORT GTN12	; (Jump shortened)
GTN11:	SUB	BX,CH_D0
	MOV	BP,OFFSET MINDATA:REAVT
	CALL	MLR_
	CALL	OVR_
	JNZ	GTN36
	MOV	BP,OFFSET MINDATA:GTNSR
	CALL	STR_
	MOV	WORD PTR REG_IA,BX
	XOR	DX,DX
	CALL	ITR_
	MOV	BP,OFFSET MINDATA:GTNSR
	CALL	ADR_
	MOV	AX,GTNDF
	ADD	GTNSC,AX
	MOV	GTNRD,SP
	LOOP	GTN10
	JMP	GTN22
GTN12:	CMP	BX,CH_DT
	JNE	SHORT GTN13	; (Jump shortened)
	CMP	GTNDF,0
	JNZ	GTN36
	MOV	GTNDF,NUM01
	LOOP	GTN10
	JMP	GTN22
GTN13:	CMP	BX,CH_LE
	JE	SHORT GTN15	; (Jump shortened)
	CMP	BX,CH_LD
	JE	SHORT GTN15	; (Jump shortened)
	CMP	BX,CH__E
	JE	SHORT GTN15	; (Jump shortened)
	CMP	BX,CH__D
	JE	SHORT GTN15	; (Jump shortened)
GTN14:	CMP	BX,CH_BL
	JE	SHORT GTNB4	; (Jump shortened)
	CMP	BX,CH_HT
	JE	SHORT GTNB4	; (Jump shortened)
	JMP	GTN36
GTNB4:	MOV	BL,[DI]
	XOR	BH,BH
	INC	DI
	LOOP	GTN14
	JMP	GTN22
GTN15:	XOR	AX,AX
	MOV	GTNES,AX
	MOV	DX,WORD PTR INTV0+2
	MOV	AX,WORD PTR INTV0
	MOV	WORD PTR REG_IA,AX
	MOV	GTNDF,SP
	LOOP	GTN16
	JMP	GTN36
GTN16:	MOV	BL,[DI]
	XOR	BH,BH
	INC	DI
	CMP	BX,CH_PL
	JE	SHORT GTN17	; (Jump shortened)
	CMP	BX,CH_MN
	JNE	SHORT GTN19	; (Jump shortened)
	MOV	GTNES,SP
GTN17:	LOOP	GTN18
	JMP	GTN36
GTN18:	MOV	BL,[DI]
	XOR	BH,BH
	INC	DI
GTN19:	CMP	BX,CH_D0
	JB	SHORT GTN20	; (Jump shortened)
	CMP	BX,CH_D9
	JA	SHORT GTN20	; (Jump shortened)
	CALL	CVM_
	JO	GTN36
	LOOP	GTN18
	JMP	SHORT GTN21	; (Jump shortened)
GTN20:	CMP	BX,CH_BL
	JE	SHORT GTNC0	; (Jump shortened)
	CMP	BX,CH_HT
	JE	SHORT GTNC0	; (Jump shortened)
	JMP	GTN36
GTNC0:	MOV	BL,[DI]
	XOR	BH,BH
	INC	DI
	LOOP	GTN20
GTN21:	MOV	WORD PTR GTNEX+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR GTNEX,AX
	CMP	GTNES,0
	JNZ	SHORT GTN22	; (Jump shortened)
	NOT	DX
	NEG	WORD PTR REG_IA
	SBB	DX,-1
	JO	GTN36
	MOV	WORD PTR GTNEX+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR GTNEX,AX
GTN22:	CMP	GTNRD,0
	JZ	GTN36
	CMP	GTNDF,0
	JZ	GTN36
	MOV	AX,GTNSC
	MOV	WORD PTR REG_IA,AX
	XOR	DX,DX
	MOV	AX,WORD PTR GTNEX
	SUB	WORD PTR REG_IA,AX
	SBB	DX,WORD PTR GTNEX+2
	JO	GTN36
	OR	DX,DX
	JL	SHORT GTN26	; (Jump shortened)
	OR	DX,DX
	JNE	GTN36
	MOV	CX,WORD PTR REG_IA
	OR	CX,CX
	JL	GTN36
GTN23:	CMP	CX,NUM10
	JBE	SHORT GTN24	; (Jump shortened)
	MOV	BP,OFFSET MINDATA:REATT
	CALL	DVR_
	SUB	CX,NUM10
	JMP	GTN23
GTN24:	OR	CX,CX
	JZ	SHORT GTN30	; (Jump shortened)
	MOV	BX,CFP_R
	MOV	DI,OFFSET MINDATA:REAV1
	SAL	CX,1
GTN25:	ADD	DI,CX
	DEC	BX
	JNZ	GTN25
	LEA	BP,WORD PTR [DI]
	CALL	DVR_
	JMP	SHORT GTN30	; (Jump shortened)
GTN26:	NOT	DX
	NEG	WORD PTR REG_IA
	SBB	DX,-1
	JO	GTN36
	OR	DX,DX
	JNE	GTN36
	MOV	CX,WORD PTR REG_IA
	OR	CX,CX
	JL	SHORT GTN36	; (Jump shortened)
GTN27:	CMP	CX,NUM10
	JBE	SHORT GTN28	; (Jump shortened)
	MOV	BP,OFFSET MINDATA:REATT
	CALL	MLR_
	CALL	OVR_
	JNZ	SHORT GTN36	; (Jump shortened)
	SUB	CX,NUM10
	JMP	GTN27
GTN28:	OR	CX,CX
	JZ	SHORT GTN30	; (Jump shortened)
	MOV	BX,CFP_R
	MOV	DI,OFFSET MINDATA:REAV1
	SAL	CX,1
GTN29:	ADD	DI,CX
	DEC	BX
	JNZ	GTN29
	LEA	BP,WORD PTR [DI]
	CALL	MLR_
	CALL	OVR_
	JNZ	SHORT GTN36	; (Jump shortened)
GTN30:	CMP	GTNNF,0
	JZ	SHORT GTN31	; (Jump shortened)
	CALL	NGR_
GTN31:
	EVEN
	CALL	RCBLD
	JMP	SHORT GTN33	; (Jump shortened)
GTN32:
	EVEN
	CALL	ICBLD
GTN33:	MOV	CX,WORD PTR [DI]
	POP	AX
GTN34:	POP	AX
	INC	AX
	INC	AX
	JMP	AX
GTN35:	DEC	DI
	MOV	BL,[DI]
	XOR	BH,BH
	MOV	BL,[DI]
	XOR	BH,BH
	INC	DI
	MOV	DX,WORD PTR GTNSI+2
	MOV	AX,WORD PTR GTNSI
	MOV	WORD PTR REG_IA,AX
	CALL	ITR_
	CALL	NGR_
	JMP	GTN11
GTN36:	POP	DI
	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
GTNVR:
	PUBLIC	GTNVR
	CMP	WORD PTR [DI],OFFSET MINCODE:B_NML
	JNE	SHORT GNV02	; (Jump shortened)
	MOV	DI,WORD PTR [2*NMBAS+DI]
	CMP	DI,STATE
	JB	GNV07
GNV01:	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
GNV02:	MOV	GNVSA,CX
	MOV	GNVSB,BX
	PUSH	DI
	CALL	GTSTG
	DW	GNV01
	OR	CX,CX
	JZ	GNV01
	EVEN
	CALL	FLSTG
	PUSH	SI
	PUSH	DI
	MOV	BX,DI
	ADD	BX,2*SCHAR
	MOV	GNVST,BX
	MOV	BX,CX
	INC	BX
	SHR	BX,1
	MOV	GNVNW,BX
	EVEN
	CALL	HASHS
	MOV	BP,OFFSET MINDATA:HSHNB
	CALL	RMI_
	MOV	DX,WORD PTR REG_IA
	SAL	DX,1
	ADD	DX,HSHTB
	SUB	DX,2*VRNXT
GNV03:	MOV	SI,DX
	MOV	SI,WORD PTR [2*VRNXT+SI]
	OR	SI,SI
	JZ	SHORT GNV08	; (Jump shortened)
	MOV	DX,SI
	CMP	WORD PTR [2*VRLEN+SI],0
	JNZ	SHORT GNV04	; (Jump shortened)
	MOV	SI,WORD PTR [2*VRSVP+SI]
	SUB	SI,2*VRSOF
GNV04:	CMP	CX,WORD PTR [2*VRLEN+SI]
	JNE	GNV03
	ADD	SI,2*VRCHS
	MOV	BX,GNVNW
	MOV	DI,GNVST
GNV05:	MOV	AX,WORD PTR [DI]
	CMP	AX,WORD PTR [SI]
	JNZ	GNV03
	INC	DI
	INC	DI
	INC	SI
	INC	SI
	DEC	BX
	JNZ	GNV05
	MOV	DI,DX
GNV06:	MOV	CX,GNVSA
	MOV	BX,GNVSB
	POP	AX
	POP	SI
GNV07:	POP	AX
	INC	AX
	INC	AX
	JMP	AX
GNV08:	XOR	DI,DI
	MOV	GNVHE,DX
	CMP	CX,NUM09
	JA	SHORT GNV14	; (Jump shortened)
	MOV	SI,CX
	SAL	SI,1
	MOV	SI,VSRCH[SI]
GNV09:	MOV	GNVSP,SI
	LODSW
	MOV	DX,AX
	LODSW
	MOV	BX,AX
	CMP	CX,BX
	JNE	SHORT GNV14	; (Jump shortened)
	MOV	BX,GNVNW
	MOV	DI,GNVST
GNV10:	MOV	AX,WORD PTR [DI]
	CMP	AX,WORD PTR [SI]
	JNZ	SHORT GNV11	; (Jump shortened)
	INC	DI
	INC	DI
	INC	SI
	INC	SI
	DEC	BX
	JNZ	GNV10
	XOR	DX,DX
	MOV	CX,2*VRSI_
	JMP	SHORT GNV15	; (Jump shortened)
GNV11:	INC	SI
	INC	SI
	DEC	BX
	JNZ	GNV11
	XCHG	AX,CX
	MOV	CL,SVNBT
	SHR	DX,CL
	XCHG	AX,CX
GNV12:	MOV	BX,BITS1
	AND	BX,DX
;	OR	BX,BX	(Optimized)
	JZ	SHORT GNV13	; (Jump shortened)
	INC	SI
	INC	SI
GNV13:	SHR	DX,1
;	OR	DX,DX	(Optimized)
	JNZ	GNV12
	JMP	GNV09
GNV14:	MOV	DX,CX
	MOV	CX,VRCHS
	ADD	CX,GNVNW
	SAL	CX,1
GNV15:
	EVEN
	CALL	ALOST
	MOV	BX,DI
	MOV	SI,OFFSET MINDATA:STNVR
	MOV	CX,2*VRLEN
	SHR	CX,1
	REP	MOVSW
	MOV	SI,GNVHE
	MOV	WORD PTR [2*VRNXT+SI],BX
	MOV	AX,DX
	STOSW
	MOV	CX,GNVNW
	SAL	CX,1
	OR	DX,DX
	JZ	SHORT GNV16	; (Jump shortened)
	MOV	BP,SP
	MOV	SI,WORD PTR [BP]
	ADD	SI,2*SCHAR
	SHR	CX,1
	REP	MOVSW
	MOV	DI,BX
	JMP	GNV06
GNV16:	MOV	SI,GNVSP
	MOV	WORD PTR [DI],SI
	MOV	DI,BX
	MOV	BX,WORD PTR [2*SVBIT+SI]
	ADD	SI,2*SVCHS
	ADD	SI,CX
	MOV	DX,BTKNM
	AND	DX,BX
;	OR	DX,DX	(Optimized)
	JZ	SHORT GNV17	; (Jump shortened)
	INC	SI
	INC	SI
GNV17:	MOV	DX,BTFNC
	AND	DX,BX
;	OR	DX,DX	(Optimized)
	JZ	SHORT GNV18	; (Jump shortened)
	MOV	WORD PTR [2*VRFNC+DI],SI
	ADD	SI,2*NUM02
GNV18:	MOV	DX,BTLBL
	AND	DX,BX
;	OR	DX,DX	(Optimized)
	JZ	SHORT GNV19	; (Jump shortened)
	MOV	WORD PTR [2*VRLBL+DI],SI
	INC	SI
	INC	SI
GNV19:	MOV	DX,BTVAL
	AND	DX,BX
;	OR	DX,DX	(Optimized)
	JZ	GNV06
	MOV	AX,WORD PTR [SI]
	MOV	WORD PTR [2*VRVAL+DI],AX
	MOV	WORD PTR [2*VRSTO+DI],OFFSET MINCODE:B_VRE
	JMP	GNV06
GTPAT:
	PUBLIC	GTPAT
	CMP	WORD PTR [DI],OFFSET MINCODE:P_AAA
	JA	SHORT GTPT5	; (Jump shortened)
	MOV	GTPSB,BX
	PUSH	DI
	CALL	GTSTG
	DW	GTPT2
	OR	CX,CX
	JNZ	SHORT GTPT1	; (Jump shortened)
	MOV	DI,OFFSET MINDATA:NDNTH
	JMP	SHORT GTPT4	; (Jump shortened)
GTPT1:	MOV	BX,OFFSET MINCODE:P_STR
	CMP	CX,NUM01
	JNE	SHORT GTPT3	; (Jump shortened)
	ADD	DI,CFP_F
	MOV	CL,[DI]
	XOR	CH,CH
	MOV	DI,CX
	MOV	BX,OFFSET MINCODE:P_ANS
	JMP	SHORT GTPT3	; (Jump shortened)
GTPT2:	MOV	BX,OFFSET MINCODE:P_EXA
	CMP	WORD PTR [DI],OFFSET MINCODE:B_E__
	JB	SHORT GTPT3	; (Jump shortened)
	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
GTPT3:
	EVEN
	CALL	PBILD
GTPT4:	MOV	BX,GTPSB
GTPT5:	POP	AX
	INC	AX
	INC	AX
	JMP	AX
GTREA:
	PUBLIC	GTREA
	MOV	CX,WORD PTR [DI]
	CMP	CX,OFFSET MINCODE:B_RCL
	JE	SHORT GTRE2	; (Jump shortened)
	EVEN
	CALL	GTNUM
	DW	GTRE3
	CMP	CX,OFFSET MINCODE:B_RCL
	JE	SHORT GTRE2	; (Jump shortened)
GTRE1:	MOV	DX,WORD PTR WORD PTR [2*ICVAL+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+DI]
	MOV	WORD PTR REG_IA,AX
	CALL	ITR_
	EVEN
	CALL	RCBLD
GTRE2:	POP	AX
	INC	AX
	INC	AX
	JMP	AX
GTRE3:	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
GTSMI:
	PUBLIC	GTSMI
	POP	PRC_+10
	POP	DI
	CMP	WORD PTR [DI],OFFSET MINCODE:B_ICL
	JE	SHORT GTSM1	; (Jump shortened)
	EVEN
	CALL	GTINT
	DW	GTSM2
GTSM1:	MOV	DX,WORD PTR WORD PTR [2*ICVAL+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+DI]
	MOV	WORD PTR REG_IA,AX
	OR	DX,DX
	JNE	SHORT GTSM3	; (Jump shortened)
	MOV	DX,WORD PTR REG_IA
	OR	DX,DX
	JL	SHORT GTSM3	; (Jump shortened)
	CMP	DX,MXLEN
	JA	SHORT GTSM3	; (Jump shortened)
	MOV	DI,DX
	MOV	AX,PRC_+10
	ADD	AX,4
	JMP	AX
GTSM2:	MOV	BP,PRC_+10
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
GTSM3:	MOV	BP,PRC_+10
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+2]
GTSTG:
	PUBLIC	GTSTG
	POP	PRC_+12
	POP	DI
	CMP	WORD PTR [DI],OFFSET MINCODE:B_SCL
	JE	GTS30
GTS01:	PUSH	DI
	PUSH	SI
	MOV	GTSVB,BX
	MOV	GTSVC,DX
	MOV	CX,WORD PTR [DI]
	CMP	CX,OFFSET MINCODE:B_ICL
	JE	SHORT GTS05	; (Jump shortened)
	CMP	CX,OFFSET MINCODE:B_RCL
	JE	GTS10
	CMP	CX,OFFSET MINCODE:B_NML
	JE	SHORT GTS03	; (Jump shortened)
GTS02:	POP	SI
	POP	DI
	MOV	BP,PRC_+12
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
GTS03:	MOV	SI,WORD PTR [2*NMBAS+DI]
	CMP	SI,STATE
	JA	GTS02
	ADD	SI,2*VRSOF
	MOV	CX,WORD PTR [2*SCLEN+SI]
	OR	CX,CX
	JNZ	SHORT GTS04	; (Jump shortened)
	MOV	SI,WORD PTR [2*VRSVO+SI]
	MOV	CX,WORD PTR [2*SVLEN+SI]
GTS04:	XOR	BX,BX
	EVEN
	CALL	SBSTR
	JMP	GTS29
GTS05:	MOV	DX,WORD PTR WORD PTR [2*ICVAL+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+DI]
	MOV	WORD PTR REG_IA,AX
	MOV	GTSSF,NUM01
	OR	DX,DX
	JL	SHORT GTS06	; (Jump shortened)
	NOT	DX
	NEG	WORD PTR REG_IA
	SBB	DX,-1
	XOR	AX,AX
	MOV	GTSSF,AX
GTS06:	MOV	DI,GTSWK
	MOV	BX,NSTMX
	LEA	DI,[CFP_F+DI+BX]
GTS07:	CALL	CVD_
	DEC	DI
	MOV	[DI],CL
	DEC	BX
	MOV	AX,WORD PTR REG_IA
	OR	AX,DX
	JNE	GTS07
GTS08:	MOV	CX,NSTMX
	SUB	CX,BX
	MOV	SI,CX
	ADD	CX,GTSSF
	EVEN
	CALL	ALOCS
	MOV	DX,DI
	ADD	DI,CFP_F
	CMP	GTSSF,0
	JZ	SHORT GTS09	; (Jump shortened)
	MOV	CX,CH_MN
	MOV	AL,CL
	STOSB
GTS09:	MOV	CX,SI
	MOV	SI,GTSWK
	LEA	SI,[CFP_F+SI+BX]
	SHR	CX,1
	REP	MOVSW
	ADC	CX,CX
	REP	MOVSB
	MOV	DI,DX
	JMP	SHORT GTS29	; (Jump shortened)
GTS10:	LEA	BP,WORD PTR [2*RCVAL+DI]
	CALL	LDR_
	MOV	CX,NSTMR
	XOR	SI,SI
	EVEN
	CALL	ALOCS
	MOV	CX,CFP_S
	XOR	BX,BX
	EVEN
	CALL	SYSCR
	MOV	WORD PTR [2*SCLEN+DI],CX
	XOR	BX,BX
	EVEN
	CALL	TRIMR
GTS29:	POP	SI
	POP	AX
	MOV	BX,GTSVB
	MOV	DX,GTSVC
GTS30:	MOV	CX,WORD PTR [2*SCLEN+DI]
	MOV	AX,PRC_+12
	INC	AX
	INC	AX
	JMP	AX
GTS31:	MOV	SI,OFFSET MINDATA:SCRE0
	MOV	CX,NUM02
	XOR	BX,BX
	EVEN
	CALL	SBSTR
	JMP	GTS29
GTVAR:
	PUBLIC	GTVAR
	CMP	WORD PTR [DI],OFFSET MINCODE:B_NML
	JNE	SHORT GTVR2	; (Jump shortened)
	MOV	CX,WORD PTR [2*NMOFS+DI]
	MOV	SI,WORD PTR [2*NMBAS+DI]
	CMP	WORD PTR [SI],OFFSET MINCODE:B_EVT
	JE	SHORT GTVR1	; (Jump shortened)
	CMP	WORD PTR [SI],OFFSET MINCODE:B_KVT
	JNE	SHORT GTVR3	; (Jump shortened)
GTVR1:	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
GTVR2:	MOV	GTVRC,DX
	EVEN
	CALL	GTNVR
	DW	GTVR1
	MOV	SI,DI
	MOV	CX,2*VRVAL
	MOV	DX,GTVRC
GTVR3:	CMP	SI,STATE
	JA	SHORT GTVR4	; (Jump shortened)
	CMP	WORD PTR [2*VRSTO+SI],OFFSET MINCODE:B_VRE
	JE	GTVR1
GTVR4:	POP	AX
	INC	AX
	INC	AX
	JMP	AX
HASHS:
	PUBLIC	HASHS
	MOV	DX,WORD PTR [2*SCLEN+DI]
	MOV	BX,DX
	OR	DX,DX
	JZ	SHORT HSHS3	; (Jump shortened)
	INC	DX
	SHR	DX,1
	ADD	DI,2*SCHAR
	CMP	DX,E_HNW
	JB	SHORT HSHS1	; (Jump shortened)
	MOV	DX,E_HNW
HSHS1:
HSHS2:	XOR	BX,WORD PTR [DI]
	INC	DI
	INC	DI
	DEC	DX
	JNZ	HSHS2
HSHS3:
	AND	BX,BITSM
	MOV	WORD PTR REG_IA,BX
	XOR	DX,DX
	XOR	DI,DI
	RET
ICBLD:
	PUBLIC	ICBLD
	OR	DX,DX
	JNE	SHORT ICBL1	; (Jump shortened)
	MOV	DI,WORD PTR REG_IA
	OR	DI,DI
	JL	SHORT ICBL1	; (Jump shortened)
	CMP	DI,NUM02
	JBE	SHORT ICBL3	; (Jump shortened)
ICBL1:	MOV	DI,DNAMP
	ADD	DI,2*ICSI_
	CMP	DI,DNAME
	JB	SHORT ICBL2	; (Jump shortened)
	MOV	CX,2*ICSI_
	EVEN
	CALL	ALLOC
	ADD	DI,CX
ICBL2:	MOV	DNAMP,DI
	SUB	DI,2*ICSI_
	MOV	WORD PTR [DI],OFFSET MINCODE:B_ICL
	MOV	WORD PTR WORD PTR [2*ICVAL+DI]+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR WORD PTR [2*ICVAL+DI],AX
	RET
ICBL3:	SAL	DI,1
	MOV	DI,INTAB[DI]
	RET
IDENT:
	PUBLIC	IDENT
	CMP	DI,SI
	JE	IDEN7
	MOV	DX,WORD PTR [DI]
	CMP	DX,WORD PTR [SI]
	JNE	SHORT IDEN1	; (Jump shortened)
	CMP	DX,OFFSET MINCODE:B_SCL
	JE	SHORT IDEN2	; (Jump shortened)
	CMP	DX,OFFSET MINCODE:B_ICL
	JE	SHORT IDEN4	; (Jump shortened)
	CMP	DX,OFFSET MINCODE:B_RCL
	JE	SHORT IDEN5	; (Jump shortened)
	CMP	DX,OFFSET MINCODE:B_NML
	JE	SHORT IDEN6	; (Jump shortened)
IDEN1:	POP	AX
	INC	AX
	INC	AX
	JMP	AX
IDEN2:	MOV	DX,WORD PTR [2*SCLEN+DI]
	CMP	DX,WORD PTR [2*SCLEN+SI]
	JNE	IDEN1
IDN2A:	ADD	DI,2*SCHAR
	ADD	SI,2*SCHAR
	INC	DX
	SHR	DX,1
IDEN3:	MOV	AX,WORD PTR [DI]
	CMP	AX,WORD PTR [SI]
	JNZ	SHORT IDEN8	; (Jump shortened)
	INC	DI
	INC	DI
	INC	SI
	INC	SI
	DEC	DX
	JNZ	IDEN3
	XOR	SI,SI
	XOR	DI,DI
	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
IDEN4:	MOV	DX,WORD PTR WORD PTR [2*ICVAL+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+DI]
	MOV	WORD PTR REG_IA,AX
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+SI]
	SUB	WORD PTR REG_IA,AX
	SBB	DX,WORD PTR WORD PTR [2*ICVAL+SI]+2
	JO	IDEN1
	MOV	AX,WORD PTR REG_IA
	OR	AX,DX
	JNE	IDEN1
	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
IDEN5:	LEA	BP,WORD PTR [2*RCVAL+DI]
	CALL	LDR_
	LEA	BP,WORD PTR [2*RCVAL+SI]
	CALL	SBR_
	CALL	OVR_
	JNZ	IDEN1
	CALL	CPR_
	JNE	IDEN1
	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
IDEN6:	MOV	AX,WORD PTR [2*NMOFS+DI]
	CMP	AX,WORD PTR [2*NMOFS+SI]
	JNE	IDEN1
	MOV	AX,WORD PTR [2*NMBAS+DI]
	CMP	AX,WORD PTR [2*NMBAS+SI]
	JNE	IDEN1
IDEN7:	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
IDEN8:	XOR	DI,DI
	XOR	SI,SI
	POP	AX
	INC	AX
	INC	AX
	JMP	AX
INOUT:
	PUBLIC	INOUT
	PUSH	BX
	MOV	CX,WORD PTR [2*SCLEN+SI]
	XOR	BX,BX
	EVEN
	CALL	SBSTR
	EVEN
	CALL	GTNVR
	DW	ERR_-299
	MOV	DX,DI
	POP	BX
	XOR	SI,SI
	EVEN
	CALL	TRBLD
	MOV	SI,DX
	MOV	AX,WORD PTR [2*VRSVP+SI]
	MOV	WORD PTR [2*TRTER+DI],AX
	MOV	WORD PTR [2*VRVAL+SI],DI
	MOV	WORD PTR [2*VRGET+SI],OFFSET MINCODE:B_VRA
	MOV	WORD PTR [2*VRSTO+SI],OFFSET MINCODE:B_VRV
	RET
INSTA:
	PUBLIC	INSTA
	MOV	DX,PRLEN
	MOV	PRBUF,DI
	MOV	AX,OFFSET MINCODE:B_SCL
	STOSW
	MOV	AX,DX
	STOSW
	INC	DX
	SHR	DX,1
	MOV	PRLNW,DX
INST1:	MOV	AX,NULLW
	STOSW
	DEC	DX
	JNZ	INST1
	MOV	CX,NSTMX
	ADD	CX,1+2*SCSI_
	AND	CX,-2
	MOV	GTSWK,DI
	ADD	DI,CX
	MOV	KVALP,DI
	MOV	WORD PTR [DI],OFFSET MINCODE:B_SCL
	MOV	DX,CFP_A
	MOV	WORD PTR [2*SCLEN+DI],DX
	MOV	BX,DX
	ADD	BX,1+2*SCSI_
	AND	BX,-2
	ADD	BX,DI
	MOV	CX,BX
	ADD	DI,CFP_F
	XOR	BX,BX
INST2:	MOV	AL,BL
	STOSB
	INC	BX
	DEC	DX
	JNZ	INST2
	MOV	DI,CX
	RET
IOFCB:
	PUBLIC	IOFCB
	POP	PRC_+14
	CALL	GTSTG
	DW	IOFC2
	MOV	SI,DI
	EVEN
	CALL	GTNVR
	DW	IOFC3
	MOV	BX,SI
	MOV	SI,DI
	XOR	CX,CX
IOFC1:	MOV	DI,WORD PTR [2*VRVAL+DI]
	CMP	WORD PTR [DI],OFFSET MINCODE:B_TRT
	JNE	SHORT IOFC4	; (Jump shortened)
	CMP	WORD PTR [2*TRTYP+DI],TRTFC
	JNE	IOFC1
	MOV	CX,WORD PTR [2*TRFPT+DI]
	MOV	DI,BX
	MOV	AX,PRC_+14
	ADD	AX,6
	JMP	AX
IOFC2:	MOV	BP,PRC_+14
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
IOFC3:	MOV	BP,PRC_+14
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+2]
IOFC4:	MOV	BP,PRC_+14
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+4]
IOPPF:
	PUBLIC	IOPPF
	POP	PRC_+16
	XOR	BX,BX
IOPP1:	MOV	SI,IODEL
	MOV	DX,SI
	XOR	CX,CX
	EVEN
	CALL	XSCAN
	PUSH	DI
	INC	BX
	OR	CX,CX
	JNZ	IOPP1
	MOV	DX,BX
	MOV	BX,IOPTT
	MOV	CX,R_IOF
	MOV	DI,R_IO2
	MOV	SI,R_IO1
	MOV	AX,PRC_+16
	JMP	AX
IOPUT:
	PUBLIC	IOPUT
	POP	PRC_+18
	XOR	AX,AX
	MOV	R_IOT,AX
	XOR	AX,AX
	MOV	R_IOF,AX
	XOR	AX,AX
	MOV	R_IOP,AX
	MOV	IOPTT,BX
	CALL	XSCNI
	DW	IOP13
	DW	IOPA0
IOPA0:	MOV	R_IO2,DI
	MOV	SI,CX
	CALL	GTSTG
	DW	IOP14
	MOV	R_IO1,DI
	EVEN
	CALL	GTNVR
	DW	IOP00
	JMP	SHORT IOP04	; (Jump shortened)
IOP00:	OR	SI,SI
	JZ	SHORT IOP01	; (Jump shortened)
	CALL	IOPPF
	EVEN
	CALL	SYSFC
	DW	IOP16
	DW	IOP26
	JMP	IOP11
IOP01:	MOV	BX,IOPTT
	MOV	DI,R_IOT
	EVEN
	CALL	TRBLD
	MOV	DX,DI
	POP	DI
	PUSH	DX
	EVEN
	CALL	GTVAR
	DW	IOP15
	POP	DX
	MOV	R_ION,SI
	MOV	DI,SI
	ADD	DI,CX
	SUB	DI,2*VRVAL
IOP02:	MOV	SI,DI
	MOV	DI,WORD PTR [2*VRVAL+DI]
	CMP	WORD PTR [DI],OFFSET MINCODE:B_TRT
	JNE	SHORT IOP03	; (Jump shortened)
	MOV	AX,WORD PTR [2*TRTYP+DI]
	CMP	AX,IOPTT
	JNE	IOP02
	MOV	DI,WORD PTR [2*TRNXT+DI]
IOP03:	MOV	WORD PTR [2*VRVAL+SI],DX
	MOV	SI,DX
	MOV	WORD PTR [2*TRNXT+SI],DI
	MOV	DI,R_ION
	MOV	BX,CX
	EVEN
	CALL	SETVR
	MOV	DI,R_IOT
	OR	DI,DI
	JNZ	IOP19
	MOV	AX,PRC_+18
	ADD	AX,14
	JMP	AX
IOP04:	XOR	CX,CX
IOP05:	MOV	BX,DI
	MOV	DI,WORD PTR [2*VRVAL+DI]
	CMP	WORD PTR [DI],OFFSET MINCODE:B_TRT
	JNE	SHORT IOP06	; (Jump shortened)
	CMP	WORD PTR [2*TRTYP+DI],TRTFC
	JNE	IOP05
	MOV	R_IOT,DI
	MOV	CX,WORD PTR [2*TRFPT+DI]
IOP06:	MOV	R_IOF,CX
	MOV	R_IOP,BX
	CALL	IOPPF
	EVEN
	CALL	SYSFC
	DW	IOP16
	DW	IOP26
	OR	CX,CX
	JZ	IOP12
	CMP	DX,NUM02
	JB	SHORT IOP6A	; (Jump shortened)
	EVEN
	CALL	ALOST
	JMP	SHORT IOP6B	; (Jump shortened)
IOP6A:
	EVEN
	CALL	ALLOC
IOP6B:	MOV	SI,DI
	MOV	BX,CX
	SHR	BX,1
IOP07:	XOR	AX,AX
	STOSW
	DEC	BX
	JNZ	IOP07
	CMP	DX,NUM02
	JE	SHORT IOP09	; (Jump shortened)
	MOV	WORD PTR [SI],OFFSET MINCODE:B_XNT
	MOV	WORD PTR [2*1+SI],CX
	OR	DX,DX
	JNZ	SHORT IOP09	; (Jump shortened)
	MOV	WORD PTR [SI],OFFSET MINCODE:B_XRT
IOP09:	MOV	DI,R_IOT
	MOV	R_IOF,SI
	OR	DI,DI
	JNZ	SHORT IOP10	; (Jump shortened)
	MOV	BX,TRTFC
	EVEN
	CALL	TRBLD
	MOV	R_IOT,DI
	MOV	SI,R_IOP
	MOV	AX,WORD PTR [2*VRVAL+SI]
	MOV	WORD PTR [2*VRVAL+DI],AX
	MOV	WORD PTR [2*VRVAL+SI],DI
	MOV	DI,SI
	EVEN
	CALL	SETVR
	MOV	DI,WORD PTR [2*VRVAL+DI]
	JMP	SHORT IOP1A	; (Jump shortened)
IOP10:	XOR	AX,AX
	MOV	R_IOP,AX
IOP1A:	MOV	AX,R_IOF
	MOV	WORD PTR [2*TRFPT+DI],AX
IOP11:	MOV	CX,R_IOF
	MOV	BX,IOPTT
	MOV	DI,R_IO2
	MOV	SI,R_IO1
	EVEN
	CALL	SYSIO
	DW	IOP17
	DW	IOP18
	CMP	R_IOT,0
	JNZ	IOP01
	CMP	IOPTT,0
	JNZ	IOP01
	OR	DX,DX
	JZ	IOP01
	MOV	CSWIN,DX
	JMP	IOP01
IOP12:	OR	SI,SI
	JNZ	IOP09
	JMP	IOP11
IOP13:	MOV	BP,PRC_+18
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
IOP14:	MOV	BP,PRC_+18
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+2]
IOP15:	POP	AX
	MOV	BP,PRC_+18
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+4]
IOP16:	MOV	BP,PRC_+18
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+6]
IOP26:	MOV	BP,PRC_+18
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+12]
IOP17:	MOV	DI,R_IOP
	OR	DI,DI
	JZ	SHORT IOPA7	; (Jump shortened)
	MOV	SI,WORD PTR [2*VRVAL+DI]
	MOV	AX,WORD PTR [2*VRVAL+SI]
	MOV	WORD PTR [2*VRVAL+DI],AX
	EVEN
	CALL	SETVR
IOPA7:	MOV	BP,PRC_+18
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+8]
IOP18:	MOV	DI,R_IOP
	OR	DI,DI
	JZ	IOPA7
	MOV	SI,WORD PTR [2*VRVAL+DI]
	MOV	AX,WORD PTR [2*VRVAL+SI]
	MOV	WORD PTR [2*VRVAL+DI],AX
	EVEN
	CALL	SETVR
IOPA8:	MOV	BP,PRC_+18
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+10]
IOP19:	MOV	DX,R_ION
IOP20:	MOV	DI,WORD PTR [2*TRTRF+DI]
	OR	DI,DI
	JZ	SHORT IOP21	; (Jump shortened)
	CMP	DX,WORD PTR [2*IONMB+DI]
	JNE	IOP20
	CMP	BX,WORD PTR [2*IONMO+DI]
	JE	SHORT IOP22	; (Jump shortened)
	JMP	IOP20
IOP21:	MOV	CX,2*NUM05
	EVEN
	CALL	ALLOC
	MOV	WORD PTR [DI],OFFSET MINCODE:B_XRT
	MOV	WORD PTR [2*1+DI],CX
	MOV	WORD PTR [2*IONMB+DI],DX
	MOV	WORD PTR [2*IONMO+DI],BX
	MOV	SI,R_IOT
	MOV	CX,WORD PTR [2*TRTRF+SI]
	MOV	WORD PTR [2*TRTRF+SI],DI
	MOV	WORD PTR [2*TRTRF+DI],CX
IOP22:	CMP	R_IOF,0
	JZ	SHORT IOP25	; (Jump shortened)
	MOV	SI,R_FCB
IOP23:	OR	SI,SI
	JZ	SHORT IOP24	; (Jump shortened)
	MOV	AX,WORD PTR [2*3+SI]
	CMP	AX,R_IOF
	JE	SHORT IOP25	; (Jump shortened)
	MOV	SI,WORD PTR [2*2+SI]
	JMP	IOP23
IOP24:	MOV	CX,2*NUM04
	EVEN
	CALL	ALLOC
	MOV	WORD PTR [DI],OFFSET MINCODE:B_XRT
	MOV	WORD PTR [2*1+DI],CX
	MOV	AX,R_FCB
	MOV	WORD PTR [2*2+DI],AX
	MOV	AX,R_IOF
	MOV	WORD PTR [2*3+DI],AX
	MOV	R_FCB,DI
IOP25:	MOV	AX,PRC_+18
	ADD	AX,14
	JMP	AX
KTREX:
	PUBLIC	KTREX
	OR	SI,SI
	JZ	SHORT KTRX3	; (Jump shortened)
	CMP	KVTRA,0
	JZ	SHORT KTRX3	; (Jump shortened)
	DEC	KVTRA
	PUSH	DI
	MOV	DI,SI
	MOV	SI,WORD PTR [2*TRKVR+DI]
	MOV	CX,2*VRVAL
	CMP	WORD PTR [2*TRFNC+DI],0
	JZ	SHORT KTRX1	; (Jump shortened)
	EVEN
	CALL	TRXEQ
	JMP	SHORT KTRX2	; (Jump shortened)
KTRX1:	PUSH	SI
	PUSH	CX
	EVEN
	CALL	PRTSN
	MOV	CX,CH_AM
	EVEN
	CALL	PRTCH
	EVEN
	CALL	PRTNM
	MOV	DI,OFFSET MINDATA:TMBEB
	EVEN
	CALL	PRTST
	CALL	KWNAM
	MOV	DNAMP,DI
	EVEN
	CALL	ACESS
	DW	ERR_-299
	EVEN
	CALL	PRTVL
	EVEN
	CALL	PRTNL
KTRX2:	POP	DI
KTRX3:	RET
KWNAM:
	PUBLIC	KWNAM
	POP	PRC_+20
	POP	AX
	POP	DI
	CMP	DI,STATE
	JAE	SHORT KWNM1	; (Jump shortened)
	CMP	WORD PTR [2*VRLEN+DI],0
	JNZ	SHORT KWNM1	; (Jump shortened)
	MOV	DI,WORD PTR [2*VRSVP+DI]
	MOV	CX,WORD PTR [2*SVBIT+DI]
	AND	CX,BTKNM
;	OR	CX,CX	(Optimized)
	JZ	SHORT KWNM1	; (Jump shortened)
	MOV	CX,WORD PTR [2*SVLEN+DI]
	ADD	CX,1+2*SVCHS
	AND	CX,-2
	ADD	DI,CX
	MOV	BX,WORD PTR [DI]
	MOV	CX,2*KVSI_
	EVEN
	CALL	ALLOC
	MOV	WORD PTR [DI],OFFSET MINCODE:B_KVT
	MOV	WORD PTR [2*KVNUM+DI],BX
	MOV	WORD PTR [2*KVVAR+DI],OFFSET MINDATA:TRBKV
	MOV	SI,DI
	MOV	CX,2*KVVAR
	MOV	AX,PRC_+20
	JMP	AX
KWNM1:	CALL	ERR_0
	DB	251
LCOMP:
	PUBLIC	LCOMP
	POP	PRC_+22
	CALL	GTSTG
	DW	LCMP6
	MOV	SI,DI
	MOV	DX,CX
	CALL	GTSTG
	DW	LCMP5
	MOV	BX,CX
	ADD	DI,CFP_F
	ADD	SI,CFP_F
	CMP	CX,DX
	JB	SHORT LCMP1	; (Jump shortened)
	MOV	CX,DX
LCMP1:	OR	CX,CX
	JZ	SHORT LCMP7	; (Jump shortened)
	REPE	CMPSB
	MOV	SI,0
	MOV	DI,SI
	JA	SHORT LCMP3	; (Jump shortened)
	JB	SHORT LCMP4	; (Jump shortened)
LCMP7:	CMP	BX,DX
	JNE	SHORT LCMP2	; (Jump shortened)
	MOV	BP,PRC_+22
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+6]
LCMP2:	CMP	BX,DX
	JA	SHORT LCMP4	; (Jump shortened)
LCMP3:	MOV	BP,PRC_+22
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+4]
LCMP4:	MOV	BP,PRC_+22
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+8]
LCMP5:	MOV	BP,PRC_+22
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
LCMP6:	MOV	BP,PRC_+22
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+2]
LISTR:
	PUBLIC	LISTR
	CMP	CNTTL,0
	JNZ	LIST5
	CMP	LSTPF,0
	JNZ	LIST4
	MOV	AX,LSTLC
	CMP	AX,LSTNP
	JAE	LIST6
LIST0:	MOV	DI,R_CIM
	OR	DI,DI
	JZ	SHORT LIST4	; (Jump shortened)
	ADD	DI,CFP_F
	MOV	CL,[DI]
	XOR	CH,CH
	MOV	DI,LSTSN
	OR	DI,DI
	JZ	SHORT LIST2	; (Jump shortened)
	MOV	WORD PTR REG_IA,DI
	XOR	DX,DX
	CMP	STAGE,STGIC
	JNE	SHORT LIST1	; (Jump shortened)
	CMP	CX,CH_AS
	JE	SHORT LIST2	; (Jump shortened)
	CMP	CX,CH_MN
	JE	SHORT LIST2	; (Jump shortened)
LIST1:
	EVEN
	CALL	PRTIN
	XOR	AX,AX
	MOV	LSTSN,AX
LIST2:	MOV	DI,LSTID
	OR	DI,DI
	JZ	SHORT LIST8	; (Jump shortened)
	MOV	CX,STNPD
	SUB	CX,NUM03
	MOV	PROFS,CX
	MOV	WORD PTR REG_IA,DI
	XOR	DX,DX
	EVEN
	CALL	PRTIN
LIST8:	MOV	PROFS,STNPD
	MOV	DI,R_CIM
	EVEN
	CALL	PRTST
	INC	LSTLC
	CMP	ERLST,0
	JNZ	SHORT LIST3	; (Jump shortened)
	EVEN
	CALL	PRTNL
	CMP	CSWDB,0
	JZ	SHORT LIST3	; (Jump shortened)
	EVEN
	CALL	PRTNL
	INC	LSTLC
LIST3:	MOV	LSTPF,SP
LIST4:	RET
LIST5:	XOR	AX,AX
	MOV	CNTTL,AX
LIST6:
	EVEN
	CALL	PRTPS
	CMP	PRICH,0
	JZ	SHORT LIST7	; (Jump shortened)
	CMP	R_TTL,OFFSET MINDATA:NULLS
	JE	LIST0
LIST7:
	EVEN
	CALL	LISTT
	JMP	LIST0
LISTT:
	PUBLIC	LISTT
	MOV	DI,R_TTL
	EVEN
	CALL	PRTST
	MOV	AX,LSTPO
	MOV	PROFS,AX
	MOV	DI,OFFSET MINDATA:LSTMS
	EVEN
	CALL	PRTST
	INC	LSTPG
	MOV	AX,LSTPG
	MOV	WORD PTR REG_IA,AX
	XOR	DX,DX
	EVEN
	CALL	PRTIN
	EVEN
	CALL	PRTNL
	ADD	LSTLC,NUM02
	MOV	DI,R_STL
	OR	DI,DI
	JZ	SHORT LSTT1	; (Jump shortened)
	EVEN
	CALL	PRTST
	EVEN
	CALL	PRTNL
	INC	LSTLC
LSTT1:
	EVEN
	CALL	PRTNL
	RET
NEWFN:
	PUBLIC	NEWFN
	PUSH	DI
	MOV	SI,R_SFC
	EVEN
	CALL	IDENT
	DW	NWFN1
	POP	DI
	MOV	R_SFC,DI
	MOV	BX,CMPSN
	MOV	WORD PTR REG_IA,BX
	XOR	DX,DX
	EVEN
	CALL	ICBLD
	MOV	SI,R_SFN
	MOV	BX,SP
	EVEN
	CALL	TFIND
	DW	ERR_-299
	MOV	AX,R_SFC
	MOV	WORD PTR [2*TEVAL+SI],AX
	RET
NWFN1:	POP	AX
	RET
NEXTS:
	PUBLIC	NEXTS
	CMP	CSWLS,0
	JZ	SHORT NXTS2	; (Jump shortened)
	MOV	DI,R_CIM
	OR	DI,DI
	JZ	SHORT NXTS2	; (Jump shortened)
	ADD	DI,CFP_F
	MOV	CL,[DI]
	XOR	CH,CH
	CMP	CX,CH_MN
	JNE	SHORT NXTS1	; (Jump shortened)
	CMP	CSWPR,0
	JZ	SHORT NXTS2	; (Jump shortened)
NXTS1:
	EVEN
	CALL	LISTR
NXTS2:	MOV	DI,R_CNI
	MOV	R_CIM,DI
	MOV	AX,RDNLN
	MOV	RDCLN,AX
	MOV	AX,CNIND
	MOV	LSTID,AX
	XOR	AX,AX
	MOV	R_CNI,AX
	MOV	CX,WORD PTR [2*SCLEN+DI]
	MOV	BX,CSWIN
	CMP	CX,BX
	JB	SHORT NXTS3	; (Jump shortened)
	MOV	CX,BX
NXTS3:	MOV	SCNIL,CX
	XOR	AX,AX
	MOV	SCNSE,AX
	XOR	AX,AX
	MOV	LSTPF,AX
	RET
PATIN:
	PUBLIC	PATIN
	POP	PRC_+24
	MOV	SI,CX
	CALL	GTSMI
	DW	PTIN2
	DW	PTIN3
PTIN1:
	EVEN
	CALL	PBILD
	MOV	AX,PRC_+24
	ADD	AX,4
	JMP	AX
PTIN2:	MOV	BX,SI
	CMP	WORD PTR [DI],OFFSET MINCODE:B_E__
	JB	PTIN1
	MOV	BP,PRC_+24
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
PTIN3:	MOV	BP,PRC_+24
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+2]
PATST:
	PUBLIC	PATST
	POP	PRC_+26
	CALL	GTSTG
	DW	PATS7
	OR	CX,CX
	JZ	PATS7
	CMP	CX,NUM01
	JNE	SHORT PATS2	; (Jump shortened)
	OR	BX,BX
	JZ	SHORT PATS2	; (Jump shortened)
	ADD	DI,CFP_F
	MOV	AL,[DI]
	XOR	AH,AH
	XCHG	AX,DI
PATS1:
	EVEN
	CALL	PBILD
	MOV	AX,PRC_+26
	INC	AX
	INC	AX
	JMP	AX
PATS2:	PUSH	SI
	MOV	DX,CTMSK
	CMP	DI,R_CTS
	JE	SHORT PATS6	; (Jump shortened)
	PUSH	DI
	SHL	DX,1
;	OR	DX,DX	(Optimized)
	JNZ	SHORT PATS4	; (Jump shortened)
	MOV	CX,2*CTSI_
	EVEN
	CALL	ALLOC
	MOV	R_CTP,DI
	MOV	AX,OFFSET MINCODE:B_CTT
	STOSW
	MOV	BX,CFP_A
	MOV	DX,BITS0
PATS3:	MOV	AX,DX
	STOSW
	DEC	BX
	JNZ	PATS3
	MOV	DX,BITS1
PATS4:	MOV	CTMSK,DX
	POP	SI
	MOV	R_CTS,SI
	MOV	BX,WORD PTR [2*SCLEN+SI]
	OR	BX,BX
	JZ	SHORT PATS6	; (Jump shortened)
	ADD	SI,CFP_F
PATS5:	LODSB
	XOR	AH,AH
	XCHG	AX,CX
	SAL	CX,1
	MOV	DI,R_CTP
	ADD	DI,CX
	MOV	CX,DX
	OR	CX,WORD PTR [2*CTCHS+DI]
	MOV	WORD PTR [2*CTCHS+DI],CX
	DEC	BX
	JNZ	PATS5
PATS6:	MOV	DI,R_CTP
	XOR	SI,SI
	POP	BX
	JMP	PATS1
PATS7:	MOV	BX,DX
	CMP	WORD PTR [DI],OFFSET MINCODE:B_E__
	JB	PATS1
	MOV	BP,PRC_+26
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
PBILD:
	PUBLIC	PBILD
	PUSH	DI
	MOV	DI,BX
	MOV	DI,CS:[DI-2]
	CMP	DI,BL_P1
	JE	SHORT PBLD1	; (Jump shortened)
	CMP	DI,BL_P0
	JE	SHORT PBLD3	; (Jump shortened)
	MOV	CX,2*PCSI_
	EVEN
	CALL	ALLOC
	MOV	WORD PTR [2*PARM2+DI],DX
	JMP	SHORT PBLD2	; (Jump shortened)
PBLD1:	MOV	CX,2*PBSI_
	EVEN
	CALL	ALLOC
PBLD2:	MOV	BP,SP
	MOV	AX,WORD PTR [BP]
	MOV	WORD PTR [2*PARM1+DI],AX
	JMP	SHORT PBLD4	; (Jump shortened)
PBLD3:	MOV	CX,2*PASI_
	EVEN
	CALL	ALLOC
PBLD4:	MOV	WORD PTR [DI],BX
	POP	AX
	MOV	WORD PTR [2*PTHEN+DI],OFFSET MINDATA:NDNTH
	RET
PCONC:
	PUBLIC	PCONC
	XOR	AX,AX
	PUSH	AX
	MOV	DX,SP
	MOV	AX,OFFSET MINDATA:NDNTH
	PUSH	AX
	PUSH	SI
	MOV	SI,SP
	CALL	PCOPY
	MOV	WORD PTR [2*2+SI],CX
PCNC1:	CMP	SI,SP
	JE	SHORT PCNC2	; (Jump shortened)
	DEC	SI
	DEC	SI
	MOV	DI,WORD PTR [SI]
	MOV	DI,WORD PTR [2*PTHEN+DI]
	CALL	PCOPY
	DEC	SI
	DEC	SI
	MOV	DI,WORD PTR [SI]
	MOV	WORD PTR [2*PTHEN+DI],CX
	CMP	WORD PTR [DI],OFFSET MINCODE:P_ALT
	JNE	PCNC1
	MOV	DI,WORD PTR [2*PARM1+DI]
	CALL	PCOPY
	MOV	DI,WORD PTR [SI]
	MOV	WORD PTR [2*PARM1+DI],CX
	JMP	PCNC1
PCNC2:	MOV	SP,DX
	POP	DI
	RET
PCOPY:
	PUBLIC	PCOPY
	POP	PRC_+28
	MOV	BX,SI
	MOV	SI,DX
PCOP1:	DEC	SI
	DEC	SI
	CMP	DI,WORD PTR [SI]
	JE	SHORT PCOP2	; (Jump shortened)
	DEC	SI
	DEC	SI
	CMP	SI,SP
	JNE	PCOP1
	MOV	CX,WORD PTR [DI]
	EVEN
	CALL	BLKLN
	MOV	SI,DI
	EVEN
	CALL	ALLOC
	PUSH	SI
	PUSH	DI
	CMP	SP,LOWSPMIN
	JB	SEC06
	SHR	CX,1
	REP	MOVSW
	MOV	BP,SP
	MOV	CX,WORD PTR [BP]
	JMP	SHORT PCOP3	; (Jump shortened)
PCOP2:	DEC	SI
	DEC	SI
	MOV	CX,WORD PTR [SI]
PCOP3:	MOV	SI,BX
	MOV	AX,PRC_+28
	JMP	AX
PRFLR:
	PUBLIC	PRFLR
	CMP	PFDMP,0
	JZ	PRFL4
	PUSH	DI
	MOV	PFSVW,BX
	EVEN
	CALL	PRTPG
	MOV	DI,OFFSET MINDATA:PFMS1
	EVEN
	CALL	PRTST
	EVEN
	CALL	PRTNL
	EVEN
	CALL	PRTNL
	MOV	DI,OFFSET MINDATA:PFMS2
	EVEN
	CALL	PRTST
	EVEN
	CALL	PRTNL
	MOV	DI,OFFSET MINDATA:PFMS3
	EVEN
	CALL	PRTST
	EVEN
	CALL	PRTNL
	EVEN
	CALL	PRTNL
	XOR	BX,BX
	MOV	DI,PFTBL
	ADD	DI,2*XNDTA
PRFL1:	INC	BX
	MOV	DX,WORD PTR WORD PTR [DI]+2
	MOV	AX,WORD PTR WORD PTR [DI]
	MOV	WORD PTR REG_IA,AX
	MOV	AX,WORD PTR REG_IA
	OR	AX,DX
	JE	SHORT PRFL3	; (Jump shortened)
	MOV	PROFS,PFPD1
	EVEN
	CALL	PRTIN
	XOR	AX,AX
	MOV	PROFS,AX
	MOV	WORD PTR REG_IA,BX
	XOR	DX,DX
	EVEN
	CALL	PRTIN
	MOV	PROFS,PFPD2
	MOV	DX,WORD PTR WORD PTR [2*CFP_I+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*CFP_I+DI]
	MOV	WORD PTR REG_IA,AX
	EVEN
	CALL	PRTIN
	MOV	DX,WORD PTR WORD PTR [2*CFP_I+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*CFP_I+DI]
	MOV	WORD PTR REG_IA,AX
	MOV	BP,OFFSET MINDATA:INTTH
	CALL	MLI_
	JO	SHORT PRFL2	; (Jump shortened)
	LEA	BP,WORD PTR [DI]
	CALL	DVI_
	MOV	PROFS,PFPD3
	EVEN
	CALL	PRTIN
PRFL2:
	EVEN
	CALL	PRTNL
PRFL3:	ADD	DI,2*PF_I2
	CMP	BX,PFNTE
	JB	PRFL1
	POP	DI
	MOV	BX,PFSVW
PRFL4:	RET
PRFLU:
	PUBLIC	PRFLU
	CMP	PFFNC,0
	JNZ	PFLU4
	PUSH	DI
	MOV	PFSVW,CX
	CMP	PFTBL,0
	JNZ	SHORT PFLU2	; (Jump shortened)
	SUB	PFNTE,NUM01
	MOV	AX,PFI2A
	MOV	WORD PTR REG_IA,AX
	XOR	DX,DX
	MOV	WORD PTR PFSTE+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR PFSTE,AX
	MOV	AX,PFNTE
	MOV	WORD PTR REG_IA,AX
	XOR	DX,DX
	MOV	BP,OFFSET MINDATA:PFSTE
	CALL	MLI_
	MOV	CX,WORD PTR REG_IA
	ADD	CX,NUM02
	SAL	CX,1
	EVEN
	CALL	ALOST
	MOV	PFTBL,DI
	MOV	AX,OFFSET MINCODE:B_XNT
	STOSW
	MOV	AX,CX
	STOSW
	MOV	CX,WORD PTR REG_IA
PFLU1:	XOR	AX,AX
	STOSW
	LOOP	PFLU1
PFLU2:	MOV	AX,KVSTN
	MOV	WORD PTR REG_IA,AX
	XOR	DX,DX
	MOV	AX,WORD PTR INTV1
	SUB	WORD PTR REG_IA,AX
	SBB	DX,WORD PTR INTV1+2
	MOV	BP,OFFSET MINDATA:PFSTE
	CALL	MLI_
	MOV	CX,WORD PTR REG_IA
	SAL	CX,1
	ADD	CX,2*NUM02
	MOV	DI,PFTBL
	CMP	CX,WORD PTR [2*NUM01+DI]
	JAE	SHORT PFLU3	; (Jump shortened)
	ADD	DI,CX
	MOV	DX,WORD PTR WORD PTR [DI]+2
	MOV	AX,WORD PTR WORD PTR [DI]
	MOV	WORD PTR REG_IA,AX
	MOV	AX,WORD PTR INTV1
	ADD	WORD PTR REG_IA,AX
	ADC	DX,WORD PTR INTV1+2
	MOV	WORD PTR WORD PTR [DI]+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR WORD PTR [DI],AX
	EVEN
	CALL	SYSTM
	MOV	WORD PTR PFETM+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR PFETM,AX
	MOV	AX,WORD PTR PFSTM
	SUB	WORD PTR REG_IA,AX
	SBB	DX,WORD PTR PFSTM+2
	MOV	AX,WORD PTR WORD PTR [2*CFP_I+DI]
	ADD	WORD PTR REG_IA,AX
	ADC	DX,WORD PTR WORD PTR [2*CFP_I+DI]+2
	MOV	WORD PTR WORD PTR [2*CFP_I+DI]+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR WORD PTR [2*CFP_I+DI],AX
	MOV	DX,WORD PTR PFETM+2
	MOV	AX,WORD PTR PFETM
	MOV	WORD PTR REG_IA,AX
	MOV	WORD PTR PFSTM+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR PFSTM,AX
PFLU3:	POP	DI
	MOV	CX,PFSVW
	RET
PFLU4:	XOR	AX,AX
	MOV	PFFNC,AX
	RET
PRPAR:
	PUBLIC	PRPAR
	OR	DX,DX
	JNZ	PRPA8
	EVEN
	CALL	SYSPP
	OR	BX,BX
	JNZ	SHORT PRPA1	; (Jump shortened)
	MOV	BX,CFP_M
	SHR	BX,1
PRPA1:	MOV	LSTNP,BX
	MOV	LSTLC,BX
	XOR	AX,AX
	MOV	LSTPG,AX
	MOV	BX,PRLEN
	OR	BX,BX
	JZ	SHORT PRPA2	; (Jump shortened)
	CMP	CX,BX
	JA	SHORT PRPA3	; (Jump shortened)
PRPA2:	MOV	PRLEN,CX
PRPA3:	MOV	BX,BITS3
	AND	BX,DX
;	OR	BX,BX	(Optimized)
	JZ	SHORT PRPA4	; (Jump shortened)
	XOR	AX,AX
	MOV	CSWLS,AX
PRPA4:	MOV	BX,BITS1
	AND	BX,DX
	MOV	ERICH,BX
	MOV	BX,BITS2
	AND	BX,DX
	MOV	PRICH,BX
	MOV	BX,BITS4
	AND	BX,DX
	MOV	CPSTS,BX
	MOV	BX,BITS5
	AND	BX,DX
	MOV	EXSTS,BX
	MOV	BX,BITS6
	AND	BX,DX
	MOV	PRECL,BX
	SUB	CX,NUM08
	OR	BX,BX
	JZ	SHORT PRPA5	; (Jump shortened)
	MOV	LSTPO,CX
PRPA5:	MOV	BX,BITS7
	AND	BX,DX
	MOV	CSWEX,BX
	MOV	BX,BIT10
	AND	BX,DX
	MOV	HEADP,BX
	MOV	BX,BITS9
	AND	BX,DX
	MOV	PRSTO,BX
	MOV	BX,DX
	XCHG	AX,CX
	MOV	CL,12
	SHR	BX,CL
	XCHG	AX,CX
	AND	BX,BITS1
	MOV	KVCAS,BX
	MOV	BX,BIT12
	AND	BX,DX
	MOV	CSWER,BX
	OR	BX,BX
	JZ	SHORT PRPA6	; (Jump shortened)
	MOV	CX,PRLEN
	SUB	CX,NUM08
	MOV	LSTPO,CX
PRPA6:	MOV	BX,BIT11
	AND	BX,DX
	MOV	CSWPR,BX
	AND	DX,BITS8
;	OR	DX,DX	(Optimized)
	JNZ	SHORT PRPA8	; (Jump shortened)
	CMP	INITR,0
	JZ	SHORT PRPA9	; (Jump shortened)
	MOV	SI,OFFSET MINDATA:V_TER
	EVEN
	CALL	GTNVR
	DW	ERR_-299
	MOV	WORD PTR [2*VRVAL+DI],OFFSET MINDATA:NULLS
	EVEN
	CALL	SETVR
	JMP	SHORT PRPA9	; (Jump shortened)
PRPA8:	MOV	INITR,SP
	CMP	DNAMB,0
	JZ	SHORT PRPA9	; (Jump shortened)
	MOV	SI,OFFSET MINDATA:V_TER
	MOV	BX,TRTOU
	EVEN
	CALL	INOUT
	PUSH	DI
	MOV	SI,OFFSET MINDATA:V_TER
	MOV	BX,TRTIN
	EVEN
	CALL	INOUT
	POP	WORD PTR [2*VRVAL+DI]
PRPA9:	RET
PRTCH:
	PUBLIC	PRTCH
	PUSH	DI
	MOV	AX,PROFS
	CMP	AX,PRLEN
	JNE	SHORT PRCH1	; (Jump shortened)
	EVEN
	CALL	PRTNL
PRCH1:	MOV	DI,PRBUF
	ADD	DI,CFP_F
	ADD	DI,PROFS
	MOV	[DI],CL
	INC	PROFS
	POP	DI
	RET
PRTIC:
	PUBLIC	PRTIC
	PUSH	DI
	MOV	DI,PRBUF
	MOV	CX,PROFS
	EVEN
	CALL	SYSPI
	DW	PRTC2
PRTC1:	POP	DI
	RET
PRTC2:	XOR	AX,AX
	MOV	ERICH,AX
	CALL	ERR_0
	DB	252
	JMP	PRTC1
PRTIS:
	PUBLIC	PRTIS
	CMP	PRICH,0
	JNZ	SHORT PRTS1	; (Jump shortened)
	CMP	ERICH,0
	JZ	SHORT PRTS1	; (Jump shortened)
	EVEN
	CALL	PRTIC
PRTS1:
	EVEN
	CALL	PRTNL
	RET
PRTIN:
	PUBLIC	PRTIN
	PUSH	DI
	EVEN
	CALL	ICBLD
	CMP	DI,DNAMB
	JB	SHORT PRTI1	; (Jump shortened)
	CMP	DI,DNAMP
	JA	SHORT PRTI1	; (Jump shortened)
	MOV	DNAMP,DI
PRTI1:	PUSH	DI
	CALL	GTSTG
	DW	ERR_-299
	MOV	DNAMP,DI
	EVEN
	CALL	PRTST
	POP	DI
	RET
PRTMI:
	PUBLIC	PRTMI
	EVEN
	CALL	PRTST
	MOV	PROFS,PRTMF
	EVEN
	CALL	PRTIN
	EVEN
	CALL	PRTNL
	RET
PRTMM:
	PUBLIC	PRTMM
	MOV	CX,DNAMP
	SUB	CX,STATB
	SHR	CX,1
	MOV	WORD PTR REG_IA,CX
	XOR	DX,DX
	MOV	DI,OFFSET MINDATA:ENCM1
	EVEN
	CALL	PRTMI
	MOV	CX,DNAME
	SUB	CX,DNAMP
	SHR	CX,1
	MOV	WORD PTR REG_IA,CX
	XOR	DX,DX
	MOV	DI,OFFSET MINDATA:ENCM2
	EVEN
	CALL	PRTMI
	RET
PRTMX:
	PUBLIC	PRTMX
	EVEN
	CALL	PRTST
	MOV	PROFS,PRTMF
	EVEN
	CALL	PRTIN
	EVEN
	CALL	PRTIS
	RET
PRTNL:
	PUBLIC	PRTNL
	CMP	HEADP,0
	JNZ	SHORT PRNL0	; (Jump shortened)
	EVEN
	CALL	PRTPS
PRNL0:	PUSH	DI
	MOV	PRTSA,CX
	MOV	PRTSB,BX
	MOV	DI,PRBUF
	MOV	CX,PROFS
	EVEN
	CALL	SYSPR
	DW	PRNL2
	MOV	CX,PRLNW
	ADD	DI,2*SCHAR
	MOV	BX,NULLW
PRNL1:	MOV	AX,BX
	STOSW
	LOOP	PRNL1
	MOV	BX,PRTSB
	MOV	CX,PRTSA
	POP	DI
	XOR	AX,AX
	MOV	PROFS,AX
	RET
PRNL2:	CMP	PRTEF,0
	JNZ	SHORT PRNL3	; (Jump shortened)
	MOV	PRTEF,SP
	CALL	ERR_0
	DB	253
PRNL3:	MOV	BX,NINI8
	MOV	CX,KVSTN
	MOV	SI,R_FCB
	EVEN
	CALL	SYSEJ
PRTNM:
	PUBLIC	PRTNM
	PUSH	CX
	PUSH	DI
	PUSH	SI
	CMP	SI,STATE
	JA	SHORT PRN02	; (Jump shortened)
	MOV	DI,SI
	EVEN
	CALL	PRTVN
PRN01:	POP	SI
	POP	DI
	POP	CX
	RET
PRN02:	MOV	BX,CX
	CMP	WORD PTR [SI],OFFSET MINCODE:B_PDT
	JNE	SHORT PRN03	; (Jump shortened)
	MOV	DI,WORD PTR [2*PDDFP+SI]
	ADD	DI,CX
	MOV	DI,WORD PTR [2*PDFOF+DI]
	EVEN
	CALL	PRTVN
	MOV	CX,CH_PP
	EVEN
	CALL	PRTCH
PRN03:	CMP	WORD PTR [SI],OFFSET MINCODE:B_TET
	JNE	SHORT PRN04	; (Jump shortened)
	MOV	SI,WORD PTR [2*TENXT+SI]
	JMP	PRN03
PRN04:	MOV	DI,PRNMV
	MOV	CX,HSHTB
	JMP	SHORT PRN07	; (Jump shortened)
PRN05:	MOV	DI,CX
	INC	CX
	INC	CX
	SUB	DI,2*VRNXT
PRN06:	MOV	DI,WORD PTR [2*VRNXT+DI]
PRN07:	MOV	DX,DI
	OR	DX,DX
	JZ	SHORT PRN09	; (Jump shortened)
PRN08:	MOV	DI,WORD PTR [2*VRVAL+DI]
	CMP	WORD PTR [DI],OFFSET MINCODE:B_TRT
	JE	PRN08
	CMP	DI,SI
	JE	SHORT PRN10	; (Jump shortened)
	MOV	DI,DX
	JMP	PRN06
PRN09:	CMP	CX,HSHTE
	JB	PRN05
	MOV	DI,SI
	EVEN
	CALL	PRTVL
	JMP	SHORT PRN11	; (Jump shortened)
PRN10:	MOV	DI,DX
	MOV	PRNMV,DI
	EVEN
	CALL	PRTVN
PRN11:	MOV	DX,WORD PTR [SI]
	CMP	DX,OFFSET MINCODE:B_PDT
	JNE	SHORT PRN13	; (Jump shortened)
	MOV	CX,CH_RP
PRN12:
	EVEN
	CALL	PRTCH
	MOV	CX,BX
	JMP	PRN01
PRN13:	MOV	CX,CH_BB
	EVEN
	CALL	PRTCH
	MOV	BP,SP
	MOV	SI,WORD PTR [BP]
	MOV	DX,WORD PTR [SI]
	CMP	DX,OFFSET MINCODE:B_TET
	JNE	SHORT PRN15	; (Jump shortened)
	MOV	DI,WORD PTR [2*TESUB+SI]
	MOV	SI,BX
	EVEN
	CALL	PRTVL
	MOV	BX,SI
PRN14:	MOV	CX,CH_RB
	JMP	PRN12
PRN15:	MOV	CX,BX
	SHR	CX,1
	CMP	DX,OFFSET MINCODE:B_ART
	JE	SHORT PRN16	; (Jump shortened)
	SUB	CX,VCVLB
	MOV	WORD PTR REG_IA,CX
	XOR	DX,DX
	EVEN
	CALL	PRTIN
	JMP	PRN14
PRN16:	MOV	DX,WORD PTR [2*AROFS+SI]
	INC	DX
	INC	DX
	SHR	DX,1
	SUB	CX,DX
	MOV	WORD PTR REG_IA,CX
	XOR	DX,DX
	MOV	CX,WORD PTR [2*ARNDM+SI]
	ADD	SI,WORD PTR [2*AROFS+SI]
	SUB	SI,2*ARLBD
PRN17:	SUB	SI,2*ARDMS
	MOV	WORD PTR PRNSI+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR PRNSI,AX
	LEA	BP,WORD PTR [2*ARDIM+SI]
	CALL	RMI_
	MOV	AX,WORD PTR REG_IA
	PUSH	AX
	MOV	DX,WORD PTR PRNSI+2
	MOV	AX,WORD PTR PRNSI
	MOV	WORD PTR REG_IA,AX
	LEA	BP,WORD PTR [2*ARDIM+SI]
	CALL	DVI_
	LOOP	PRN17
	XOR	DI,DI
	MOV	BX,WORD PTR [2*ARNDM+SI]
	JMP	SHORT PRN19	; (Jump shortened)
PRN18:	MOV	CX,CH_CM
	EVEN
	CALL	PRTCH
PRN19:	POP	WORD PTR REG_IA
	XOR	DX,DX
	ADD	SI,DI
	MOV	AX,WORD PTR WORD PTR [2*ARLBD+SI]
	ADD	WORD PTR REG_IA,AX
	ADC	DX,WORD PTR WORD PTR [2*ARLBD+SI]+2
	SUB	SI,DI
	EVEN
	CALL	PRTIN
	ADD	DI,2*ARDMS
	DEC	BX
	JNZ	PRN18
	JMP	PRN14
PRTNV:
	PUBLIC	PRTNV
	EVEN
	CALL	PRTNM
	PUSH	DI
	PUSH	CX
	MOV	DI,OFFSET MINDATA:TMBEB
	EVEN
	CALL	PRTST
	MOV	DI,SI
	ADD	DI,CX
	MOV	DI,WORD PTR [DI]
	EVEN
	CALL	PRTVL
	EVEN
	CALL	PRTNL
	POP	CX
	POP	DI
	RET
PRTPG:
	PUBLIC	PRTPG
	CMP	STAGE,STGXT
	JE	SHORT PRP01	; (Jump shortened)
	CMP	LSTLC,0
	JZ	SHORT PRP06	; (Jump shortened)
	XOR	AX,AX
	MOV	LSTLC,AX
PRP01:	PUSH	DI
	CMP	PRSTD,0
	JNZ	SHORT PRP02	; (Jump shortened)
	CMP	PRICH,0
	JNZ	SHORT PRP03	; (Jump shortened)
	CMP	PRECL,0
	JZ	SHORT PRP03	; (Jump shortened)
PRP02:
	EVEN
	CALL	SYSEP
	JMP	SHORT PRP04	; (Jump shortened)
PRP03:	MOV	DI,HEADP
	MOV	HEADP,SP
	EVEN
	CALL	PRTNL
	EVEN
	CALL	PRTNL
	EVEN
	CALL	PRTNL
	MOV	LSTLC,NUM03
	MOV	HEADP,DI
PRP04:	CMP	HEADP,0
	JNZ	SHORT PRP05	; (Jump shortened)
	MOV	HEADP,SP
	PUSH	SI
	MOV	DI,OFFSET MINDATA:HEADR
	EVEN
	CALL	PRTST
	EVEN
	CALL	SYSID
	EVEN
	CALL	PRTST
	EVEN
	CALL	PRTNL
	MOV	DI,SI
	EVEN
	CALL	PRTST
	EVEN
	CALL	PRTNL
	EVEN
	CALL	PRTNL
	EVEN
	CALL	PRTNL
	ADD	LSTLC,NUM04
	POP	SI
PRP05:	POP	DI
PRP06:	RET
PRTPS:
	PUBLIC	PRTPS
	MOV	AX,PRSTO
	MOV	PRSTD,AX
	EVEN
	CALL	PRTPG
	XOR	AX,AX
	MOV	PRSTD,AX
	RET
PRTSN:
	PUBLIC	PRTSN
	PUSH	DI
	MOV	PRSNA,CX
	MOV	DI,OFFSET MINDATA:TMASB
	EVEN
	CALL	PRTST
	MOV	PROFS,NUM04
	MOV	AX,KVSTN
	MOV	WORD PTR REG_IA,AX
	XOR	DX,DX
	EVEN
	CALL	PRTIN
	MOV	PROFS,PRSNF
	MOV	DI,KVFNC
	MOV	CX,CH_LI
PRSN1:	OR	DI,DI
	JZ	SHORT PRSN2	; (Jump shortened)
	EVEN
	CALL	PRTCH
	DEC	DI
	JMP	PRSN1
PRSN2:	MOV	CX,CH_BL
	EVEN
	CALL	PRTCH
	MOV	CX,PRSNA
	POP	DI
	RET
PRTST:
	PUBLIC	PRTST
	CMP	HEADP,0
	JNZ	SHORT PRST0	; (Jump shortened)
	EVEN
	CALL	PRTPS
PRST0:	MOV	PRSVA,CX
	MOV	PRSVB,BX
	XOR	BX,BX
PRST1:	MOV	CX,WORD PTR [2*SCLEN+DI]
	SUB	CX,BX
;	OR	CX,CX	(Optimized)
	JZ	SHORT PRST4	; (Jump shortened)
	PUSH	SI
	PUSH	DI
	MOV	SI,DI
	MOV	DI,PRLEN
	SUB	DI,PROFS
;	OR	DI,DI	(Optimized)
	JNZ	SHORT PRST2	; (Jump shortened)
	EVEN
	CALL	PRTNL
	MOV	DI,PRLEN
PRST2:	CMP	CX,DI
	JB	SHORT PRST3	; (Jump shortened)
	MOV	CX,DI
PRST3:	MOV	DI,PRBUF
	LEA	SI,[CFP_F+SI+BX]
	ADD	DI,CFP_F
	ADD	DI,PROFS
	ADD	BX,CX
	ADD	PROFS,CX
	MOV	PRSVC,BX
	SHR	CX,1
	REP	MOVSW
	ADC	CX,CX
	REP	MOVSB
	MOV	BX,PRSVC
	POP	DI
	POP	SI
	JMP	PRST1
PRST4:	MOV	BX,PRSVB
	MOV	CX,PRSVA
	RET
PRTTR:
	PUBLIC	PRTTR
	PUSH	DI
	EVEN
	CALL	PRTIC
	MOV	DI,PRBUF
	MOV	CX,PRLNW
	ADD	DI,2*SCHAR
	MOV	BX,NULLW
PRTT1:	MOV	AX,BX
	STOSW
	LOOP	PRTT1
	XOR	AX,AX
	MOV	PROFS,AX
	POP	DI
	RET
PRTVL:
	PUBLIC	PRTVL
	PUSH	SI
	PUSH	DI
	CMP	SP,LOWSPMIN
	JB	SEC06
PRV01:	MOV	AX,WORD PTR [2*IDVAL+DI]
	MOV	PRVSI,AX
	MOV	SI,WORD PTR [DI]
	MOV	SI,CS:[SI-2]
	INC	SI
	CMP	SI,BL__T+1
	SBB	AX,AX
	AND	SI,AX
	SHL	SI,1
	JMP	CS:WORD PTR L0021[SI]
L0021	DW	OFFSET MINCODE:PRV02
	DW	OFFSET MINCODE:PRV05
	DW	OFFSET MINCODE:PRV02
	DW	OFFSET MINCODE:PRV02
	DW	OFFSET MINCODE:PRV08
	DW	OFFSET MINCODE:PRV09
	DW	OFFSET MINCODE:PRV02
	DW	OFFSET MINCODE:PRV02
	DW	OFFSET MINCODE:PRV02
	DW	OFFSET MINCODE:PRV08
	DW	OFFSET MINCODE:PRV11
	DW	OFFSET MINCODE:PRV12
	DW	OFFSET MINCODE:PRV13
	DW	OFFSET MINCODE:PRV13
	DW	OFFSET MINCODE:PRV02
	DW	OFFSET MINCODE:PRV02
	DW	OFFSET MINCODE:PRV02
	DW	OFFSET MINCODE:PRV10
	DW	OFFSET MINCODE:PRV04
PRV02:
	EVEN
	CALL	DTYPE
	EVEN
	CALL	PRTST
PRV03:	POP	DI
	POP	SI
	RET
PRV04:	MOV	DI,WORD PTR [2*TRVAL+DI]
	JMP	PRV01
PRV05:	MOV	SI,DI
	MOV	DI,OFFSET MINDATA:SCARR
	EVEN
	CALL	PRTST
	MOV	CX,CH_PP
	EVEN
	CALL	PRTCH
	ADD	SI,WORD PTR [2*AROFS+SI]
	MOV	DI,WORD PTR [SI]
	EVEN
	CALL	PRTST
PRV06:	MOV	CX,CH_RP
	EVEN
	CALL	PRTCH
PRV07:	MOV	CX,CH_BL
	EVEN
	CALL	PRTCH
	MOV	CX,CH_NM
	EVEN
	CALL	PRTCH
	MOV	AX,PRVSI
	MOV	WORD PTR REG_IA,AX
	XOR	DX,DX
	EVEN
	CALL	PRTIN
	JMP	PRV03
PRV08:	PUSH	DI
	CALL	GTSTG
	DW	ERR_-299
	EVEN
	CALL	PRTST
	MOV	DNAMP,DI
	JMP	PRV03
PRV09:	MOV	SI,WORD PTR [2*NMBAS+DI]
	MOV	CX,WORD PTR [SI]
	CMP	CX,OFFSET MINCODE:B_KVT
	JE	PRV02
	CMP	CX,OFFSET MINCODE:B_EVT
	JE	PRV02
	MOV	CX,CH_DT
	EVEN
	CALL	PRTCH
	MOV	CX,WORD PTR [2*NMOFS+DI]
	EVEN
	CALL	PRTNM
	JMP	PRV03
PRV10:
	EVEN
	CALL	DTYPE
	EVEN
	CALL	PRTST
	JMP	PRV07
PRV11:	MOV	CX,CH_SQ
	EVEN
	CALL	PRTCH
	EVEN
	CALL	PRTST
	EVEN
	CALL	PRTCH
	JMP	PRV03
PRV12:	MOV	CX,CH_AS
	EVEN
	CALL	PRTCH
	MOV	DI,WORD PTR [2*SEVAR+DI]
	EVEN
	CALL	PRTVN
	JMP	PRV03
PRV13:	MOV	SI,DI
	EVEN
	CALL	DTYPE
	EVEN
	CALL	PRTST
	MOV	CX,CH_PP
	EVEN
	CALL	PRTCH
	MOV	CX,WORD PTR [2*TBLEN+SI]
	SHR	CX,1
	SUB	CX,TBSI_
	CMP	WORD PTR [SI],OFFSET MINCODE:B_TBT
	JE	SHORT PRV14	; (Jump shortened)
	ADD	CX,VCTBD
PRV14:	MOV	WORD PTR REG_IA,CX
	XOR	DX,DX
	EVEN
	CALL	PRTIN
	JMP	PRV06
PRTVN:
	PUBLIC	PRTVN
	PUSH	DI
	ADD	DI,2*VRSOF
	CMP	WORD PTR [2*SCLEN+DI],0
	JNZ	SHORT PRVN1	; (Jump shortened)
	MOV	DI,WORD PTR [2*VRSVO+DI]
PRVN1:
	EVEN
	CALL	PRTST
	POP	DI
	RET
RCBLD:
	PUBLIC	RCBLD
	MOV	DI,DNAMP
	ADD	DI,2*RCSI_
	CMP	DI,DNAME
	JB	SHORT RCBL1	; (Jump shortened)
	MOV	CX,2*RCSI_
	EVEN
	CALL	ALLOC
	ADD	DI,CX
RCBL1:	MOV	DNAMP,DI
	SUB	DI,2*RCSI_
	MOV	WORD PTR [DI],OFFSET MINCODE:B_RCL
	LEA	BP,WORD PTR [2*RCVAL+DI]
	CALL	STR_
	RET
READR:
	PUBLIC	READR
	MOV	DI,R_CNI
	OR	DI,DI
	JNZ	SHORT READ3	; (Jump shortened)
	CMP	CNIND,0
	JNZ	SHORT READA	; (Jump shortened)
	CMP	STAGE,STGIC
	JNE	SHORT READ3	; (Jump shortened)
READA:	MOV	CX,CSWIN
	XOR	SI,SI
	EVEN
	CALL	ALOCS
	EVEN
	CALL	SYSRD
	DW	READ4
	INC	RDNLN
	DEC	POLCT
;	CMP	POLCT,0	(Optimized)
	JNZ	SHORT READ0	; (Jump shortened)
	XOR	CX,CX
	MOV	BX,RDNLN
	EVEN
	CALL	SYSPL
	DW	ERR_-320
	DW	ERR_-299
	DW	ERR_-299
	MOV	POLCS,CX
	MOV	POLCT,CX
READ0:	MOV	AX,WORD PTR [2*SCLEN+DI]
	CMP	AX,CSWIN
	JBE	SHORT READ1	; (Jump shortened)
	MOV	AX,CSWIN
	MOV	WORD PTR [2*SCLEN+DI],AX
READ1:	MOV	BX,SP
	EVEN
	CALL	TRIMR
READ2:	MOV	R_CNI,DI
READ3:	RET
READ4:	CMP	WORD PTR [2*SCLEN+DI],0
	JZ	SHORT READ5	; (Jump shortened)
	XOR	BX,BX
	MOV	RDNLN,BX
	EVEN
	CALL	TRIMR
	EVEN
	CALL	NEWFN
	JMP	READA
READ5:	MOV	DNAMP,DI
	CMP	CNIND,0
	JZ	READ6
	XOR	SI,SI
	EVEN
	CALL	SYSIF
	DW	ERR_-299
	MOV	CX,CNIND
	ADD	CX,VCVLB
	SAL	CX,1
	MOV	DI,R_IFA
	ADD	DI,CX
	MOV	AX,WORD PTR [DI]
	MOV	R_SFC,AX
	MOV	WORD PTR [DI],OFFSET MINDATA:NULLS
	MOV	DI,R_IFL
	ADD	DI,CX
	MOV	SI,WORD PTR [DI]
	MOV	DX,WORD PTR WORD PTR [2*ICVAL+SI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+SI]
	MOV	WORD PTR REG_IA,AX
	MOV	AX,WORD PTR REG_IA
	MOV	RDNLN,AX
	MOV	WORD PTR [DI],OFFSET MINDATA:INTON
	DEC	CNIND
	MOV	BX,CMPSN
	INC	BX
	MOV	WORD PTR REG_IA,BX
	XOR	DX,DX
	EVEN
	CALL	ICBLD
	MOV	SI,R_SFN
	MOV	BX,SP
	EVEN
	CALL	TFIND
	DW	ERR_-299
	MOV	AX,R_SFC
	MOV	WORD PTR [2*TEVAL+SI],AX
	CMP	STAGE,STGIC
	JE	READA
	CMP	CNIND,0
	JNZ	READA
	MOV	SI,R_ICI
	XOR	AX,AX
	MOV	R_ICI,AX
	MOV	CX,CNSIL
	MOV	BX,CNSPT
	SUB	CX,BX
	MOV	SCNIL,CX
	XOR	AX,AX
	MOV	SCNPT,AX
	EVEN
	CALL	SBSTR
	MOV	R_CIM,DI
	JMP	READ2
READ6:	XOR	DI,DI
	JMP	READ2
SBSTR:
	PUBLIC	SBSTR
	OR	CX,CX
	JZ	SHORT SBST2	; (Jump shortened)
	EVEN
	CALL	ALOCS
	MOV	CX,DX
	MOV	DX,DI
	LEA	SI,[CFP_F+SI+BX]
	ADD	DI,CFP_F
	SHR	CX,1
	REP	MOVSW
	ADC	CX,CX
	REP	MOVSB
	MOV	DI,DX
SBST1:	XOR	SI,SI
	RET
SBST2:	MOV	DI,OFFSET MINDATA:NULLS
	JMP	SBST1
STGCC:
	PUBLIC	STGCC
	MOV	CX,POLCS
	MOV	BX,NUM01
	MOV	DX,WORD PTR KVSTL+2
	MOV	AX,WORD PTR KVSTL
	MOV	WORD PTR REG_IA,AX
	CMP	KVPFL,0
	JNZ	SHORT STGC1	; (Jump shortened)
	OR	DX,DX
	JL	SHORT STGC3	; (Jump shortened)
	CMP	R_STC,0
	JZ	SHORT STGC2	; (Jump shortened)
STGC1:	MOV	BX,CX
	MOV	CX,NUM01
	JMP	SHORT STGC3	; (Jump shortened)
STGC2:	MOV	WORD PTR REG_IA,CX
	XOR	DX,DX
	MOV	AX,WORD PTR KVSTL
	SUB	WORD PTR REG_IA,AX
	SBB	DX,WORD PTR KVSTL+2
	OR	DX,DX
	JG	SHORT L0022
	JL	SHORT STGC3	; (Jump shortened)
	CMP	WORD PTR REG_IA,0
	JE	SHORT STGC3	; (Jump shortened)
L0022	LABEL	NEAR
	MOV	DX,WORD PTR KVSTL+2
	MOV	AX,WORD PTR KVSTL
	MOV	WORD PTR REG_IA,AX
	MOV	CX,WORD PTR REG_IA
STGC3:	MOV	STMCS,CX
	MOV	STMCT,CX
	MOV	POLCT,BX
	RET
TFIND:
	PUBLIC	TFIND
	PUSH	BX
	PUSH	DI
	PUSH	SI
	MOV	CX,WORD PTR [2*TBLEN+SI]
	SHR	CX,1
	SUB	CX,TBBUK
	MOV	WORD PTR REG_IA,CX
	XOR	DX,DX
	MOV	WORD PTR TFNSI+2,DX
	MOV	AX,WORD PTR REG_IA
	MOV	WORD PTR TFNSI,AX
	MOV	SI,WORD PTR [DI]
	MOV	SI,CS:[SI-2]
	INC	SI
	CMP	SI,BL__D+1
	SBB	AX,AX
	AND	SI,AX
	SHL	SI,1
	JMP	CS:WORD PTR L0023[SI]
L0023	DW	OFFSET MINCODE:TFN00
	DW	OFFSET MINCODE:TFN00
	DW	OFFSET MINCODE:TFN00
	DW	OFFSET MINCODE:TFN00
	DW	OFFSET MINCODE:TFN02
	DW	OFFSET MINCODE:TFN04
	DW	OFFSET MINCODE:TFN03
	DW	OFFSET MINCODE:TFN03
	DW	OFFSET MINCODE:TFN03
	DW	OFFSET MINCODE:TFN02
	DW	OFFSET MINCODE:TFN05
	DW	OFFSET MINCODE:TFN00
	DW	OFFSET MINCODE:TFN00
	DW	OFFSET MINCODE:TFN00
	DW	OFFSET MINCODE:TFN00
	DW	OFFSET MINCODE:TFN00
	DW	OFFSET MINCODE:TFN00
	DW	OFFSET MINCODE:TFN00
TFN00:	MOV	CX,WORD PTR [2*1+DI]
TFN01:	MOV	WORD PTR REG_IA,CX
	XOR	DX,DX
	JMP	SHORT TFN06	; (Jump shortened)
TFN02:	MOV	DX,WORD PTR WORD PTR [2*1+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*1+DI]
	MOV	WORD PTR REG_IA,AX
	OR	DX,DX
	JGE	SHORT TFN06	; (Jump shortened)
	NOT	DX
	NEG	WORD PTR REG_IA
	SBB	DX,-1
	JO	SHORT TFN06	; (Jump shortened)
	JMP	SHORT TFN06	; (Jump shortened)
TFN03:	MOV	CX,WORD PTR [DI]
	JMP	TFN01
TFN04:	MOV	CX,WORD PTR [2*NMOFS+DI]
	JMP	TFN01
TFN05:
	EVEN
	CALL	HASHS
TFN06:	MOV	BP,OFFSET MINDATA:TFNSI
	CALL	RMI_
	MOV	DX,WORD PTR REG_IA
	SAL	DX,1
	MOV	BP,SP
	MOV	SI,WORD PTR [BP]
	ADD	SI,DX
	MOV	DI,WORD PTR [2*TBBUK+SI]
;	 MOV  BP,SP	; (Redundant)
	CMP	DI,WORD PTR [BP]
	JE	SHORT TFN10	; (Jump shortened)
TFN07:	MOV	BX,DI
	MOV	DI,WORD PTR [2*TESUB+DI]
	MOV	BP,SP
	MOV	SI,WORD PTR [2*1+BP]
	EVEN
	CALL	IDENT
	DW	TFN08
	MOV	SI,BX
	MOV	DI,WORD PTR [2*TENXT+SI]
	MOV	BP,SP
	CMP	DI,WORD PTR [BP]
	JNE	TFN07
	MOV	DX,2*TENXT
	JMP	SHORT TFN11	; (Jump shortened)
TFN08:	MOV	SI,BX
	MOV	CX,2*TEVAL
	MOV	BP,SP
	MOV	BX,WORD PTR [2*2+BP]
	OR	BX,BX
	JNZ	SHORT TFN09	; (Jump shortened)
	EVEN
	CALL	ACESS
	DW	TFN12
	XOR	BX,BX
TFN09:	ADD	SP,2*NUM03
	POP	AX
	INC	AX
	INC	AX
	JMP	AX
TFN10:	ADD	DX,2*TBBUK
	MOV	BP,SP
	MOV	SI,WORD PTR [BP]
TFN11:	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
	MOV	DI,WORD PTR [2*TBINV+DI]
;	 MOV  BP,SP	; (Redundant)
	MOV	BX,WORD PTR [2*2+BP]
	OR	BX,BX
	JZ	TFN09
	MOV	BX,DI
	MOV	CX,2*TESI_
	EVEN
	CALL	ALLOC
	ADD	SI,DX
	MOV	WORD PTR [SI],DI
	MOV	WORD PTR [DI],OFFSET MINCODE:B_TET
	MOV	WORD PTR [2*TEVAL+DI],BX
	POP	WORD PTR [2*TENXT+DI]
	POP	WORD PTR [2*TESUB+DI]
	POP	BX
	MOV	SI,DI
	MOV	CX,2*TEVAL
	POP	AX
	INC	AX
	INC	AX
	JMP	AX
TFN12:	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
TMAKE:
	PUBLIC	TMAKE
	MOV	CX,DX
	ADD	CX,TBSI_
	SAL	CX,1
	EVEN
	CALL	ALLOC
	MOV	BX,DI
	MOV	AX,OFFSET MINCODE:B_TBT
	STOSW
	XOR	AX,AX
	STOSW
	MOV	AX,CX
	STOSW
	MOV	AX,SI
	STOSW
TMA01:	MOV	AX,BX
	STOSW
	DEC	DX
	JNZ	TMA01
	MOV	DI,BX
	RET
VMAKE:
	PUBLIC	VMAKE
	MOV	BX,CX
	ADD	CX,VCSI_
	SAL	CX,1
	CMP	CX,MXLEN
	JA	SHORT VMAK2	; (Jump shortened)
	EVEN
	CALL	ALLOC
	MOV	WORD PTR [DI],OFFSET MINCODE:B_VCT
	XOR	AX,AX
	MOV	WORD PTR [2*IDVAL+DI],AX
	MOV	WORD PTR [2*VCLEN+DI],CX
	MOV	DX,SI
	MOV	SI,DI
	ADD	SI,2*VCVLS
VMAK1:	MOV	WORD PTR [SI],DX
	INC	SI
	INC	SI
	DEC	BX
	JNZ	VMAK1
	POP	AX
	INC	AX
	INC	AX
	JMP	AX
VMAK2:	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
SCANE:
	PUBLIC	SCANE
	XOR	AX,AX
	MOV	SCNBL,AX
	MOV	SCNSA,CX
	MOV	SCNSB,BX
	MOV	SCNSC,DX
	CMP	SCNRS,0
	JZ	SHORT SCN03	; (Jump shortened)
	MOV	SI,SCNTP
	MOV	DI,R_SCP
	XOR	AX,AX
	MOV	SCNRS,AX
	JMP	SCN13
SCN01:
	EVEN
	CALL	READR
	MOV	BX,2*DVUBS
	OR	DI,DI
	JZ	SCN30
	ADD	DI,CFP_F
	MOV	DL,[DI]
	XOR	DH,DH
	CMP	DX,CH_DT
	JE	SHORT SCN02	; (Jump shortened)
	CMP	DX,CH_PL
	JNE	SCN30
SCN02:
	EVEN
	CALL	NEXTS
	MOV	SCNPT,NUM01
	MOV	SCNBL,SP
SCN03:	MOV	CX,SCNPT
	CMP	CX,SCNIL
	JE	SCN01
	MOV	SI,R_CIM
	ADD	SI,CFP_F
	ADD	SI,CX
	MOV	SCNSE,CX
	MOV	DX,OFFSET MINDATA:OPDVS
	MOV	BX,2*DVUBS
	JMP	SHORT SCN06	; (Jump shortened)
SCN05:	OR	BX,BX
	JZ	SCN10
	INC	SCNSE
	CMP	CX,SCNIL
	JE	SCN01
	MOV	SCNBL,SP
SCN06:	LODSB
	XOR	AH,AH
	XCHG	AX,DI
	INC	CX
	MOV	SCNPT,CX
	INC	DI
	CMP	DI,CFP_U+1
	SBB	AX,AX
	AND	DI,AX
	SHL	DI,1
	JMP	CS:WORD PTR L0024[DI]
L0024	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN05
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN05
	DW	OFFSET MINCODE:SCN37
	DW	OFFSET MINCODE:SCN17
	DW	OFFSET MINCODE:SCN41
	DW	OFFSET MINCODE:SCN36
	DW	OFFSET MINCODE:SCN38
	DW	OFFSET MINCODE:SCN44
	DW	OFFSET MINCODE:SCN16
	DW	OFFSET MINCODE:SCN25
	DW	OFFSET MINCODE:SCN26
	DW	OFFSET MINCODE:SCN49
	DW	OFFSET MINCODE:SCN33
	DW	OFFSET MINCODE:SCN31
	DW	OFFSET MINCODE:SCN34
	DW	OFFSET MINCODE:SCN32
	DW	OFFSET MINCODE:SCN40
	DW	OFFSET MINCODE:SCN08
	DW	OFFSET MINCODE:SCN08
	DW	OFFSET MINCODE:SCN08
	DW	OFFSET MINCODE:SCN08
	DW	OFFSET MINCODE:SCN08
	DW	OFFSET MINCODE:SCN08
	DW	OFFSET MINCODE:SCN08
	DW	OFFSET MINCODE:SCN08
	DW	OFFSET MINCODE:SCN08
	DW	OFFSET MINCODE:SCN08
	DW	OFFSET MINCODE:SCN29
	DW	OFFSET MINCODE:SCN30
	DW	OFFSET MINCODE:SCN28
	DW	OFFSET MINCODE:SCN46
	DW	OFFSET MINCODE:SCN27
	DW	OFFSET MINCODE:SCN45
	DW	OFFSET MINCODE:SCN42
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN20
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN21
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN28
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN27
	DW	OFFSET MINCODE:SCN37
	DW	OFFSET MINCODE:SCN24
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN20
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN21
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN09
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN43
	DW	OFFSET MINCODE:SCN07
	DW	OFFSET MINCODE:SCN35
	DW	OFFSET MINCODE:SCN07
SCN07:	OR	BX,BX
	JZ	SHORT SCN10	; (Jump shortened)
	CALL	ERR_0
	DB	230
SCN08:	OR	BX,BX
	JZ	SHORT SCN09	; (Jump shortened)
	XOR	DX,DX
SCN09:	CMP	CX,SCNIL
	JE	SHORT SCN11	; (Jump shortened)
	XOR	BX,BX
	JMP	SCN06
SCN10:	DEC	CX
SCN11:	MOV	SCNPT,CX
	MOV	BX,SCNSE
	SUB	CX,BX
	MOV	SI,R_CIM
	OR	DX,DX
	JNZ	SHORT SCN15	; (Jump shortened)
	EVEN
	CALL	SBSTR
	MOV	DNAMP,DI
	EVEN
	CALL	GTNUM
	DW	SCN14
SCN12:	MOV	SI,T_CON
SCN13:	MOV	CX,SCNSA
	MOV	BX,SCNSB
	MOV	DX,SCNSC
	MOV	R_SCP,DI
	MOV	SCNTP,SI
	XOR	AX,AX
	MOV	SCNGO,AX
	RET
SCN14:	CALL	ERR_0
	DB	231
SCN15:
	EVEN
	CALL	SBSTR
	CMP	SCNCC,0
	JNZ	SCN13
	EVEN
	CALL	GTNVR
	DW	ERR_-299
	MOV	SI,T_VAR
	JMP	SCN13
SCN16:	OR	BX,BX
	JZ	SCN10
	MOV	BX,CH_SQ
	JMP	SHORT SCN18	; (Jump shortened)
SCN17:	OR	BX,BX
	JZ	SCN10
	MOV	BX,CH_DQ
SCN18:	CMP	CX,SCNIL
	JE	SHORT SCN19	; (Jump shortened)
	LODSB
	XOR	AH,AH
	XCHG	AX,DX
	INC	CX
	CMP	DX,BX
	JNE	SCN18
	MOV	BX,SCNPT
	MOV	SCNPT,CX
	DEC	CX
	SUB	CX,BX
	MOV	SI,R_CIM
	EVEN
	CALL	SBSTR
	JMP	SCN12
SCN19:	MOV	SCNPT,CX
	CALL	ERR_0
	DB	232
SCN20:	MOV	DI,T_FGO
	JMP	SHORT SCN22	; (Jump shortened)
SCN21:	MOV	DI,T_SGO
SCN22:	CMP	SCNGO,0
	JZ	SCN09
SCN23:	OR	BX,BX
	JZ	SCN10
	MOV	SI,DI
	JMP	SCN13
SCN24:	OR	BX,BX
	JZ	SCN09
	JMP	SCN07
SCN25:	MOV	DI,T_LPR
	OR	BX,BX
	JNZ	SCN23
	OR	DX,DX
	JZ	SCN10
	MOV	BX,SCNSE
	MOV	SCNPT,CX
	DEC	CX
	SUB	CX,BX
	MOV	SI,R_CIM
	EVEN
	CALL	SBSTR
	EVEN
	CALL	GTNVR
	DW	ERR_-299
	MOV	SI,T_FNC
	JMP	SCN13
SCN26:	MOV	DI,T_RPR
	JMP	SCN23
SCN27:	MOV	DI,T_RBR
	JMP	SCN23
SCN28:	MOV	DI,T_LBR
	JMP	SCN23
SCN29:	MOV	DI,T_COL
	JMP	SCN23
SCN30:	MOV	DI,T_SMC
	JMP	SCN23
SCN31:	MOV	DI,T_CMA
	JMP	SCN23
SCN32:	OR	BX,BX
	JZ	SCN09
	ADD	DX,BX
SCN33:	OR	DX,DX
	JZ	SCN09
	OR	BX,BX
	JZ	SHORT SCN48	; (Jump shortened)
	ADD	DX,BX
SCN34:	OR	DX,DX
	JZ	SCN09
	OR	BX,BX
	JZ	SHORT SCN48	; (Jump shortened)
	ADD	DX,BX
SCN35:	ADD	DX,BX
SCN36:	ADD	DX,BX
SCN37:	ADD	DX,BX
SCN38:	ADD	DX,BX
SCN39:	ADD	DX,BX
SCN40:	ADD	DX,BX
SCN41:	ADD	DX,BX
SCN42:	ADD	DX,BX
SCN43:	ADD	DX,BX
SCN44:	ADD	DX,BX
SCN45:	ADD	DX,BX
SCN46:	OR	BX,BX
	JZ	SCN10
	MOV	DI,DX
	MOV	DL,[SI]
	XOR	DH,DH
	MOV	SI,T_BOP
	CMP	CX,SCNIL
	JE	SHORT SCN47	; (Jump shortened)
	CMP	DX,CH_BL
	JE	SHORT SCN47	; (Jump shortened)
	CMP	DX,CH_HT
	JE	SHORT SCN47	; (Jump shortened)
	CMP	DX,CH_SM
	JE	SHORT SCN47	; (Jump shortened)
	CMP	DX,CH_CL
	JE	SHORT SCN47	; (Jump shortened)
	CMP	DX,CH_RP
	JE	SHORT SCN47	; (Jump shortened)
	CMP	DX,CH_RB
	JE	SHORT SCN47	; (Jump shortened)
	CMP	DX,CH_CB
	JE	SHORT SCN47	; (Jump shortened)
	ADD	DI,2*DVBS_
	MOV	SI,T_UOP
	CMP	SCNTP,T_UOK
	JBE	SCN13
SCN47:	CMP	SCNBL,0
	JNZ	SCN13
SCN48:	CALL	ERR_0
	DB	233
SCN49:	OR	BX,BX
	JZ	SCN10
	CMP	CX,SCNIL
	JE	SCN39
	MOV	DI,CX
	MOV	SCNOF,CX
	LODSB
	XOR	AH,AH
	XCHG	AX,CX
	CMP	CX,CH_AS
	JNE	SHORT SCN50	; (Jump shortened)
	INC	DI
	CMP	DI,SCNIL
	JE	SHORT SCN51	; (Jump shortened)
	MOV	CL,[SI]
	XOR	CH,CH
	CMP	CX,CH_BL
	JE	SHORT SCN51	; (Jump shortened)
	CMP	CX,CH_HT
	JE	SHORT SCN51	; (Jump shortened)
SCN50:	MOV	CX,SCNOF
	MOV	SI,R_CIM
	ADD	SI,CFP_F
	ADD	SI,CX
	JMP	SCN39
SCN51:	MOV	SCNPT,DI
	MOV	CX,DI
	JMP	SCN37
SCNGF:
	PUBLIC	SCNGF
	EVEN
	CALL	SCANE
	CMP	SI,T_LPR
	JE	SHORT SCNG1	; (Jump shortened)
	CMP	SI,T_LBR
	JE	SHORT SCNG2	; (Jump shortened)
	CALL	ERR_0
	DB	234
SCNG1:	MOV	BX,NUM01
	EVEN
	CALL	EXPAN
	MOV	CX,OFFSET MINDATA:OPDVN
	CMP	DI,STATB
	JBE	SHORT SCNG3	; (Jump shortened)
	CMP	DI,STATE
	JB	SHORT SCNG4	; (Jump shortened)
	JMP	SHORT SCNG3	; (Jump shortened)
SCNG2:	MOV	BX,NUM02
	EVEN
	CALL	EXPAN
	MOV	CX,OFFSET MINDATA:OPDVD
SCNG3:	PUSH	CX
	PUSH	DI
	CALL	EXPOP
	POP	DI
SCNG4:	RET
SETVR:
	PUBLIC	SETVR
	CMP	DI,STATE
	JA	SHORT SETV1	; (Jump shortened)
	MOV	SI,DI
	MOV	WORD PTR [2*VRGET+DI],OFFSET MINCODE:B_VRL
	CMP	WORD PTR [2*VRSTO+DI],OFFSET MINCODE:B_VRE
	JE	SHORT SETV1	; (Jump shortened)
	MOV	WORD PTR [2*VRSTO+DI],OFFSET MINCODE:B_VRS
	MOV	SI,WORD PTR [2*VRVAL+SI]
	CMP	WORD PTR [SI],OFFSET MINCODE:B_TRT
	JNE	SHORT SETV1	; (Jump shortened)
	MOV	WORD PTR [2*VRGET+DI],OFFSET MINCODE:B_VRA
	MOV	WORD PTR [2*VRSTO+DI],OFFSET MINCODE:B_VRV
SETV1:	RET
SORTA:
	PUBLIC	SORTA
	POP	PRC_+30
	MOV	SRTSR,CX
	MOV	SRTST,2*NUM01
	XOR	AX,AX
	MOV	SRTOF,AX
	MOV	SRTDF,OFFSET MINDATA:NULLS
	POP	R_SXR
	POP	DI
	MOV	CX,SP
	EVEN
	CALL	GTARR
	DW	SRT18
	DW	SRT16
	PUSH	DI
	PUSH	DI
	CALL	COPYB
	DW	ERR_-299
	PUSH	DI
	MOV	DI,R_SXR
	MOV	BP,SP
	MOV	SI,WORD PTR [2*1+BP]
	CMP	WORD PTR [SI],OFFSET MINCODE:B_VCT
	JNE	SHORT SRT02	; (Jump shortened)
	CMP	DI,OFFSET MINDATA:NULLS
	JE	SHORT SRT01	; (Jump shortened)
	EVEN
	CALL	GTNVR
	DW	ERR_-257
	MOV	SRTDF,DI
SRT01:	MOV	DX,2*VCLEN
	MOV	BX,2*VCVLS
	MOV	CX,WORD PTR [2*VCLEN+SI]
	SUB	CX,2*VCSI_
	JMP	SRT04
SRT02:	MOV	DX,WORD PTR WORD PTR [2*ARDIM+SI]+2
	MOV	AX,WORD PTR WORD PTR [2*ARDIM+SI]
	MOV	WORD PTR REG_IA,AX
	MOV	CX,WORD PTR REG_IA
	SAL	CX,1
	MOV	BX,2*ARVLS
	MOV	DX,2*ARPRO
	CMP	WORD PTR [2*ARNDM+SI],NUM01
	JE	SRT04
	CMP	WORD PTR [2*ARNDM+SI],NUM02
	JNE	SRT16
	MOV	DX,WORD PTR WORD PTR [2*ARLB2+SI]+2
	MOV	AX,WORD PTR WORD PTR [2*ARLB2+SI]
	MOV	WORD PTR REG_IA,AX
	CMP	DI,OFFSET MINDATA:NULLS
	JE	SHORT SRT03	; (Jump shortened)
	EVEN
	CALL	GTINT
	DW	SRT17
	MOV	DX,WORD PTR WORD PTR [2*ICVAL+DI]+2
	MOV	AX,WORD PTR WORD PTR [2*ICVAL+DI]
	MOV	WORD PTR REG_IA,AX
SRT03:	MOV	AX,WORD PTR WORD PTR [2*ARLB2+SI]
	SUB	WORD PTR REG_IA,AX
	SBB	DX,WORD PTR WORD PTR [2*ARLB2+SI]+2
	JO	SRT17
	OR	DX,DX
	JL	SRT17
	MOV	AX,WORD PTR WORD PTR [2*ARDM2+SI]
	SUB	WORD PTR REG_IA,AX
	SBB	DX,WORD PTR WORD PTR [2*ARDM2+SI]+2
	OR	DX,DX
	JGE	SRT17
	MOV	AX,WORD PTR WORD PTR [2*ARDM2+SI]
	ADD	WORD PTR REG_IA,AX
	ADC	DX,WORD PTR WORD PTR [2*ARDM2+SI]+2
	MOV	CX,WORD PTR REG_IA
	SAL	CX,1
	MOV	SRTOF,CX
	MOV	DX,WORD PTR WORD PTR [2*ARDM2+SI]+2
	MOV	AX,WORD PTR WORD PTR [2*ARDM2+SI]
	MOV	WORD PTR REG_IA,AX
	MOV	CX,WORD PTR REG_IA
	MOV	DI,CX
	SAL	CX,1
	MOV	SRTST,CX
	MOV	DX,WORD PTR WORD PTR [2*ARDIM+SI]+2
	MOV	AX,WORD PTR WORD PTR [2*ARDIM+SI]
	MOV	WORD PTR REG_IA,AX
	MOV	CX,WORD PTR REG_IA
	SAL	CX,1
	MOV	DX,WORD PTR [2*ARLEN+SI]
	SUB	DX,CX
	DEC	DX
	DEC	DX
	MOV	BX,WORD PTR [2*AROFS+SI]
	INC	BX
	INC	BX
SRT04:	CMP	CX,2*NUM01
	JBE	SRT15
	MOV	SRTSN,CX
	MOV	SRTSO,DX
	MOV	DX,WORD PTR [2*ARLEN+SI]
	ADD	DX,SI
	MOV	SRTSF,BX
	ADD	SI,BX
SRT05:	MOV	DI,WORD PTR [SI]
SRT06:	CMP	WORD PTR [DI],OFFSET MINCODE:B_TRT
	JNE	SHORT SRT07	; (Jump shortened)
	MOV	DI,WORD PTR [2*TRVAL+DI]
	JMP	SRT06
SRT07:	MOV	WORD PTR [SI],DI
	INC	SI
	INC	SI
	CMP	SI,DX
	JB	SRT05
	MOV	BP,SP
	MOV	SI,WORD PTR [BP]
	MOV	DI,SRTSF
	MOV	BX,SRTST
	ADD	SI,SRTSO
	INC	SI
	INC	SI
	MOV	DX,SRTSN
	SHR	DX,1
	MOV	SRTNR,DX
SRT08:	MOV	WORD PTR [SI],DI
	INC	SI
	INC	SI
	ADD	DI,BX
	DEC	DX
	JNZ	SRT08
SRT09:	MOV	CX,SRTSN
	MOV	DX,SRTNR
	SHR	DX,1
	SAL	DX,1
SRT10:	CALL	SORTH
	DEC	DX
	DEC	DX
;	OR	DX,DX	(Optimized)
	JNZ	SRT10
	MOV	DX,CX
SRT11:	DEC	DX
	DEC	DX
;	OR	DX,DX	(Optimized)
	JZ	SHORT SRT12	; (Jump shortened)
	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
	ADD	DI,SRTSO
	MOV	SI,DI
	ADD	SI,DX
	MOV	BX,WORD PTR [2*1+SI]
	MOV	AX,WORD PTR [2*1+DI]
	MOV	WORD PTR [2*1+SI],AX
	MOV	WORD PTR [2*1+DI],BX
	MOV	CX,DX
	MOV	DX,2*NUM01
	CALL	SORTH
	MOV	DX,CX
	JMP	SRT11
SRT12:	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
	MOV	DX,DI
	ADD	DX,SRTSO
	ADD	DI,SRTSF
	MOV	BX,SRTST
SRT13:	INC	DX
	INC	DX
	MOV	SI,DX
	MOV	SI,WORD PTR [SI]
	MOV	BP,SP
	ADD	SI,WORD PTR [2*1+BP]
	MOV	CX,BX
	SHR	CX,1
	REP	MOVSW
	DEC	SRTNR
;	CMP	SRTNR,0	(Optimized)
	JNZ	SRT13
SRT15:	POP	DI
	POP	AX
	XOR	AX,AX
	MOV	R_SXL,AX
	XOR	AX,AX
	MOV	R_SXR,AX
	MOV	AX,PRC_+30
	INC	AX
	INC	AX
	JMP	AX
SRT16:	CALL	ERR_1
	DB	0
SRT17:	CALL	ERR_1
	DB	2
SRT18:	MOV	BP,PRC_+30
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
SORTC:
	PUBLIC	SORTC
	MOV	SRTS1,CX
	MOV	SRTS2,BX
	MOV	SRTSC,DX
	ADD	SI,SRTOF
	MOV	DI,SI
	ADD	SI,CX
	ADD	DI,BX
	MOV	SI,WORD PTR [SI]
	MOV	DI,WORD PTR [DI]
	CMP	SRTDF,OFFSET MINDATA:NULLS
	JNE	SRC12
SRC01:	MOV	DX,WORD PTR [SI]
	CMP	DX,WORD PTR [DI]
	JNE	SHORT SRC02	; (Jump shortened)
	CMP	DX,OFFSET MINCODE:B_SCL
	JE	SRC09
	CMP	DX,OFFSET MINCODE:B_ICL
	JE	SHORT SRC14	; (Jump shortened)
SRC02:	MOV	R_SXL,SI
	MOV	R_SXR,DI
	CMP	DX,OFFSET MINCODE:B_SCL
	JE	SHORT SRC11	; (Jump shortened)
	CMP	WORD PTR [DI],OFFSET MINCODE:B_SCL
	JE	SHORT SRC11	; (Jump shortened)
SRC14:	PUSH	SI
	PUSH	DI
	CALL	ACOMP
	DW	SRC10
	DW	SRC10
	DW	SRC03
	DW	SRC08
	DW	SRC05
SRC03:	CMP	SRTSR,0
	JNZ	SHORT SRC06	; (Jump shortened)
SRC04:	MOV	DX,SRTSC
	POP	BP
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
SRC05:	CMP	SRTSR,0
	JNZ	SRC04
SRC06:	MOV	DX,SRTSC
	POP	AX
	INC	AX
	INC	AX
	JMP	AX
SRC07:	CMP	SI,DI
	JB	SRC03
	CMP	SI,DI
	JA	SRC05
SRC08:	MOV	AX,SRTS1
	CMP	AX,SRTS2
	JB	SRC04
	JMP	SRC06
SRC09:	PUSH	SI
	PUSH	DI
	CALL	LCOMP
	DW	ERR_-299
	DW	ERR_-299
	DW	SRC03
	DW	SRC08
	DW	SRC05
SRC10:	MOV	SI,R_SXL
	MOV	DI,R_SXR
	MOV	DX,WORD PTR [SI]
	CMP	DX,WORD PTR [DI]
	JE	SRC07
SRC11:	MOV	SI,DX
	MOV	DI,WORD PTR [DI]
	MOV	SI,CS:[SI-2]
	MOV	DI,CS:[DI-2]
	CMP	SI,DI
	JA	SRC05
	JMP	SRC03
SRC12:
	EVEN
	CALL	SORTF
	PUSH	SI
	MOV	SI,DI
	EVEN
	CALL	SORTF
	MOV	DI,SI
	POP	SI
	JMP	SRC01
SORTF:
	PUBLIC	SORTF
	CMP	WORD PTR [SI],OFFSET MINCODE:B_PDT
	JNE	SHORT SRTF3	; (Jump shortened)
	PUSH	DI
	MOV	DI,SRTFD
	OR	DI,DI
	JZ	SHORT SRTF4	; (Jump shortened)
	CMP	DI,WORD PTR [2*PDDFP+SI]
	JNE	SHORT SRTF4	; (Jump shortened)
	MOV	AX,SRTDF
	CMP	AX,SRTFF
	JNE	SHORT SRTF4	; (Jump shortened)
	ADD	SI,SRTFO
SRTF1:	MOV	SI,WORD PTR [SI]
SRTF2:	POP	DI
SRTF3:	RET
SRTF4:	MOV	DI,SI
	MOV	DI,WORD PTR [2*PDDFP+DI]
	MOV	SRTFD,DI
	MOV	DX,WORD PTR [2*FARGS+DI]
	SAL	DX,1
	ADD	DI,WORD PTR [2*DFLEN+DI]
SRTF5:	DEC	DX
	DEC	DX
	DEC	DI
	DEC	DI
	MOV	AX,WORD PTR [DI]
	CMP	AX,SRTDF
	JE	SHORT SRTF6	; (Jump shortened)
	OR	DX,DX
	JNZ	SRTF5
	JMP	SRTF2
SRTF6:	MOV	AX,WORD PTR [DI]
	MOV	SRTFF,AX
	ADD	DX,2*PDFLD
	MOV	SRTFO,DX
	ADD	SI,DX
	JMP	SRTF1
SORTH:
	PUBLIC	SORTH
	POP	PRC_+32
	MOV	SRTSN,CX
	MOV	SRTWC,DX
	MOV	BP,SP
	MOV	SI,WORD PTR [BP]
	ADD	SI,SRTSO
	ADD	SI,DX
	MOV	AX,WORD PTR [SI]
	MOV	SRTRT,AX
	ADD	DX,DX
SRH01:	CMP	DX,SRTSN
	JA	SHORT SRH03	; (Jump shortened)
	CMP	DX,SRTSN
	JE	SHORT SRH02	; (Jump shortened)
	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
;	 MOV  BP,SP	; (Redundant)
	MOV	SI,WORD PTR [2*1+BP]
	ADD	DI,SRTSO
	ADD	DI,DX
	MOV	CX,WORD PTR [2*1+DI]
	MOV	BX,WORD PTR [DI]
	EVEN
	CALL	SORTC
	DW	SRH02
	INC	DX
	INC	DX
SRH02:	MOV	BP,SP
	MOV	SI,WORD PTR [2*1+BP]
;	 MOV  BP,SP	; (Redundant)
	MOV	DI,WORD PTR [BP]
	ADD	DI,SRTSO
	MOV	BX,DI
	ADD	DI,DX
	MOV	CX,WORD PTR [DI]
	MOV	DI,BX
	MOV	BX,SRTRT
	EVEN
	CALL	SORTC
	DW	SRH03
	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
	ADD	DI,SRTSO
	MOV	SI,DI
	MOV	CX,DX
	SHR	DX,1
	SHR	DX,1
	SAL	DX,1
	ADD	SI,CX
	ADD	DI,DX
	MOV	AX,WORD PTR [SI]
	MOV	WORD PTR [DI],AX
	MOV	DX,CX
	ADD	DX,DX
	JC	SHORT SRH03	; (Jump shortened)
	JMP	SRH01
SRH03:	SHR	DX,1
	SHR	DX,1
	SAL	DX,1
	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
	ADD	DI,SRTSO
	ADD	DI,DX
	MOV	AX,SRTRT
	MOV	WORD PTR [DI],AX
	MOV	CX,SRTSN
	MOV	DX,SRTWC
	MOV	AX,PRC_+32
	JMP	AX
TRACE:
	PUBLIC	TRACE
	POP	PRC_+34
	CALL	GTSTG
	DW	TRC15
	ADD	DI,CFP_F
	MOV	CL,[DI]
	XOR	CH,CH
	CMP	CL,'a'
	JB	SHORT L0025
	CMP	CL,'z'
	JA	SHORT L0025
	SUB	CL,32
L0025	LABEL	NEAR
	MOV	BP,SP
	MOV	DI,WORD PTR [BP]
;	 MOV  BP,SP	; (Redundant)
	MOV	WORD PTR [BP],SI
	MOV	DX,TRTAC
	CMP	CX,CH_LA
	JE	TRC10
	MOV	DX,TRTVL
	CMP	CX,CH_LV
	JE	TRC10
	CMP	CX,CH_BL
	JE	TRC10
	CMP	CX,CH_LF
	JE	SHORT TRC01	; (Jump shortened)
	CMP	CX,CH_LR
	JE	SHORT TRC01	; (Jump shortened)
	CMP	CX,CH_LL
	JE	SHORT TRC03	; (Jump shortened)
	CMP	CX,CH_LK
	JE	SHORT TRC06	; (Jump shortened)
	CMP	CX,CH_LC
	JNE	TRC15
TRC01:
	EVEN
	CALL	GTNVR
	DW	TRC16
	POP	AX
	MOV	DI,WORD PTR [2*VRFNC+DI]
	CMP	WORD PTR [DI],OFFSET MINCODE:B_PFC
	JNE	TRC17
	CMP	CX,CH_LR
	JE	SHORT TRC02	; (Jump shortened)
	MOV	WORD PTR [2*PFCTR+DI],SI
	CMP	CX,CH_LC
	JE	EXNUL
TRC02:	MOV	WORD PTR [2*PFRTR+DI],SI
	MOV	AX,PRC_+34
	ADD	AX,4
	JMP	AX
TRC03:
	EVEN
	CALL	GTNVR
	DW	TRC16
	MOV	SI,WORD PTR [2*VRLBL+DI]
	CMP	WORD PTR [SI],OFFSET MINCODE:B_TRT
	JNE	SHORT TRC04	; (Jump shortened)
	MOV	SI,WORD PTR [2*TRLBL+SI]
TRC04:	CMP	SI,OFFSET MINDATA:STNDL
	JE	TRC16
	POP	BX
	OR	BX,BX
	JZ	SHORT TRC05	; (Jump shortened)
	MOV	WORD PTR [2*VRLBL+DI],BX
	MOV	WORD PTR [2*VRTRA+DI],OFFSET MINCODE:B_VRT
	MOV	DI,BX
	MOV	WORD PTR [2*TRLBL+DI],SI
	MOV	AX,PRC_+34
	ADD	AX,4
	JMP	AX
TRC05:	MOV	WORD PTR [2*VRLBL+DI],SI
	MOV	WORD PTR [2*VRTRA+DI],OFFSET MINCODE:B_VRG
	MOV	AX,PRC_+34
	ADD	AX,4
	JMP	AX
TRC06:
	EVEN
	CALL	GTNVR
	DW	TRC16
	CMP	WORD PTR [2*VRLEN+DI],0
	JNZ	TRC16
	POP	AX
	OR	SI,SI
	JZ	SHORT TRC07	; (Jump shortened)
	MOV	WORD PTR [2*TRKVR+SI],DI
TRC07:	MOV	DI,WORD PTR [2*VRSVP+DI]
	CMP	DI,OFFSET MINDATA:V_ERT
	JE	SHORT TRC08	; (Jump shortened)
	CMP	DI,OFFSET MINDATA:V_STC
	JE	SHORT TRC09	; (Jump shortened)
	CMP	DI,OFFSET MINDATA:V_FNC
	JNE	SHORT TRC17	; (Jump shortened)
	MOV	R_FNC,SI
	MOV	AX,PRC_+34
	ADD	AX,4
	JMP	AX
TRC08:	MOV	R_ERT,SI
	MOV	AX,PRC_+34
	ADD	AX,4
	JMP	AX
TRC09:	MOV	R_STC,SI
	EVEN
	CALL	STGCC
	MOV	AX,PRC_+34
	ADD	AX,4
	JMP	AX
TRC10:
	EVEN
	CALL	GTVAR
	DW	TRC16
	POP	BX
	ADD	CX,SI
	MOV	DI,CX
TRC11:	MOV	SI,WORD PTR [DI]
	CMP	WORD PTR [SI],OFFSET MINCODE:B_TRT
	JNE	SHORT TRC13	; (Jump shortened)
	CMP	DX,WORD PTR [2*TRTYP+SI]
	JB	SHORT TRC13	; (Jump shortened)
	CMP	DX,WORD PTR [2*TRTYP+SI]
	JE	SHORT TRC12	; (Jump shortened)
	ADD	SI,2*TRNXT
	MOV	DI,SI
	JMP	TRC11
TRC12:	MOV	SI,WORD PTR [2*TRNXT+SI]
	MOV	WORD PTR [DI],SI
TRC13:	OR	BX,BX
	JZ	SHORT TRC14	; (Jump shortened)
	MOV	WORD PTR [DI],BX
	MOV	DI,BX
	MOV	WORD PTR [2*TRNXT+DI],SI
	MOV	WORD PTR [2*TRTYP+DI],DX
TRC14:	MOV	DI,CX
	SUB	DI,2*VRVAL
	EVEN
	CALL	SETVR
	MOV	AX,PRC_+34
	ADD	AX,4
	JMP	AX
TRC15:	MOV	BP,PRC_+34
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+2]
TRC16:	POP	AX
TRC17:	MOV	BP,PRC_+34
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
TRBLD:
	PUBLIC	TRBLD
	PUSH	DI
	MOV	CX,2*TRSI_
	EVEN
	CALL	ALLOC
	MOV	WORD PTR [DI],OFFSET MINCODE:B_TRT
	MOV	WORD PTR [2*TRFNC+DI],SI
	POP	WORD PTR [2*TRTAG+DI]
	MOV	WORD PTR [2*TRTYP+DI],BX
	MOV	WORD PTR [2*TRVAL+DI],OFFSET MINDATA:NULLS
	RET
TRIMR:
	PUBLIC	TRIMR
	MOV	SI,DI
	MOV	CX,WORD PTR [2*SCLEN+DI]
	OR	CX,CX
	JZ	SHORT TRIM2	; (Jump shortened)
	ADD	SI,CFP_F
	ADD	SI,CX
	OR	BX,BX
	JZ	SHORT TRIM3	; (Jump shortened)
	MOV	DX,CH_BL
TRIM0:	DEC	SI
	MOV	BL,[SI]
	XOR	BH,BH
	CMP	BX,CH_HT
	JE	SHORT TRIM1	; (Jump shortened)
	CMP	BX,DX
	JNE	SHORT TRIM3	; (Jump shortened)
TRIM1:	DEC	CX
;	OR	CX,CX	(Optimized)
	JNZ	TRIM0
TRIM2:	MOV	DNAMP,DI
	MOV	DI,OFFSET MINDATA:NULLS
	JMP	SHORT TRIM5	; (Jump shortened)
TRIM3:	MOV	WORD PTR [2*SCLEN+DI],CX
	MOV	SI,DI
	ADD	SI,CFP_F
	ADD	SI,CX
	ADD	CX,1+2*SCHAR
	AND	CX,-2
	ADD	CX,DI
	MOV	DNAMP,CX
	MOV	CX,CFP_C
	XOR	DX,DX
TRIM4:	MOV	[SI],DL
	INC	SI
	LOOP	TRIM4
TRIM5:	XOR	SI,SI
	RET
TRXEQ:
	PUBLIC	TRXEQ
	MOV	DX,R_COD
	MOV	BX,REG_CP
	SUB	BX,DX
	PUSH	KVTRA
	PUSH	DI
	PUSH	SI
	PUSH	CX
	PUSH	DX
	PUSH	BX
	PUSH	FLPTR
	XOR	AX,AX
	PUSH	AX
	MOV	FLPTR,SP
	XOR	AX,AX
	MOV	KVTRA,AX
	MOV	DX,OFFSET MINDATA:TRXDC
	MOV	R_COD,DX
	MOV	REG_CP,DX
	MOV	BX,CX
	MOV	CX,2*NMSI_
	EVEN
	CALL	ALLOC
	MOV	WORD PTR [DI],OFFSET MINCODE:B_NML
	MOV	WORD PTR [2*NMBAS+DI],SI
	MOV	WORD PTR [2*NMOFS+DI],BX
	MOV	BP,SP
	MOV	SI,WORD PTR [2*6+BP]
	PUSH	DI
	PUSH	WORD PTR [2*TRTAG+SI]
	MOV	SI,WORD PTR [2*TRFNC+SI]
	MOV	SI,WORD PTR [2*VRFNC+SI]
	CMP	SI,OFFSET MINDATA:STNDF
	JE	SHORT TRXQ2	; (Jump shortened)
	MOV	CX,NUM02
	JMP	CFUNC
TRXQ1:	MOV	SP,FLPTR
	POP	AX
	POP	FLPTR
	POP	BX
	POP	DX
	MOV	DI,DX
	MOV	AX,WORD PTR [2*CDSTM+DI]
	MOV	KVSTN,AX
	POP	CX
	POP	SI
	POP	DI
	POP	KVTRA
	ADD	BX,DX
	MOV	REG_CP,BX
	MOV	R_COD,DX
	RET
TRXQ2:	CALL	ERR_0
	DB	197
XSCAN:
	PUBLIC	XSCAN
	MOV	XSCWB,BX
	PUSH	CX
	PUSH	CX
	MOV	DI,R_XSC
	MOV	CX,WORD PTR [2*SCLEN+DI]
	MOV	BX,XSOFS
	SUB	CX,BX
;	OR	CX,CX	(Optimized)
	JZ	SHORT XSCN3	; (Jump shortened)
	LEA	DI,[CFP_F+DI+BX]
XSCN1:	MOV	BL,[DI]
	XOR	BH,BH
	INC	DI
	CMP	BX,DX
	JE	SHORT XSCN4	; (Jump shortened)
	CMP	BX,SI
	JE	SHORT XSCN5	; (Jump shortened)
	MOV	BP,SP
	CMP	WORD PTR [BP],0
	JZ	SHORT XSCN2	; (Jump shortened)
	INC	XSOFS
	CMP	BX,CH_HT
	JE	SHORT XSCN2	; (Jump shortened)
	CMP	BX,CH_BL
	JE	SHORT XSCN2	; (Jump shortened)
	DEC	XSOFS
;	 MOV  BP,SP	; (Redundant)
	XOR	AX,AX
	MOV	WORD PTR [BP],AX
XSCN2:	DEC	CX
;	OR	CX,CX	(Optimized)
	JNZ	XSCN1
XSCN3:	MOV	SI,R_XSC
	MOV	CX,WORD PTR [2*SCLEN+SI]
	MOV	BX,XSOFS
	SUB	CX,BX
	XOR	AX,AX
	MOV	R_XSC,AX
	XOR	AX,AX
	MOV	XSCRT,AX
	JMP	SHORT XSCN7	; (Jump shortened)
XSCN4:	MOV	XSCRT,NUM01
	JMP	SHORT XSCN6	; (Jump shortened)
XSCN5:	MOV	XSCRT,NUM02
XSCN6:	MOV	SI,R_XSC
	MOV	DX,WORD PTR [2*SCLEN+SI]
	SUB	DX,CX
	MOV	CX,DX
	MOV	BX,XSOFS
	SUB	CX,BX
	INC	DX
	MOV	XSOFS,DX
XSCN7:	XOR	DI,DI
	EVEN
	CALL	SBSTR
	POP	AX
	POP	BX
	CMP	WORD PTR [2*SCLEN+DI],0
	JZ	SHORT XSCN8	; (Jump shortened)
	EVEN
	CALL	TRIMR
XSCN8:	MOV	CX,XSCRT
	MOV	BX,XSCWB
	RET
XSCNI:
	PUBLIC	XSCNI
	POP	PRC_+36
	CALL	GTSTG
	DW	XSCI1
	MOV	R_XSC,DI
	XOR	AX,AX
	MOV	XSOFS,AX
	OR	CX,CX
	JZ	SHORT XSCI2	; (Jump shortened)
	MOV	AX,PRC_+36
	ADD	AX,4
	JMP	AX
XSCI1:	MOV	BP,PRC_+36
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+0]
XSCI2:	MOV	BP,PRC_+36
	SUB	AX,AX
	JMP	CS:WORD PTR [BP+2]
	SUBTTL	S P I T B O L -- STACK OVERFLOW SECTION
	PUBLIC	SEC06
SEC06	LABEL	NEAR
	ADD	ERRFT,NUM04
	MOV	SP,FLPTR
	CMP	GBCFL,0
	JNZ	SHORT STAK1	; (Jump shortened)
	CALL	ERR_0
	DB	246
STAK1:	MOV	DI,OFFSET MINDATA:ENDSO
	XOR	AX,AX
	MOV	KVDMP,AX
	JMP	STOPR
	SUBTTL	S P I T B O L -- ERROR SECTION
ERR_0:	XOR	AH,AH
	JMP	SHORT ERR_1A
ERR_1:	MOV	AH,1
ERR_1A:	POP	BP
	MOV	AL,CS:[BP]
	JMP	ERR_
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
	INC	AX
ERR_:	XCHG	CX,AX
	PUBLIC	SEC07
SEC07	LABEL	NEAR
ERROR:	CMP	R_CIM,OFFSET MINDATA:CMLAB
	JE	CMPLE
	MOV	KVERT,CX
	XOR	AX,AX
	MOV	SCNRS,AX
	XOR	AX,AX
	MOV	SCNGO,AX
	MOV	POLCS,NUM01
	MOV	POLCT,NUM01
	MOV	DI,STAGE
	SHL	DI,1
	JMP	CS:WORD PTR L0026[DI]
L0026	LABEL	WORD
	DW	OFFSET MINCODE:ERR01
	DW	OFFSET MINCODE:ERR04
	DW	OFFSET MINCODE:ERR04
	DW	OFFSET MINCODE:ERR05
	DW	OFFSET MINCODE:ERR01
	DW	OFFSET MINCODE:ERR04
	DW	OFFSET MINCODE:ERR04
ERR01:	MOV	SP,CMPXS
	CMP	ERRSP,0
	JNZ	ERR03
	MOV	DX,CMPSN
	EVEN
	CALL	FILNM
	MOV	BX,SCNSE
	MOV	DX,RDCLN
	MOV	DI,STAGE
	EVEN
	CALL	SYSEA
	DW	ERRA3
	PUSH	DI
	MOV	AX,ERICH
	MOV	ERLST,AX
	EVEN
	CALL	LISTR
	EVEN
	CALL	PRTIS
	XOR	AX,AX
	MOV	ERLST,AX
	MOV	CX,SCNSE
	OR	CX,CX
	JZ	SHORT ERR02	; (Jump shortened)
	MOV	BX,CX
	INC	CX
	MOV	SI,R_CIM
	EVEN
	CALL	ALOCS
	MOV	CX,DI
	ADD	DI,CFP_F
	ADD	SI,CFP_F
ERRA1:	LODSB
	XOR	AH,AH
	XCHG	AX,DX
	CMP	DX,CH_HT
	JE	SHORT ERRA2	; (Jump shortened)
	MOV	DX,CH_BL
ERRA2:	MOV	AL,DL
	STOSB
	DEC	BX
	JNZ	ERRA1
	MOV	SI,CH_EX
	MOV	AX,SI
	MOV	[DI],AL
	MOV	PROFS,STNPD
	MOV	DI,CX
	EVEN
	CALL	PRTST
ERR02:
	EVEN
	CALL	PRTIS
	POP	DI
	OR	DI,DI
	JZ	SHORT ERRA0	; (Jump shortened)
	EVEN
	CALL	PRTST
ERRA0:
	EVEN
	CALL	ERMSG
	ADD	LSTLC,NUM03
ERRA3:	XOR	DI,DI
	CMP	ERRFT,NUM03
	JA	STOPR
	INC	CMERC
	MOV	AX,CSWER
	ADD	NOXEQ,AX
	CMP	STAGE,STGIC
	JNE	CMP10
ERR03:	MOV	DI,R_CIM
	ADD	DI,CFP_F
	MOV	AL,[DI]
	XOR	AH,AH
	XCHG	AX,DI
	CMP	DI,CH_MN
	JE	CMPCE
	XOR	AX,AX
	MOV	SCNRS,AX
	MOV	ERRSP,SP
	EVEN
	CALL	SCANE
	CMP	SI,T_SMC
	JNE	ERR03
	XOR	AX,AX
	MOV	ERRSP,AX
	MOV	CWCOF,2*CDCOD
	MOV	CX,OFFSET MINDATA:OCER_
	EVEN
	CALL	CDWRD
	MOV	BP,SP
	MOV	AX,CWCOF
	MOV	WORD PTR [2*CMSOC+BP],AX
;	 MOV  BP,SP	; (Redundant)
	MOV	WORD PTR [2*CMFFC+BP],SP
	EVEN
	CALL	CDWRD
	JMP	CMPSE
ERR04:	CMP	ERRFT,NUM03
	JAE	LABO1
	CMP	KVERT,NM320
	JE	SHORT ERR06	; (Jump shortened)
	XOR	AX,AX
	MOV	R_CCB,AX
	MOV	CWCOF,2*CCCOD
	EVEN
	CALL	ERTEX
	PUSH	AX
ERRA4:	POP	AX
	CMP	SP,FLPRT
	JE	SHORT ERRC4	; (Jump shortened)
	CMP	SP,GTCEF
	JNE	ERRA4
	MOV	STAGE,STGXT
	MOV	AX,R_GTC
	MOV	R_COD,AX
	MOV	FLPTR,SP
	XOR	AX,AX
	MOV	R_CIM,AX
	XOR	AX,AX
	MOV	CNIND,AX
ERRB4:	CMP	KVERL,0
	JNZ	SHORT ERR07	; (Jump shortened)
	JMP	EXFAL
ERRC4:	MOV	SP,FLPTR
	JMP	ERRB4
ERR05:
	CMP	DMVCH,0
	JNZ	SHORT ERR08	; (Jump shortened)
ERR06:	CMP	KVERL,0
	JZ	LABO1
	EVEN
	CALL	ERTEX
ERR07:	CMP	ERRFT,NUM03
	JAE	LABO1
	DEC	KVERL
	MOV	SI,R_ERT
	EVEN
	CALL	KTREX
	MOV	CX,R_COD
	MOV	R_CNT,CX
	MOV	BX,REG_CP
	SUB	BX,CX
	MOV	STXOC,BX
	MOV	DI,FLPTR
	MOV	AX,WORD PTR [DI]
	MOV	STXOF,AX
	MOV	DI,R_SXC
	OR	DI,DI
	JZ	LCNT1
	XOR	AX,AX
	MOV	R_SXC,AX
	MOV	STXVR,OFFSET MINDATA:NULLS
	MOV	SI,WORD PTR [DI]
	JMP	SI
ERR08:	MOV	DI,DMVCH
	OR	DI,DI
	JZ	ERR06
	MOV	AX,WORD PTR [DI]
	MOV	DMVCH,AX
	EVEN
	CALL	SETVR
S_YYY:	JMP	ERR08
	SUBTTL	S P I T B O L -- HERE ENDETH THE CODE
	MinCode_EndS@

	Data_Seg@
	include		hdrdata.inc
	Data_EndS@
	END
